<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>22Nell&#39;s Blog</title>
  
  <subtitle>Notes of a Rookie Engineer</subtitle>
  <link href="https://22aliang.github.io/atom.xml" rel="self"/>
  
  <link href="https://22aliang.github.io/"/>
  <updated>2024-05-13T12:54:12.439Z</updated>
  <id>https://22aliang.github.io/</id>
  
  <author>
    <name>Nell</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java 基礎筆記_2</title>
    <link href="https://22aliang.github.io/2024/05/13/java%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98_2/"/>
    <id>https://22aliang.github.io/2024/05/13/java%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98_2/</id>
    <published>2024-05-13T12:50:07.034Z</published>
    <updated>2024-05-13T12:54:12.439Z</updated>
    
    <content type="html"><![CDATA[<h3 id="環境建置"><a href="#環境建置" class="headerlink" title="環境建置"></a>環境建置</h3><p>利用 cmd 檢查</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java --version </span><br></pre></td></tr></table></figure><p><strong>物件導向 JAVA SE</strong></p><ul><li>組件有屬性有行為<ul><li>class 類型</li><li>inheritance 繼承</li><li>polymorphism 多型</li></ul></li><li>常見操作<ul><li>String 字串操作</li><li>Collection 集合 (List , Set , Map)</li><li>generic 泛型</li></ul></li><li>可重複利用、可擴展</li></ul><hr><h2 id="🦖管理原始碼-amp-位元碼"><a href="#🦖管理原始碼-amp-位元碼" class="headerlink" title="🦖管理原始碼 &amp; 位元碼"></a>🦖管理原始碼 &amp; 位元碼</h2><h2 id="🦖什麼是-JAVA"><a href="#🦖什麼是-JAVA" class="headerlink" title="🦖什麼是 JAVA ?"></a>🦖什麼是 JAVA ?</h2><p>( 寫一份程式碼，就可以在多個平台使用 ) 跨平台、物件導向、強型別的程式語言</p><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ol><li>跨平台、相容性高</li><li>可以做各式各樣的應用 : web、桌面應用程式、GUI 使用者圖形介面、網頁伺服器 </li><li>市場需求高</li></ol><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ol><li>執行速度慢 ( 相較 C++</li><li>需要經過編譯 complie ( 程式碼有錯就無法直 ) 、 Python 就是直譯式語言</li></ol><p> 詳細解釋</p><p>所有程式碼都是 .java 純文本文件，由 Javac ( Java compiler ) 編譯器編譯成 .class 文件<br>是包含 Java 虛擬機 ( Java Virtual Machine ) JVM 的機器語言<br>最後 java 啟動器使用 JVM 運行程式碼</p><p>Java 是靜態語言，變數帶有資料型態，反之就是動態語言 《<a href="https://openhome.cc/Gossip/Programmer/DynamicStaticLanguage.html">詳細良葛格部落格</a>》</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 編寫一支 print HelloWorld 的 Main.java </span></span><br><span class="line">$ javac <span class="title class_">Main</span>.<span class="property">java</span></span><br><span class="line"><span class="comment">// 會跑出 Main.class</span></span><br><span class="line">$ <span class="title class_">Java</span> <span class="title class_">Main</span> </span><br><span class="line"><span class="comment">//HelloWorls ! </span></span><br></pre></td></tr></table></figure><h3 id="Java-歷史"><a href="#Java-歷史" class="headerlink" title="Java 歷史"></a>Java 歷史</h3><p>1990年被 昇陽 Sun MicroSystems 由 James Gosling 在1994年 寫出，2009年被 Oracle 收購，目前有三個版本</p><p>Java 語言只是 Java SE 的一部分</p><ol><li><p>Java EE ( 企業版 ) Java Platform, Enterprise Edition、Jakarta EE</p></li><li><p>Java SE ( 標準版 ) Java Platform, Standard Edition</p><ul><li><p><strong>JDK</strong> (Java SE Development Kit): 開發程式 javac、jaba…</p></li><li><p><strong>JRE</strong> (Java SE Runtime Environment): 執行環境</p></li><li><p><strong>JVM</strong> (Java Virtual Machine): 虛擬機</p><p>  Java SE 17 規範在 <a href="https://openjdk.org/projects/jdk/17/spec/">JSR 392</a> 文件中 <a href="https://jcp.org/en/jsr/detail?id=392">文件</a></p><p>  Java 8 ~ Java SE 17 之前的 Oracle 須付費</p></li></ul></li><li><p><del>Java ME ( 微型版 )</del>  幾乎沒人在用</p></li></ol><p>Oracle JDK &amp; Open JDK 是兩個不同的 JDK，Open 是開源ㄉ、安全ㄉ</p><p>現有 JDK 選擇很多，確認來源信任、授權、提供服務、支援時程等問題 !</p><p>前面提到授權問題，就企業而言，LTS( long trem support ) 版本<br>Java SE 8、11、17<br>Java 8 2014年很久惹，建議使用 Java SE 11 以後的 LTS 版本</p><p>Java SE 17 開始，LTS釋出速度加快為 2 年一次</p><p>良: <strong>JAVA 不僅是程式語言 而是標準規範</strong></p><hr><p>Java 被開發初衷 </p><ol><li>使用 物件導向 OOP </li><li>同一程式，跨平台執行</li><li>內建對電腦網路的支援</li><li>安全執行遠端程式碼</li><li>借鑑 C++ 長處，更易於使用</li></ol><p> 相關術語</p><ol><li>Java Language Specification ( 規範 Java 語法 )</li><li>JVM Specification</li><li>JDK ( Java Development Kit ) Java 開發組合包含 Java Virtual Machine 、Java API</li></ol><h2 id="🦖函數-Function-、Methods"><a href="#🦖函數-Function-、Methods" class="headerlink" title="🦖函數 Function 、Methods"></a>🦖函數 Function 、Methods</h2><p>一個函數會有輸入值 input、得到一個輸出值 output<br>Java 的 API 提供非常多 Function () 、可以提供或不提供 input</p><h2 id="🦖package"><a href="#🦖package" class="headerlink" title="🦖package"></a>🦖package</h2><p>很多 .java 的文件可以依據功能不同來做分類管理</p><h2 id="🦖-Java-Class"><a href="#🦖-Java-Class" class="headerlink" title="🦖 Java Class"></a>🦖 Java Class</h2><p>現實世界中的物件 object、instance 都有自己的狀態 attribute、行為 behavior </p><p>Java Class 是創建單個物件 Object、instance 的藍圖 blueprint</p><p>創建物件的過程被稱為實例化 instantiation ，可以透過 new 關鍵字把電腦記憶體分給新的物件</p><p>class 都是 reference data type (或 Non-primitive data type)</p><h3 id="✨-Class-規則-✨"><a href="#✨-Class-規則-✨" class="headerlink" title="✨ Class 規則 ✨"></a>✨ Class 規則 ✨</h3><ol><li>Class 名稱 和 文件名稱相同</li><li>Class 首字英文字母大寫</li><li>public static void main ( String [] args ) 會被執行</li></ol><h3 id="✨-this-keyword-✨"><a href="#✨-this-keyword-✨" class="headerlink" title="✨  this keyword ✨"></a>✨  this keyword ✨</h3><p>在 IDEA 會自動標顏色跟你說這個 this 跟誰一起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">1.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * Math.pow(<span class="built_in">this</span>.radius, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖-Java-Class-Constructor"><a href="#🦖-Java-Class-Constructor" class="headerlink" title="🦖 Java Class Constructor"></a>🦖 Java Class Constructor</h2><p>Constructor 是用於初始化對象的特殊方法 ( 關鍵字 )，調用構造函數規則為 : </p><h3 id="✨-Constructor-規則-✨"><a href="#✨-Constructor-規則-✨" class="headerlink" title="✨ Constructor 規則 ✨"></a>✨ Constructor 規則 ✨</h3><ol><li>Constructor 必須與 Class 名相同</li><li>Constructor 用於製作新的物件</li><li>Constructor 沒有返回類型，不能寫 return type</li><li>所有 Class 都有默認的 Constructor ( 會有初始值 )</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Circle.java</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="comment">//encapsulation</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="comment">//Construcuor methods have &quot;method overlooading&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line">        radius = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Circle class&#x27;s constructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> newRadius)</span> &#123;</span><br><span class="line">        radius = newRadius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//創建物件起手式</span></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"><span class="comment">//預設會是 0.0</span></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"></span><br><span class="line"> <span class="type">Circle</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        System.out.println(c3.getArea());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Execute scanner class&#x27; constructor</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>public</li><li>private</li></ul><p> Intellij IDEA 開始一個專案</p><p>new file 選擇 location 檔案名稱首字大寫<br>程式碼都放在 src 底下 選擇使用的 JDK<br>右鍵 run <a href="http://main.java/">Main.java</a> 會 complier 在底下<br>也會新增 out 資料夾存放 .class 檔案</p><p> 快捷鍵</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pusvm + tab</span><br><span class="line"><span class="comment">//----</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sout + tab </span><br><span class="line"><span class="comment">//----</span></span><br><span class="line">System.out.println();ln();</span><br></pre></td></tr></table></figure><h2 id="🦖變數-amp-賦值"><a href="#🦖變數-amp-賦值" class="headerlink" title="🦖變數 &amp; 賦值"></a>🦖變數 &amp; 賦值</h2><p>變數 Variable (他就像是一個箱子) 賦值 assignment (把 value 放進去)</p><p>Java 的 等號 &#x3D;  是 assignment 賦值的意思 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本構造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">//variable x data type =&gt; integer</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">        x = x + <span class="number">1</span>; <span class="comment">// 很常見 有語法糖果</span></span><br><span class="line">        x += <span class="number">1</span>; <span class="comment">//語法糖 syntax suggar</span></span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✨-Variable-規則-✨"><a href="#✨-Variable-規則-✨" class="headerlink" title="✨ Variable 規則 ✨"></a>✨ Variable 規則 ✨</h3><ol><li>可以由 英文、數字、底線、$ 構成</li><li>不能用數字當開頭</li><li>變數名稱不能是關鍵字 reserved words</li></ol><h2 id="🦖常量-constants"><a href="#🦖常量-constants" class="headerlink" title="🦖常量 constants"></a>🦖常量 constants</h2><p>不能改變的量，稱為常量 constants<br>在 Java 的 variable declaration (宣告) 中加入 final keyword </p><p>大家習慣在 constants 會全部大寫英文字母表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>; <span class="comment">//variable declaration</span></span><br><span class="line">        PI = <span class="number">5</span>; <span class="comment">// Error : Cannot assign a value to final variable &#x27;PI&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命名習慣</p><ol><li>ClassName : 使用駝峰命名，大寫當開頭 ( Main )</li><li>varialbe : 使用駝峰命名，小寫當開頭 ( mainPage ) </li><li>CONSTANTS : 使用_隔開，全部打寫 ( MAX_VALUE )</li></ol><h2 id="🦖Java-常見資料型態"><a href="#🦖Java-常見資料型態" class="headerlink" title="🦖Java 常見資料型態"></a>🦖Java 常見資料型態</h2><p>常見的 Data type 有 : </p><table><thead><tr><th>Data Type</th><th>discrption</th><th>note</th></tr></thead><tbody><tr><td>int</td><td>Integer 整數，用 32bits 儲存數據</td><td>通常用這個</td></tr><tr><td>long</td><td>整數，用 64bits 儲存數據</td><td>大數據用</td></tr><tr><td>double</td><td>帶有小數的數，用 64bits 儲存數據，精準度較高</td><td>通常用這個</td></tr><tr><td>float</td><td>帶有小數的數，用 32bits 儲存數據</td><td></td></tr><tr><td>char</td><td>Character 單一字母 用單引號</td><td>是 基本型別</td></tr><tr><td>String</td><td>a sequence of characters 字串 用雙引號</td><td>是 class</td></tr><tr><td>boolean</td><td>true 或 false</td><td>存進去變數</td></tr><tr><td>var</td><td>variable 的縮寫</td><td></td></tr><tr><td>+可以用在任何資料型別</td><td>不能用在fields</td><td></td></tr><tr><td>不能用在沒有初始值的變數</td><td></td><td></td></tr></tbody></table><blockquote><p>1 Byte &#x3D; 8 Bits<br>“bits” 是 “binary digits” 的縮寫是 0 or 1<br>1 bit ⇒ 0 or 1<br>2 bit ⇒ 00 or 01 or 10<br>…<br>是 2 的 31次方 ~ -2 的 31次方 -1<br>2的31次方等於 2,147,483,648(冷知識)<br>二進制的資料可以跟十進制做交換</p></blockquote><blockquote><p>每個**<code>char</code>**<br>都由一個16位元的Unicode字符表示，因此**<code>char</code>**<br>型別可以表示65536個不同的字符</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">lastName</span> <span class="operator">=</span> <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">firstName</span> <span class="operator">=</span> <span class="string">&#x27;asdfasg&#x27;</span>; <span class="comment">//error : Too many characters in character literal</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">myLastName</span> <span class="operator">=</span> <span class="string">&quot;Rose&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> x; <span class="comment">//error : Cannot infer type: &#x27;var&#x27; on variable without initializer</span></span><br><span class="line">        <span class="type">int</span> x; <span class="comment">//declare variable</span></span><br><span class="line"> <span class="type">int</span> x, y, z; <span class="comment">//允許多值宣告</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        x = <span class="number">5</span>; <span class="comment">//assignment</span></span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖Primitive-資料型態"><a href="#🦖Primitive-資料型態" class="headerlink" title="🦖Primitive 資料型態"></a>🦖Primitive 資料型態</h2><p>由 Java 預定義並保留關鍵字命名，開頭都是小寫，不能與其他 Primitive 共享狀態。</p><ul><li>byte</li><li>short</li><li>int</li><li>long</li><li>float</li><li>double</li><li>boolean</li><li>char</li></ul><p>除了以上 8 個 primitive ，其他都是 Non-primitive ( String、Array、Arraylist、Class… )</p><h2 id="🦕Scope-變數的有效範圍"><a href="#🦕Scope-變數的有效範圍" class="headerlink" title="🦕Scope 變數的有效範圍"></a>🦕Scope 變數的有效範圍</h2><p>在 Java 當中，變數的有效範圍稱為 scope<br>A Java fiels 是 a variable inside a class<br>Fields 的 scope 是整個 Class<br>每個 field 可以設定 modifier 為 public 或 private</p><p>在 method 內 declare 的 variable 只能由大括弧之間的 code 找到<br>被稱為 local veriable 局部變數、本地變數、區域變數</p><p>在 For loop 內部寫的 for (int i &#x3D; 0…)中的 i 也是一個 local variable</p><h2 id="🦖-Static-靜態屬性、方法"><a href="#🦖-Static-靜態屬性、方法" class="headerlink" title="🦖 Static 靜態屬性、方法"></a>🦖 Static 靜態屬性、方法</h2><p>在 Java 中，Static關鍵字用於內存管理</p><p>Static 共享給定 Class 所有物件共享相同的 variable、method，可以節省記憶體空間<br>可以透過 class 本身訪問 static variable 或執行 static method</p><p>顧名思義，他不是動態的，所有 Class 所有的 Object 相同，任何 Static variable 和 method 都屬於 Class 本身。</p><p>使用 Static variable 、method 時，不需要先從 Class 中 instantiate 任何 object</p><h2 id="🦖-Java-Modifiers-修飾符"><a href="#🦖-Java-Modifiers-修飾符" class="headerlink" title="🦖 Java Modifiers 修飾符"></a>🦖 Java Modifiers 修飾符</h2><p>修飾符 Modifier 提供有關 Class、variable 額外訊息，分成兩類 : </p><ol><li>訪問修飾符 access modifier | 控制訪問級別</li><li>非訪問修飾符 Non-Access Modifiers | 不控制訪問級別，提供其他功能</li></ol><h3 id="✨Class-的-modifier-有以下兩個✨"><a href="#✨Class-的-modifier-有以下兩個✨" class="headerlink" title="✨Class 的 modifier 有以下兩個✨"></a>✨Class 的 modifier 有以下兩個✨</h3><ol><li>public | 屬於 access modifier ，可以被任何 class 訪問</li><li>abstract | 屬於 Non-Access Modifiers，是一個受限的 class 不能用來創建 objcet ，目的是讓其他 class 繼承這個 class</li></ol><h3 id="✨可用於所有-method-和-variables-的修飾符✨"><a href="#✨可用於所有-method-和-variables-的修飾符✨" class="headerlink" title="✨可用於所有 method 和 variables 的修飾符✨"></a>✨可用於所有 method 和 variables 的修飾符✨</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- fields are usually <span class="keyword">private</span></span><br><span class="line">- methods are uaually <span class="keyword">public</span></span><br></pre></td></tr></table></figure><ol><li><p>public ( access modifier ) | code 隨處可 access</p></li><li><p>private ( access modifier ) | code 只能在自己的 class access</p></li><li><p>protected ( access modifier ) | code 可以在同一個 package 和 subclass 訪問</p></li><li><p>final (Non-Access Modifiers) | attributes 和 methods 不能被覆蓋&#x2F;修改</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">常跟 <span class="keyword">protected</span> <span class="keyword">final</span> 一起用 </span><br></pre></td></tr></table></figure></li><li><p>static (Non-Access Modifiers) | attributes 和 methods 屬於 class，而不是從這個 class 做 instantiation 的 object</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">I</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>abstract ( Non-Access Modifiers ) | 只能用在 abstract class 中，並且只能用在 methods 上</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"><span class="comment">//預設不知道是哪個</span></span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦕String-操作"><a href="#🦕String-操作" class="headerlink" title="🦕String 操作"></a>🦕String 操作</h2><p>有 index 的特性<br>for any String index 0, 1, 2, 3, … n-1 where n &#x3D; String.length();</p><ul><li>toLowerCase() | 轉大寫</li><li>toUpperCase() | 轉小寫</li><li>CharAt(int index) | 字串指定index上值、從0開始，超過範圍會error</li><li>indexOf() | 值在字串 index 的位置</li><li>Integer.parseInt() | 轉整數，若不行報err</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;wilson&quot;</span>; <span class="comment">//index</span></span><br><span class="line">        <span class="comment">//method</span></span><br><span class="line">        System.out.println(name.length());<span class="comment">//6</span></span><br><span class="line">        System.out.println(name.toLowerCase());<span class="comment">//wilson</span></span><br><span class="line">        System.out.println(name.toUpperCase());<span class="comment">//WILSON</span></span><br><span class="line">        <span class="comment">//String 類的方法 charAt(int index) 返回字串指定 index value</span></span><br><span class="line">        System.out.println(name.charAt(name.length()- <span class="number">1</span>));<span class="comment">//n</span></span><br><span class="line">        System.out.println(name.indexOf(<span class="string">&#x27;s&#x27;</span>));<span class="comment">//3</span></span><br><span class="line">        System.out.println(name.indexOf(<span class="string">&quot;il&quot;</span>));<span class="comment">//1 從哪裡開始找到，而且要用&quot;&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> <span class="string">&quot;25&quot;</span>;</span><br><span class="line">        System.out.println(Integer.parseInt(age));<span class="comment">//型態為 int 的 25</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="🦕-Relational-關係-amp-Conditional-條件運算子"><a href="#🦕-Relational-關係-amp-Conditional-條件運算子" class="headerlink" title="🦕 Relational 關係 &amp; Conditional 條件運算子"></a>🦕 Relational 關係 &amp; Conditional 條件運算子</h2><p>Java 當中的 Relational &amp; Conditional 運算子 operator 會根據 operands 的值 return 一個 boolean (ture、false) 的值</p><p>常見的 Relational Operator :</p><ol><li><p>&#x3D;&#x3D; 用於 primitive data type 的比較</p><p> .equals() 用於 Non-primitive data type 的比較</p><p> (單個 &#x3D; 是 assignment 賦值)</p></li><li><p>!&#x3D; </p><p> 是一個 unary operator ( 負負得正 )</p></li><li><blockquote><p>、&lt;</p></blockquote></li><li><p>&lt;&#x3D;、&gt;&#x3D;</p></li></ol><p>常見的 Conditional Operator :</p><ol><li>&amp;&amp; (and 兩個都要)</li><li>|| (or 一個就好)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Barnd02</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println((<span class="number">5</span> &gt; <span class="number">3</span>) &amp;&amp; (<span class="number">3</span> &lt; <span class="number">4</span>)); </span><br><span class="line"><span class="comment">//可多個串在一起判斷邏輯</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;wilson&quot;</span> == <span class="string">&quot;wilson&quot;</span> );<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span> (<span class="string">&quot;Wilson&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span> (<span class="string">&quot;Wilson&quot;</span>);</span><br><span class="line">        System.out.println(a == b); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Wilson&quot;</span>.equals(<span class="string">&quot;Wilson&quot;</span>));<span class="comment">//ture</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦕Object-Oriented-Programing-Encapsulation-封裝"><a href="#🦕Object-Oriented-Programing-Encapsulation-封裝" class="headerlink" title="🦕Object-Oriented-Programing : Encapsulation 封裝"></a>🦕Object-Oriented-Programing : Encapsulation 封裝</h2><p>封裝 Encapsulation 被定義為數據包成一包，將代碼 code 和操作的數據綁<br>再一起的機制。</p><p>考慮封裝的另一種方式，是一個保護屏障，可以防止數據被該屏蔽之外的 code 訪問或更動。</p><p>通常會將 attributes 盡可能設定成 private，若要從外部更改、存取則使用 setter、getter methods。</p><h3 id="✨透過-getter-跟-setter-來對物件做封裝✨"><a href="#✨透過-getter-跟-setter-來對物件做封裝✨" class="headerlink" title="✨透過 getter 跟 setter 來對物件做封裝✨"></a>✨透過 getter 跟 setter 來對物件做封裝✨</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Wilson_Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Robot</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYearName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> yearName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYearName</span><span class="params">(<span class="type">int</span> yearName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(yearName &lt; <span class="number">1990</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Year made connot be earlier than 1990.&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(yearName &gt; <span class="number">2022</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Year made not yet come.&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.yearName = yearName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> yearName;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Robot</span><span class="params">(String name, <span class="type">int</span> yearName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.yearName = yearName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter method</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦕Object-Oriented-Programing-Inheritance-繼承"><a href="#🦕Object-Oriented-Programing-Inheritance-繼承" class="headerlink" title="🦕Object-Oriented-Programing : Inheritance 繼承"></a>🦕Object-Oriented-Programing : Inheritance 繼承</h2><p>再 Java 中，可以將 attributes 和 methods 從一個 class 繼承到另一個 class，這個過程稱為 inheritance</p><p>super 繼承的物件和父類不是在同一個記憶體位置，可以用 instanceof 來查看</p><p>避免寫過多重複的程式碼</p><ol><li>subclass (子類) | 從另一個 class 繼承的 classs，也稱 child class</li><li>superclass (父類) | 繼承自 class，也稱 parent class</li></ol><p>Chid class 會比 parent class 還要有更多訊息，發現 …is a … 可以用 extends 關鍵字 來做 inheritance 繼承</p><p>Java 只能做單一繼承 single inheritance ，一個 clss 最多只能繼承一個 parent class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//People.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String name, <span class="type">int</span> age, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Walking...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sleeping...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Teacher.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String subject;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, String address, String subject)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, address);</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Teaching ...&quot;</span> + subject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;Dino&quot;</span>,<span class="number">35</span>,<span class="string">&quot;Taichang&quot;</span>,<span class="string">&quot;Math&quot;</span>);</span><br><span class="line">        teacher1.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✨super✨"><a href="#✨super✨" class="headerlink" title="✨super✨"></a>✨super✨</h3><ol><li><p>執行superclass 的 constructor |<br>如果父類 super class 有預設值 default values 那被子類別 child class 呼叫時就不會error</p></li><li><p>執行 superclass 的 method  |  </p><p> super.method 可以讓child class call super class has method (其實 this or 不寫都可以，但為了閱讀性還是要寫一下)</p></li></ol><h3 id="✨Method-Override✨"><a href="#✨Method-Override✨" class="headerlink" title="✨Method Override✨"></a>✨Method Override✨</h3><p>可以在 chlid class 複寫從 parent class 繼承過來的 method</p><p>使用時使用 @Override</p><h3 id="✨所有-Java-Class-都-inherit-from-java-lang-Object✨"><a href="#✨所有-Java-Class-都-inherit-from-java-lang-Object✨" class="headerlink" title="✨所有 Java Class 都 inherit from java.lang.Object✨"></a>✨所有 Java Class 都 inherit from java.lang.Object✨</h3><h2 id="🦕Object-Oriented-Programing-Polymorphism-多型"><a href="#🦕Object-Oriented-Programing-Polymorphism-多型" class="headerlink" title="🦕Object-Oriented-Programing : Polymorphism 多型"></a>🦕Object-Oriented-Programing : Polymorphism 多型</h2><p>Polymoropgism means that a varibale of supertype can refer to a subtype object !! </p><p>簡單來說 x is a y，就可以用 y 來 declare x 的 type</p><p>Polymoropgism 的好處在，declare 一個 parent class variable ，那 variable 可以用來裝任何 subclass object </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">People</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;123&quot;</span>, <span class="number">20</span>,<span class="string">&quot;Taichang&quot;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//array</span></span><br><span class="line">        People[] people = <span class="keyword">new</span> <span class="title class_">People</span>[<span class="number">10</span>];</span><br><span class="line">        people[<span class="number">0</span>] = s1;</span><br><span class="line">        people[<span class="number">1</span>] = s2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(people[i].name);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//arraylist</span></span><br><span class="line">        ArrayList&lt;People&gt; peoples = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        peoples.add(s1);</span><br><span class="line">        peoples.add(s2);</span><br></pre></td></tr></table></figure><p> 小知識</p><p>Polymorphism 是生物學名詞，只一種物種在同一群族存在兩種或多種明顯不同的樣態。</p><p>Polymorphism多型 本質是 Inheritance繼承 概念的延伸，舉例繼承 superclass 後使用 Override 複寫其他 method 的 childcalss 就是多型的概念。</p><h3 id="✨Dynameic-Binding-動態綁定✨"><a href="#✨Dynameic-Binding-動態綁定✨" class="headerlink" title="✨Dynameic Binding 動態綁定✨"></a>✨Dynameic Binding 動態綁定✨</h3><p>Polymorphism 當中有一個概念叫做動態綁定，Dynamic Binging，意思是只 object 在執行 methods 時，所指向的 method 是由 Java Virtual Machine 在程是執行時決定，而不是 compile 時才決定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JVM 決定</span></span><br><span class="line">        a.hello();<span class="comment">//Hello from A</span></span><br><span class="line">        b.hello();<span class="comment">//Hello from B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Override 就是 static Binding </p><p>靜態就是 Static 也是 Early Binding</p><h2 id="🦕Abstract-Class-抽象類"><a href="#🦕Abstract-Class-抽象類" class="headerlink" title="🦕Abstract Class 抽象類"></a>🦕Abstract Class 抽象類</h2><p>Abstract Class 抽象類不允許 instantiate objects </p><p>Animation是抽象的，不能實例化，貓、狗、大象就是被實例化的物件</p><p>abstract method 是一種只有 method 定義，但不包含 implementation 的 method</p><p>沒有 method 主體的 method 被稱為 abstract method</p><p>abstract method 只能存在 Abstract Class 中</p><p>Abstract Class 可以混用 abtract、non-abstract method，所有 Abstract Class 的 subclass 都必須要 override 其 abstract super class 所有 agstract method </p><p>小知識點</p><p>.Abstract Class 無法做 instantiation 不過還是做為一種 data type 用來做 Polymorphism</p><p>如果 Abstract Class 無法做 instantiation 那麼 Abstract Class 中的 constructor 目的是 ? 這是因為 constructor 可以透過 super() 被 subclass 使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Animation.java</span></span><br><span class="line"><span class="comment">//superclass 、 abstract</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animation</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String animationType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animation</span><span class="params">(String animationType)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.animationType = animationType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;This&quot;</span> + animationType + <span class="string">&quot;is sleeping&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Dog.java</span></span><br><span class="line"><span class="comment">//subclass、extends Inheritance Animation.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animation</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;break&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦕Interface-接口、端口"><a href="#🦕Interface-接口、端口" class="headerlink" title="🦕Interface 接口、端口"></a>🦕Interface 接口、端口</h2><p>在 Java 做 Abstract Class 另一種方法是使用 Interface。</p><p>Interface  是 complete abstract class ，內部 method 都是 abstract methods。</p><p>重點特性有 : </p><ol><li>Interface 內部所有 method default is abstract method 所以不需要再宣告 abstract</li><li>Interface 不能創建 object </li><li>implement Interface時，必須 Override 所有 methods </li><li>Interface 所有 properties default is public、static、final</li><li>一個class 可以 implement 超過一個 Interface</li><li>如果有個 class implement 了一個 interface，該 class all object is Interface a object</li><li>Interface 不包含 constructor</li><li>Java 不支援 multiple inheritacne ，一個 class 可以 implement 多個 interface </li><li>Interface 不能做 instantiation，不過還是可以作為一種data type 用來做 polymorphism</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Edible.java</span></span><br><span class="line"><span class="keyword">package</span> Wilson_Class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Edible</span> &#123;</span><br><span class="line">String <span class="title function_">howToEat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Chicken.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chicken</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Edible</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="string">&quot;Chicken&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cluck&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">howToEat</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Boiled chicken is bad&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Edible</span> <span class="variable">chicken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chicken</span>();</span><br><span class="line">System.out.println(chicken.howToEat());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="✨Keylistener-amp-Mouselistener✨"><a href="#✨Keylistener-amp-Mouselistener✨" class="headerlink" title="✨Keylistener &amp; Mouselistener✨"></a>✨Keylistener &amp; Mouselistener✨</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">addKeyListener(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">requestFocusInWindow();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">JFrame</span> <span class="variable">window</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">window.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">window.setContentPane(<span class="keyword">new</span> <span class="title class_">Main</span>());</span><br><span class="line">window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">window.setVisible(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">System.out.println(e.getKeyCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> <span class="keyword">implements</span> <span class="title class_">MouseListener</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">addMouseListener(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">requestFocusInWindow();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">JFrame</span> <span class="variable">window</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">window.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">window.setContentPane(<span class="keyword">new</span> <span class="title class_">Main</span>());</span><br><span class="line">window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">window.setVisible(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">System.out.println(e.getX());</span><br><span class="line">System.out.println(e.getY());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseEntered</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseExited</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦕Arithmetic-運算子"><a href="#🦕Arithmetic-運算子" class="headerlink" title="🦕Arithmetic 運算子"></a>🦕Arithmetic 運算子</h2><p>Java 中的 Arithmetic Operator 最主要拿來做數字運算，常見有 :</p><ol><li><p>number + number ⇒ addition 數字加法</p><p> (double、float、int、short、long)</p></li><li><p>string + string ⇒ concatenation 串接</p></li><li><p>number + string ⇒ concatenation 串接</p></li><li><p>Number * number ⇒ multiplication 乘法</p></li><li><p>Number * string ⇒ not valid</p></li><li><p>int &#x2F; int ⇒ integer result </p></li><li><p>float &#x2F; int ⇒ floating result</p></li></ol><aside>💡 JavaScript 會自動轉型 aka 隱式類型轉換Implicit Type ConversionJava 顯式類型轉換 Explicit Type Conversion</aside><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">15</span>+<span class="number">15</span>); <span class="comment">//30</span></span><br><span class="line">        System.out.println(<span class="string">&quot;15&quot;</span>+<span class="string">&quot;15&quot;</span>); <span class="comment">//&quot;1515&quot;</span></span><br><span class="line">        System.out.println(<span class="number">15</span> + <span class="string">&quot;15&quot;</span>); <span class="comment">//&quot;1515&quot;</span></span><br><span class="line">        System.out.println((<span class="number">15</span> + <span class="string">&quot;15&quot;</span>).getClass().getName()); <span class="comment">//java.lang.String</span></span><br><span class="line">        System.out.println(<span class="number">15</span> + <span class="number">15</span> + <span class="string">&quot;15&quot;</span> + <span class="number">15</span> + <span class="number">15</span> ); <span class="comment">//&quot;30151515&quot;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span> * <span class="number">10</span> ); <span class="comment">//err : bad operand</span></span><br><span class="line">        System.out.println(<span class="number">9</span>/<span class="number">10</span>); <span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="number">9.0</span>/<span class="number">10</span>); <span class="comment">//0.9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java if statement 語句是最簡單的決策區塊，true執行、flase就不執行</p><p> 練習題1 : 行為能力人年紀判斷</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> -<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">if</span> ( age &lt; <span class="number">14</span> &amp;&amp; age &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你屬於無行為能力人&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( age &gt;= <span class="number">14</span> &amp;&amp; age &lt; <span class="number">18</span> || age &gt;= <span class="number">80</span> ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你屬於限制行為能力人&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你屬於完全行為能力人&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 練習題2 : BMI 判斷</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BmiCount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DecimalFormat</span> <span class="variable">DF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入你的體重(公斤):&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入你的身高(公分):&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">height</span> <span class="operator">=</span> scanner.nextDouble() / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">bmi</span> <span class="operator">=</span> Double.parseDouble(DF.format(weight / ( height * height)));</span><br><span class="line">        System.out.println(<span class="string">&quot;您的BMI數值為&quot;</span> + bmi);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bmi &lt; <span class="number">18.5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;過輕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bmi &lt; <span class="number">24</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bmi &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;微胖&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;過胖&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 練習題3 : 彈跳視窗輸入值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vaccine</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">vaccines</span> <span class="operator">=</span> JOptionPane.showInputDialog(<span class="string">&quot;請輸入疫苗名稱(選像包含AZ、Moderna、Janssen):&quot;</span>);</span><br><span class="line">        vaccines = vaccines.toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vaccines.equals(<span class="string">&quot;az&quot;</span>)) &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>,<span class="string">&quot;AZ\n研發國:英國、瑞典\n疫苗類型:常病毒疫苗\n劑量:2\n保護力:80%&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vaccines.equals(<span class="string">&quot;moderna&quot;</span>)) &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>,<span class="string">&quot;Moderna\n研發國:瑞典\n疫苗類型:常病毒疫苗\n劑量:2\n保護力:60%&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vaccines.equals(<span class="string">&quot;janssen&quot;</span>)) &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>,<span class="string">&quot;Janssen\n研發國:英國\n疫苗類型:常病毒疫苗\n劑量:2\n保護力:50%&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            JOptionPane.showMessageDialog(<span class="literal">null</span>,<span class="string">&quot;錯誤&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦕Switch-Statement"><a href="#🦕Switch-Statement" class="headerlink" title="🦕Switch Statement"></a>🦕Switch Statement</h2><p>可以把 if-else statnment 用 switch statement 替換，限制 : </p><ol><li>只能用來比較一個 variable</li><li>只能用 &#x3D;&#x3D;、其餘&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;不支援</li><li>只能用在 int、chars、Strings、enums</li><li>&amp;&amp; 不支援、 || 可以</li><li>break 可以來中斷</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sheep.java</span></span><br><span class="line"><span class="keyword">package</span> Wilson_Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sheep</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Sheep</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.x = x;</span><br><span class="line"><span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.x + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawsheep</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">g.setColor(Color.WHITE);</span><br><span class="line">g.fillOval(x+<span class="number">23</span>, y+<span class="number">50</span>,<span class="number">225</span>, <span class="number">100</span>);</span><br><span class="line">g.fillOval(x, y, <span class="number">75</span> , <span class="number">75</span>);</span><br><span class="line">g.fillRect(x+<span class="number">50</span>, y+<span class="number">100</span>,<span class="number">25</span>,<span class="number">100</span>);</span><br><span class="line">g.fillRect(x+<span class="number">100</span>, y+<span class="number">100</span>,<span class="number">25</span>,<span class="number">100</span>);</span><br><span class="line">g.fillRect(x+<span class="number">150</span>, y+<span class="number">100</span>,<span class="number">25</span>,<span class="number">100</span>);</span><br><span class="line">g.fillRect(x+<span class="number">200</span>, y+<span class="number">100</span>,<span class="number">25</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.x += x;</span><br><span class="line"><span class="built_in">this</span>.y += y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">package</span> Wilson_Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span> &#123;</span><br><span class="line">Sheep s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">s = <span class="keyword">new</span> <span class="title class_">Sheep</span>(<span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">addKeyListener(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">g.setColor(Color.BLACK);</span><br><span class="line">g.fillRect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">s.drawsheep(g);</span><br><span class="line">requestFocusInWindow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">JFrame</span> <span class="variable">window</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">window.setContentPane(<span class="keyword">new</span> <span class="title class_">Main</span>());</span><br><span class="line">window.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">window.setVisible(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line"><span class="keyword">switch</span> (k) &#123;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_UP:</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_W:</span><br><span class="line">s.walk(<span class="number">0</span>, -<span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_DOWN:</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_S:</span><br><span class="line">s.walk(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_RIGHT:</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_D:</span><br><span class="line">s.walk(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_LEFT:</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_A:</span><br><span class="line">s.walk(-<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">JOptionPane.showMessageDialog(<span class="built_in">this</span>, <span class="string">&quot;不是可以移動的按鍵&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">repaint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖陣列Array"><a href="#🦖陣列Array" class="headerlink" title="🦖陣列Array"></a>🦖陣列Array</h2><p>Array 在個變量中儲存多個值，而不是每個值 declare 單獨變量。<br>declare 一個 Array 用 方括弧 [] 定義</p><p> Array 在電腦記憶體位置</p><p>[Ljava.lang.String;@776ec8df</p><p>是一個 16進制 hexadecimal 的數包含 0-9、A-F<br>其中 A代表10，B代表11，C代表12，D代表13，E代表14，F代表15</p><p>因此16進制中 0x2A1D 可以轉乘十進制計算，2<em>16的3次方 + A</em>16的2次方 + 1<em>16的1次方 + D</em>16的0次方 &#x3D; 10813</p><p>練習 1 Array</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">firend1</span> <span class="operator">=</span> <span class="string">&quot;Mike&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">firend2</span> <span class="operator">=</span> <span class="string">&quot;Grace&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">firend3</span> <span class="operator">=</span> <span class="string">&quot;Lise&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//array of string (index rules)</span></span><br><span class="line"> <span class="comment">//single vlues hava one ram adress</span></span><br><span class="line"> <span class="comment">//RAM (Ramdom Acccess Memory)</span></span><br><span class="line">        String[] friends = &#123;<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Grace&quot;</span>, <span class="string">&quot;Lise&quot;</span>&#125;;</span><br><span class="line">        System.out.println(friends[<span class="number">0</span>]); <span class="comment">//Mike</span></span><br><span class="line">        System.out.println(friends[friends.length - <span class="number">1</span>]); <span class="comment">//Lise</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//創立一個空的 array 裡面最多只能裝 5 個 values</span></span><br><span class="line">        String[] friends2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">        friends2[<span class="number">0</span>] = <span class="string">&quot;Mike&quot;</span>;</span><br><span class="line">        friends2[<span class="number">1</span>] = <span class="string">&quot;Grace&quot;</span>;</span><br><span class="line">        System.out.println(friends2[<span class="number">0</span>]); <span class="comment">//Mike</span></span><br><span class="line">        System.out.println(friends2[<span class="number">1</span>]); <span class="comment">//Grace</span></span><br><span class="line">        System.out.println(friends2[<span class="number">2</span>]); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"> String[] friends3 = &#123;<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Grace&quot;</span>, <span class="string">&quot;Lise&quot;</span>&#125;;</span><br><span class="line">        System.out.println(friends3);</span><br><span class="line">        <span class="comment">//[Ljava.lang.String;@776ec8df</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖-動態陣列Arraylist"><a href="#🦖-動態陣列Arraylist" class="headerlink" title="🦖 動態陣列Arraylist"></a>🦖 動態陣列Arraylist</h2><p>ArraryList 是可調整大小的 Array，可以在 java.util.ArrayList 中找到</p><p>語句為</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>規則是參數首字大寫</p><p>練習 1 Array List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] friends = &#123;<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Grace&quot;</span>, <span class="string">&quot;Lise&quot;</span>&#125;;</span><br><span class="line">        String[] firends2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">        friends[<span class="number">1</span>] = <span class="string">&quot;Eil&quot;</span>;</span><br><span class="line">        friends[<span class="number">3</span>] = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">        <span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="comment">//超過界線</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以無限量加 String 進去</span></span><br><span class="line">        ArrayList&lt;String&gt; firend3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        firend3.add(<span class="string">&quot;Mike&quot;</span>);</span><br><span class="line">        firend3.add(<span class="string">&quot;Grace&quot;</span>);</span><br><span class="line">        System.out.println(firend3.size()); <span class="comment">//2</span></span><br><span class="line">        System.out.println(firend3.get(<span class="number">1</span>)); <span class="comment">//Grace</span></span><br><span class="line">        Collections.sort(firend3);</span><br><span class="line">        System.out.printf(<span class="string">&quot;firend3&quot;</span>);</span><br><span class="line">        <span class="comment">//add()、size()、get()、clear()、Collection.sort(array)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>二維陣列被稱為 矩陣 matix 2D Array</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 創造一個 2D 的 Array</span></span><br><span class="line">        <span class="comment">// 陣列有 4 個元素，每個元素是一個一維整數陣列</span></span><br><span class="line">        <span class="comment">// 每個一維陣列中有 3 個整數元素</span></span><br><span class="line">        <span class="type">int</span>[][] my2Darray = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">        my2Darray[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        my2Darray[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">        System.out.println(my2Darray.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for loop 會重複執行某一部分，通常用在已知迴圈使用次數</p><p>while 根據 boolean 判斷，通常不知道</p><p>loop for &amp; while 範例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    String[] friend = &#123; <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; friend.length; i++) &#123;</span><br><span class="line">            System.out.println(friend[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= friend.length -<span class="number">1</span> ; i++) &#123;</span><br><span class="line">            System.out.println(friend[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : friend) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello&quot;</span> + i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上都可以混著做好幾層的巢狀loop  aka. Nested Loop (通常不超過3層)</p><p>有執行順序</p><p>nested loop 範例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">3</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                System.out.println( i + <span class="string">&#x27;,&#x27;</span>+ j );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>break、continue ⇒ loop 使用的關鍵字</p><p>break、continue 範例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 0 1 2 3 4 </span></span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// i == 5 時會從頭開始</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;這裡&quot;</span>); <span class="comment">//5 後面不會接&quot;這裡&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>練習 終極密碼</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//指定數字區間，亂數取整數</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">secret</span> <span class="operator">=</span> r.nextInt(max-min) + min;</span><br><span class="line">        System.out.println(<span class="string">&quot;The secret Number is&quot;</span> + secret );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Make a guess (between &quot;</span> + min + <span class="string">&quot; and &quot;</span> + max + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">guess</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//檢查機制</span></span><br><span class="line">            <span class="keyword">if</span> (guess &lt; min || guess &gt; max) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;please make a valid guess&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (guess == secret) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;You win !! Thne secret is &quot;</span> + secret);</span><br><span class="line">                <span class="comment">//中斷程式碼</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; secret) &#123;</span><br><span class="line">                min = guess;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                max = guess;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖使用者圖形介面-GUI-Swing"><a href="#🦖使用者圖形介面-GUI-Swing" class="headerlink" title="🦖使用者圖形介面 GUI | Swing"></a>🦖使用者圖形介面 GUI | Swing</h2><p>Swing 是一個用於 Java 的 GUI Graphical User Interface 的 API 小部件工具，</p><p>Javax Swing 一個 windows視窗叫做 JFrame ⇒ 內容叫做Jpanel</p><p>x,y (0, 0) 從左上開始</p><p>JFrame lab</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Frame_Test</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//java calls the pointComponent method when it needs to.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> getWidth();</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> getHeight();</span><br><span class="line">        g.setColor(Color.orange);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="type">ImageIcon</span> <span class="variable">img</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;we.jpg&quot;</span>);</span><br><span class="line">        img.paintIcon(<span class="literal">null</span>,g,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        g.setColor(Color.blue);</span><br><span class="line">        g.drawString(<span class="string">&quot;Hello World ! &quot;</span>,<span class="number">100</span> , <span class="number">100</span>);</span><br><span class="line">        g.drawLine(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.drawRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line">        g.drawOval(<span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">window</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        window.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        window.setContentPane(<span class="keyword">new</span> <span class="title class_">Frame_Test</span>());</span><br><span class="line">        window.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖Java-Method-函數"><a href="#🦖Java-Method-函數" class="headerlink" title="🦖Java Method 函數"></a>🦖Java Method 函數</h2><p>Method 是一段 code，只有在被調用時才會執行，將參數 parameter 傳遞給 method</p><p>一段 method 的 declaration 宣告 分成 :</p><ol><li><p>修飾符 modifier</p><p> public、private …</p></li><li><p>返回類型 return type</p><p> void不會返回、int、Sring、number、bit  …</p></li><li><p>名稱 name</p></li><li><p>參數列表 formal parameter or parameter list</p></li></ol><blockquote><p>定義 methods 時使用 formal parameter ，執行 methods 使用 actual parmaeter</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//return type is void (no return)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//parameter list 參數陣列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="comment">//formal parameter</span></span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        System.out.println(m.multiply(<span class="number">5</span>, <span class="number">4</span>)); <span class="comment">// actual parameter</span></span><br><span class="line">        <span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖Return-Value-返回值"><a href="#🦖Return-Value-返回值" class="headerlink" title="🦖Return Value 返回值"></a>🦖Return Value 返回值</h2><p>Java return 關鍵字<br>退出 method 並指示 Java 繼續執行主程式</p><p>return 會將 method 的 value 發送回主程序，返回值可以是 void、String、int、double、reference、data type(Non-primitive)</p><ol><li>return 在 for loop 會終止之後的 Code</li><li>return 可以打斷一整個 nested for loop，break 不行</li><li>一個 method 只能 return 一個值</li></ol><p>loop return 範例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( i == <span class="number">5</span>) &#123; <span class="comment">//5 中斷</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        m.testing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖Method-Overloading-方法多載"><a href="#🦖Method-Overloading-方法多載" class="headerlink" title="🦖Method Overloading 方法多載"></a>🦖Method Overloading 方法多載</h2><p>一個 Method 的簽名 signature 是指 method 的 name + parameter type and order 決定 method 的唯一性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addition</span> <span class="params">( <span class="type">int</span> a, <span class="type">int</span> b )</span></span><br><span class="line"><span class="comment">//name 變數  + formal parameter 參數 = signatureM</span></span><br></pre></td></tr></table></figure><p>Method Overloading 當我們有多個具有相同名稱，但參數不同的 method 時，就是在使用 method oberloading </p><p>Java 在執行時就可以根據這個 signature 機制判斷你要執行誰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addition</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addition</span> <span class="params">( String a, String b)</span> &#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        m.addition(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;yo&quot;</span>); <span class="comment">//actual parameter</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖copy-by-values"><a href="#🦖copy-by-values" class="headerlink" title="🦖copy by values"></a>🦖copy by values</h2><p>在不同記憶體位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wison_01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chengeA</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        x = <span class="number">20</span>; <span class="comment">//新的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// reference data type (nan-primitive data type)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 佔一個記憶體位置</span></span><br><span class="line">        chengeA(a); <span class="comment">//</span></span><br><span class="line">        System.out.println(a); <span class="comment">//10 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java&#x27;s primitive data type is used as an actual parameter</span></span><br><span class="line">        <span class="comment">//Java copy by values</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🦖copy-by-referance"><a href="#🦖copy-by-referance" class="headerlink" title="🦖copy by referance"></a>🦖copy by referance</h2><p>共用記憶體位置</p><p>會發生在非基本型別、primitive 跟 method’s actual parameter 身上<br>因為非基本型別檔案比較大，所以通常 Java 預設都會用 reference<br>在做物件導向設計時會很好用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] myArray1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        <span class="comment">// copy by reference</span></span><br><span class="line">        <span class="comment">// 會發生在不是基本型別 primitive 身上</span></span><br><span class="line">        <span class="comment">// 因為他們的檔案比較大，所以 Java 預設會用 reference</span></span><br><span class="line">        <span class="type">int</span>[] myArray2 = myArray1;</span><br><span class="line">        myArray1[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : myArray1) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : myArray2) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="comment">//Non-primitive data type</span></span><br><span class="line">    <span class="comment">//method&#x27;s actual parameter</span></span><br><span class="line">    <span class="comment">//Java -&gt; copy by reference</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cahangeFirstElement</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] myArray1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        cahangeFirstElement(myArray1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : myArray1) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="🦖Common-Execptions"><a href="#🦖Common-Execptions" class="headerlink" title="🦖Common Execptions"></a>🦖Common Execptions</h2><h3 id="✨Keylistener-amp-Mouselistener✨-1"><a href="#✨Keylistener-amp-Mouselistener✨-1" class="headerlink" title="✨Keylistener &amp; Mouselistener✨"></a>✨Keylistener &amp; Mouselistener✨</h3><p>NullPointerException 是指訪問尚未 instantiation 的 object 上 fileds 或 invoke method 會發生的錯誤</p><h3 id="✨Common-Exceptions✨"><a href="#✨Common-Exceptions✨" class="headerlink" title="✨Common Exceptions✨"></a>✨Common Exceptions✨</h3><p>ConcurrentModification Error 當一個Object同時修改的錯誤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">20</span>; i ++) &#123;</span><br><span class="line">arr.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k : arr) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">10</span>) &#123;</span><br><span class="line">arr.remove(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//會跳錯</span></span><br><span class="line"><span class="comment">//Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span></span><br></pre></td></tr></table></figure><p>改寫成就不會跑rror</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">20</span>; i ++) &#123;</span><br><span class="line">arr.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">somethingToRemove</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k : arr) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">10</span>) &#123;</span><br><span class="line">somethingToRemove = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr.remove(somethingToRemove);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Garbage-Collection-in-JVM"><a href="#Garbage-Collection-in-JVM" class="headerlink" title="Garbage Collection in JVM"></a>Garbage Collection in JVM</h3><p>當一個 program 導致內存不可訪問時，內存”洩漏”出可控制的池 (範圍)</p><p>對小程式而言，不處理沒差，大程式會有效能影響。</p><p>例如 Web 伺服器，每天有數萬、數十請求，幾周後可能有千萬的 objcet 在 RAM 中，沒有任何用處，只會占用記憶體。</p><p>在 JVM 下載時就會內建 gc : 全名 Garbage Collertor 垃圾搜集器的程式會檢查 objects 是否有沒有指向他的 reference </p><ol><li>Memory leaks 發生在我們不需要使用 object 實例化時 previously instantiated</li><li>In C++, 不去管他會越來越嚴重</li><li>Java gc 會自動清除許久沒用的 object</li></ol><h2 id="JDK-相關技術"><a href="#JDK-相關技術" class="headerlink" title="JDK 相關技術"></a><strong>JDK 相關技術</strong></h2><ul><li><strong>JDK</strong> (Java Development Kit): Java 開發工具包</li><li><strong>JRE</strong> (Java SE Runtime Environment): Java 執行環境</li><li><strong>JVM</strong> (Java Virtual Machine): Java 虛擬機</li></ul><h2 id="Web-開發相關技術"><a href="#Web-開發相關技術" class="headerlink" title="Web 開發相關技術"></a><strong>Web 開發相關技術</strong></h2><ul><li><strong>Servlet</strong>: Java 伺服器程式</li><li><strong>JSP</strong> (JavaServer Pages): Java 伺服器頁面</li><li><strong>Tomcat</strong>: Java Web 應用伺服器</li></ul><h2 id="數據庫相關技術"><a href="#數據庫相關技術" class="headerlink" title="數據庫相關技術"></a>數據庫相關技術</h2><ul><li><strong>JDBC</strong> (Java Database Connectivity): Java 數據庫連接</li><li><strong>JPA</strong> (Java Persistence API): Java 持久化 API</li><li><strong>Hibernate</strong>: Java ORM 框架</li></ul><h2 id="其他常用技術"><a href="#其他常用技術" class="headerlink" title="其他常用技術"></a>其他常用技術</h2><ul><li><strong>API</strong> (Application Programming Interface): 應用程式接口</li><li><strong>IDE</strong> (Integrated Development Environment): 集合開發環境</li><li><strong>JUnit</strong>: Java 單元測試框架</li><li><strong>Maven</strong>: Java 項目管理工具</li><li><strong>Gradle</strong>: Java 項目建構工具</li><li><strong>Spring</strong>: Java 應用程式框架</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;環境建置&quot;&gt;&lt;a href=&quot;#環境建置&quot; class=&quot;headerlink&quot; title=&quot;環境建置&quot;&gt;&lt;/a&gt;環境建置&lt;/h3&gt;&lt;p&gt;利用 cmd 檢查&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="java" scheme="https://22aliang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java 基礎筆記_1</title>
    <link href="https://22aliang.github.io/2024/05/13/java%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98_1/"/>
    <id>https://22aliang.github.io/2024/05/13/java%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98_1/</id>
    <published>2024-05-13T12:47:10.047Z</published>
    <updated>2024-05-13T12:54:05.269Z</updated>
    
    <content type="html"><![CDATA[<h3 id="歷史"><a href="#歷史" class="headerlink" title="歷史"></a>歷史</h3><p><strong>J2SE 則是平台名稱，包含了 JDK 與 Java 程式語言</strong></p><p>1990年被 昇陽 Sun MicroSystems 由 James Gosling 在1994年 寫出，2009年被 Oracle 收購，目前有三個版本</p><p>Java 語言只是 Java SE 的一部分</p><span id="more"></span><ol><li><p>Java EE ( 企業版 ) Java Platform, Enterprise Edition、Jakarta EE</p></li><li><p>Java SE ( 標準版 ) Java Platform, Standard Edition</p><ul><li><p><strong>JDK</strong> (Java SE Development Kit): 開發程式 javac、jaba…</p></li><li><p><strong>JRE</strong> (Java SE Runtime Environment): 執行環境</p></li><li><p><strong>JVM</strong> (Java Virtual Machine): 虛擬機</p><p>  Java SE 17 規範在 <a href="https://openjdk.org/projects/jdk/17/spec/">JSR 392</a> 文件中 <a href="https://jcp.org/en/jsr/detail?id=392">文件</a></p><p>  Java 8 ~ Java SE 17 之前的 Oracle 須付費</p></li></ul></li><li><p><del>Java ME ( 微型版 )</del>  幾乎沒人在用</p></li></ol><p>Oracle JDK &amp; Open JDK 是兩個不同的 JDK，Open 是開源ㄉ、安全ㄉ</p><p>現有 JDK 選擇很多，確認來源信任、授權、提供服務、支援時程等問題 !  </p><p>JDK包含 javac、javadoc 等工具程式</p><p>前面提到授權問題，就企業而言，LTS( long trem support ) 版本有 Java SE 8、11、17<br>Java 8 2014年很久惹，建議使用 Java SE 11 以後的 LTS 版本 </p><p>p.s Java SE 17 開始，LTS釋出速度加快為2年一次</p><h2 id="JVM-Java-Virtual-Machine-虛擬機"><a href="#JVM-Java-Virtual-Machine-虛擬機" class="headerlink" title="JVM Java Virtual Machine 虛擬機"></a>JVM Java Virtual Machine 虛擬機</h2><p>會架構在 Linux 、Windows、iOS 等作業系統上</p><p>對電腦而言，只認識 0 1 ，Java是高階語言，需要被 編譯器 compiler 翻譯<br>不過 Java 會先被翻譯成中介格式 位元碼 Byte code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.java =&gt; *.class =&gt; JVM =&gt; compiler <span class="type">Byte</span> <span class="variable">code</span> <span class="operator">=</span>&gt; <span class="number">0</span> <span class="number">1</span> </span><br></pre></td></tr></table></figure><p> JVM 就是 Java 的作業系統，JVM 可執行檔就是 *.class</p><h2 id="Java-Runtime-Environment-執行環境-JRE-amp-JDK"><a href="#Java-Runtime-Environment-執行環境-JRE-amp-JDK" class="headerlink" title="Java Runtime Environment 執行環境 JRE  &amp;  JDK"></a>Java Runtime Environment 執行環境 JR<strong>E  &amp;  JDK</strong></h2><p>  Java Runtime Environment 就是 Java 執行環境，包括 Java SE API  與 JVM ，只要使用 Java SE API 的程式庫，就可以在安裝有 JRE 的電腦上執行</p><p>JDK Java Development Kit 包括了 Java 程式語言、工具程式、JRE，<br>JRE 包括了 Java SE API  、 JVM </p><h3 id="JDK-安裝內容"><a href="#JDK-安裝內容" class="headerlink" title="JDK 安裝內容"></a>JDK 安裝內容</h3><p>Java SE API 編譯好的 .class 檔案，為了改進效能、安全性，使用模組執行時期映像 Modular Run-Time Images 又稱 JIMAGE ( lib 中 modules 檔案 ) 包含 .class 執行時其格式</p><p>在編譯時期，引入新的 JMOD 格式來封裝模組，副檔名為 .jmod  ( JDK 資料夾中的 jomds )</p><p>.jir File</p><p>在過去，JAR（Java Archive）檔案是封裝 .java 或 .class 檔案的主要格式，有許多開發工具，都能自動建立 JAR 檔案，而在文字模式下，可以使用 JDK 的 <code>jar</code> 工具程式來製作 JAR 檔案。</p><p>JMOD 格式可以包含比 JAR 檔案更多的資訊，像是原生指令、程式庫等，JDK 包含了 <code>jmod</code> 工具程式，可以用來建立 JMOD 檔案，或者從 JMOD 檔案取得封裝的內容（目前實際上只是 zip 壓縮，然而未來可能改變）。</p><p>定義類別  Class</p><p>class 是定義類別的關鍵字，接上類別名稱，一個 .java 檔案可以定義數個類別 class ，但能有一個公開類別 publice </p><p>Java 規定，程式碼 code 要寫在 類別 class 中<br>一個 .java 檔案可以定義數個類別 class 但只能有一個公開類別 public<br>檔案主檔名 &#x3D; public class name<br>大小寫嚴格區分</p><p>定義區塊 Block</p><p>程式中使用大括號 { } 定義區塊，區塊包含方法 method </p><p>定義方法 method 、 main( ) 方法</p><p>程式執行的起點就是進入點 Entry point，Java 的程式進入點是 main () method<br>且必須一定是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span></span><br><span class="line"><span class="comment">// main() 是 public 的成員，可以被 JVM 公開執行</span></span><br><span class="line"><span class="comment">// static 表示 JVM 不用生成實例就可以呼叫</span></span><br><span class="line"><span class="comment">// static 定義共用屬性共用記憶體位置，會串接</span></span><br><span class="line"><span class="comment">// void 是錯誤可以用例外方式處理，因此 main() 不用 return values</span></span><br><span class="line"><span class="comment">// (String[] args) 執行程式時，取得使用者指定命令列引數#  </span></span><br></pre></td></tr></table></figure><p>撰寫陳述句 Statement</p><p>白話文說就是程式語言中的一句話</p><p>陳述句就是程式語言中的一行指令，用分號 ; 結束</p><p>環境變數 PATH</p><p> Java 的編譯器工具是 javac</p><p> 放在安裝 java 的 C 槽的 jdk-17\bin\javac</p><table><thead><tr><th>作業系統</th><th>搜尋路徑</th><th>可執行檔</th></tr></thead><tbody><tr><td>Windows</td><td>PATH</td><td>.exe、.bat</td></tr><tr><td>JVM</td><td>CLASSPATH</td><td>.class</td></tr></tbody></table><p><code>PATH</code> 與 <code>CLASSPATH</code>是不同層次的環境變數</p><p>允許多人共用的系統中，系統環境變數的設定會套用置登入的使用者</p><p>Path 變數是逐行往下找</p><p>在安裝多個 JDK、JRE 電腦中，知道執行哪版本是確認 PATH 順序的動作</p><p>JVM ( java ) 與 classpath</p><p>在使用 javac 編譯器時，若要使用到其他類別程式酷時，也必須指定 classpath</p><p>Java 編譯 .java  變成 .class 檔案的過程</p><ul><li><p>可以在終端機使用</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">javac FileName.java -verbose</span><br><span class="line">[parsing started SimpleFileObject[C:\Users\lisa5\Desktop\Hello.java]]</span><br><span class="line">[parsing completed 11ms]</span><br><span class="line">[loading /modules/jdk.security.auth/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.localedata/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.internal.ed/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.dynalink/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.management.rmi/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.javadoc/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jdeps/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.security.jgss/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jsobject/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.nio.mapmode/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.xml/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.naming/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.internal.vm.compiler.management/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.sctp/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.compiler/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.naming.dns/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.management/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.se/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jdwp.agent/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.attach/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.base/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.charsets/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.prefs/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.incubator.foreign/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.smartcardio/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.datatransfer/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.management/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.sql/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.transaction.xa/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.net/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.accessibility/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.management.agent/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.xml.crypto/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jdi/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.naming.rmi/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.instrument/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.zipfs/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jconsole/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.security.jgss/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.crypto.ec/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.desktop/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jpackage/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.editpad/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.incubator.vector/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jfr/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.sql.rowset/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.unsupported/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jcmd/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.net.http/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.security.sasl/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.rmi/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.unsupported.desktop/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jshell/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jstatd/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.compiler/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.logging/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.xml.dom/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.internal.vm.ci/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.hotspot.agent/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.internal.jvmstat/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/java.scripting/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.management.jfr/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.internal.vm.compiler/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jartool/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.random/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.internal.le/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.crypto.mscapi/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.crypto.cryptoki/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.internal.opt/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.jlink/<span class="keyword">module</span>-info.class]</span><br><span class="line">[loading /modules/jdk.httpserver/<span class="keyword">module</span>-info.class]</span><br><span class="line">[search path <span class="keyword">for</span> source files: .]</span><br><span class="line">[search path <span class="keyword">for</span> <span class="keyword">class</span> <span class="title class_">files</span>: C:\Program Files\Java\jdk-<span class="number">17</span>\lib\modules,.]</span><br><span class="line">[loading /modules/java.base/java/lang/Object.class]</span><br><span class="line">[loading /modules/java.base/java/lang/String.class]</span><br><span class="line">[loading /modules/java.base/java/lang/Deprecated.class]</span><br><span class="line">[loading /modules/java.base/java/lang/annotation/Retention.class]</span><br><span class="line">[loading /modules/java.base/java/lang/annotation/RetentionPolicy.class]</span><br><span class="line">[loading /modules/java.base/java/lang/annotation/Target.class]</span><br><span class="line">[loading /modules/java.base/java/lang/annotation/ElementType.class]</span><br><span class="line">[checking Hello]</span><br><span class="line">[loading /modules/java.base/java/io/Serializable.class]</span><br><span class="line">[loading /modules/java.base/java/lang/AutoCloseable.class]</span><br><span class="line">[loading /modules/java.base/java/lang/System.class]</span><br><span class="line">[loading /modules/java.base/java/io/PrintStream.class]</span><br><span class="line">[loading /modules/java.base/java/lang/Appendable.class]</span><br><span class="line">[loading /modules/java.base/java/io/Closeable.class]</span><br><span class="line">[loading /modules/java.base/java/io/FilterOutputStream.class]</span><br><span class="line">[loading /modules/java.base/java/io/OutputStream.class]</span><br><span class="line">[loading /modules/java.base/java/io/Flushable.class]</span><br><span class="line">[loading /modules/java.base/java/lang/Comparable.class]</span><br><span class="line">[loading /modules/java.base/java/lang/CharSequence.class]</span><br><span class="line">[loading /modules/java.base/java/lang/constant/Constable.class]</span><br><span class="line">[loading /modules/java.base/java/lang/constant/ConstantDesc.class]</span><br><span class="line">[wrote Hello.class]</span><br><span class="line">[total 147ms]</span><br></pre></td></tr></table></figure></li></ul><h2 id="管理原始碼與位元碼檔案"><a href="#管理原始碼與位元碼檔案" class="headerlink" title="管理原始碼與位元碼檔案"></a>管理原始碼與位元碼檔案</h2><p> 編譯器 javac 與 sourcepath </p><p>為了管理開發程式時的 .java 跟 即時編譯的 .class 檔案，所以會新增 src 資料夾，</p><p>預設的路徑再 lib\modu les</p><p>使用 package 管理類別</p><p>package 就是幫類別用資料夾分門別類</p><p>一個程式會有多個類別彼此合作，也可能是團隊多人合作時會有相同的 class 類別，這時候就可以用 package 防止彼此覆蓋的問題</p><p>套件的命名通常會用組織或單位的網址反過來命名 ( tw.com.google.http ) </p><p>使用 package 分類會有四種管理室的意義 </p><ol><li>原始碼要放在在 package 定義名稱階層相同的資料夾</li><li>package 定義名稱 與 class 定義名稱相同， 結合類別完全吻合名稱 Fully qualified name </li><li>位元碼要放在在 package 定義名稱階層相同的資料夾</li><li>要在套件中用過的 類別 或 方法 Method 必須宣告為 public ( 牽涉到權限管理 )</li></ol><p>原始碼檔案與套件管理 </p><p>所有的原始碼都會放在 src 資料夾底下</p><h3 id="Fully-qualified-name-完全吻合名稱"><a href="#Fully-qualified-name-完全吻合名稱" class="headerlink" title="Fully qualified name 完全吻合名稱"></a>Fully qualified name 完全吻合名稱</h3><p>假設 Main 類別位於 cc.openhome 套件中，那完全吻合名稱就是 : <strong>cc.openhome.Main</strong></p><p><strong>相同套件要使用類別使用 class 定義的名稱即可，若不同套件則要用完全吻合名稱來呼叫</strong> </p><p>這可以用 import  來偷懶 ( 如果不能偷懶就要回歸最原始的方法 ) </p><p>在程式碼開頭會用 impprt，來把要引入的類別先用 import + Fully qualified name 這樣下面在寫程式的時候就可以直接呼叫別的 package 中的 class</p><p>最偷懶的可以用 .* ( 呼叫全部的意思 )</p><p>如果 import 跟原本的 Java SE  API 方法有衝突的話，就需要寫出完全吻合的名稱來呼叫</p><p>java.lang.system 在預設就被 import 因此使用不用 import </p><h3 id="位元碼-與-原始碼"><a href="#位元碼-與-原始碼" class="headerlink" title="位元碼 與 原始碼"></a>位元碼 與 原始碼</h3><p>原始碼是我們撰寫的 code 預計放在 src 資料夾底下，副檔名是 .java</p><p>位元碼是 JVM 要編譯的 code 會放在 classes 資料夾底下，副檔名是 .class</p><h2 id="Java-模組平台系統"><a href="#Java-模組平台系統" class="headerlink" title="Java 模組平台系統"></a>Java 模組平台系統</h2><p>Java SE 9 以後最大特性就是 模組平台系統</p><h3 id="JVM-與-module-path"><a href="#JVM-與-module-path" class="headerlink" title="JVM 與 module-path"></a>JVM 與 module-path</h3><p><strong>模組平台系統 跟 Java 程式語言本身沒有關係</strong> </p><p>模組 lab : 在 src 底下的資料夾建立 <a href="http://module-info.java/">module-info.java</a> </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span> cc.<span class="property">ophome</span> &#123;&#125; </span><br></pre></td></tr></table></figure><p>這樣在原始碼層面上就建立模組惹，實際上只是設定檔，不是 Java 程式語言的一部分。</p><p>之後會用 <strong>模組描述檔 Module descriptor</strong>  來代稱 <a href="http://module-info.java/">module-info.java</a> 、module-info.class</p><p>基於資料夾父子層關係，在類別路徑下發現的類別 ( cc.ophome ) 會被歸類在<br><strong>未具名模組 Unnamed module</strong> 相容性來說，他可以存取其他模組。</p><p>在模組路徑下面找到的類別叫做</p><p><strong>具名模組 Named module</strong> </p><p>上面有很多方法已經會被 IDE 給代勞了。</p><h2 id="基礎語法"><a href="#基礎語法" class="headerlink" title="基礎語法"></a>基礎語法</h2><h3 id="型態"><a href="#型態" class="headerlink" title="型態"></a>型態</h3><p>Java 分成兩大型態</p><ol><li>基本型態 Primitive type <ol><li><p>整數 </p><ol><li>short 佔 2 byte </li><li>int 佔 4 byte </li><li>long 佔 8byte</li></ol></li><li><p>位元組</p><p> 長度就是一個位元組，需要逐位元組處理資料 ( 影像、編碼）會使用 byte 型態<br> 若用於表達整數是 btye -127 ~ 128 的整數</p></li><li><p>浮數點</p><ol><li>float 浮數點 4 byte </li><li>double 浮數點 8 byte</li></ol></li><li><p>字元</p><p> Java 支援 uniqlo，char 佔 2 byte 可以用來儲存 UTF-16 Big Endian 的一個碼元 code unit </p></li><li><p>布林 boolean </p><ol><li>可以表示 true 跟 flase</li></ol></li></ol></li><li>類別型態 Class type ( 參考型態 Reference type )</li></ol><p>每種型態佔有的記憶體長度不同，可儲存的數值範圍也不同，儲存超過型態範圍稱為 溢值 overflow</p><h3 id="常用格式控制符號"><a href="#常用格式控制符號" class="headerlink" title="常用格式控制符號"></a>常用格式控制符號</h3><table><thead><tr><th>符號</th><th>說明</th></tr></thead><tbody><tr><td>%%</td><td>% 為控制符號的前置</td></tr><tr><td>%d</td><td>10 進位整數格式輸出</td></tr><tr><td>%f</td><td>10 進位浮數點輸出</td></tr><tr><td>%e、%E</td><td>科學記號浮數點</td></tr><tr><td>%s、%S</td><td>字串格式符號</td></tr><tr><td>%c、%C</td><td>字元格式符號</td></tr><tr><td>%b、%B</td><td>布林格式符號</td></tr><tr><td>%n</td><td>換行符號</td></tr><tr><td>window 是 \r\n</td><td></td></tr><tr><td>mac 是 \n</td><td></td></tr></tbody></table><p>printf ( ) 方法第二個引述會依序置換格式控制符號</p><h3 id="變數-Variable"><a href="#變數-Variable" class="headerlink" title="變數 Variable"></a>變數 Variable</h3><p>用 byte、int、long、float、double、cher、boolean 等關鍵字來宣告</p><p>規則有 :</p><ol><li>不可用數字、特殊字元當開頭</li><li>不可以跟關鍵字 Keyword 、保留字 Reversed word 重複</li><li>變數命名 Naming conbention 採小駝峰 Caml case</li></ol><p>在方法內宣告的變數叫做 區域變數 Local Varibalbe ，JVM 會為區域變數配置記憶體空間，但裡面如果沒有賦予值將會編譯錯誤。</p><p><strong>final</strong> 可以鎖定變數，後面修改就會導致編譯錯誤 </p><h3 id="字面常量-Literal-constant"><a href="#字面常量-Literal-constant" class="headerlink" title="字面常量 Literal constant"></a>字面常量 Literal constant</h3><p>在 Java 寫下一個值 被稱稱為 字面常量 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">12</span>; <span class="comment">// 10進位表示</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">0xC</span>; <span class="comment">// 16進位表示，以 0x 開頭</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number3</span> <span class="operator">=</span> <span class="number">014</span>; <span class="comment">// 8進位表示，以 0 開頭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下 2 個都表示浮數點</span></span><br><span class="line"><span class="type">double</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">0.00123</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">1.12e-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字串要用 &#x27; &#x27; 包起來</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用底線更清楚表達二進制，且結果不影響</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0b1010101010</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0b1010_1010_1010</span>; </span><br></pre></td></tr></table></figure><h3 id="常用忽略-Escape-符號"><a href="#常用忽略-Escape-符號" class="headerlink" title="常用忽略 Escape 符號 \"></a>常用忽略 Escape 符號 \</h3><p>編譯器看到 \ 就會忽略下個字元</p><table><thead><tr><th>忽略符號</th><th>說明</th></tr></thead><tbody><tr><td>\</td><td>反斜號</td></tr><tr><td>\ ‘</td><td>單引號 ‘</td></tr><tr><td>\uxxxx</td><td>16 進位 char 的值 x 是數字</td></tr><tr><td>\xxx</td><td>8 進位 char 的值 x 是數字</td></tr><tr><td>\b</td><td>倒退一個字元</td></tr><tr><td>\f</td><td>換頁</td></tr><tr><td>\n</td><td>換行</td></tr><tr><td>\r</td><td>游標移至字首</td></tr><tr><td>\t</td><td>跳格 ( 按下 tab 的換行 )</td></tr></tbody></table><h2 id="運算子-Operator"><a href="#運算子-Operator" class="headerlink" title="運算子  Operator"></a>運算子  Operator</h2><h3 id="算術運算"><a href="#算術運算" class="headerlink" title="算術運算"></a>算術運算</h3><p>加減乘除 +、-、*、&#x2F;、% ( 餘數)</p><h3 id="比較、條件運算-Comparison-operator"><a href="#比較、條件運算-Comparison-operator" class="headerlink" title="比較、條件運算 Comparison operator"></a>比較、條件運算 Comparison operator</h3><p>大於&gt;、不小於&gt;&#x3D;、小於&lt;、不大於&lt;&#x3D;、等於&#x3D;&#x3D;、不等於 !&#x3D;<br>比較成立為 true 不成立為 flase</p><blockquote><p>一個等於是賦予值、兩個等於是比較</p></blockquote><h3 id="條件運算子-Conditional-operator-三元運算子"><a href="#條件運算子-Conditional-operator-三元運算子" class="headerlink" title="條件運算子  Conditional operator ( 三元運算子 )"></a>條件運算子  Conditional operator ( 三元運算子 )</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">條件式 ? 成立回傳值 : 失敗回傳值</span><br></pre></td></tr></table></figure><h3 id="邏輯運算"><a href="#邏輯運算" class="headerlink" title="邏輯運算"></a>邏輯運算</h3><p>且 AND &amp;&amp; 、或 OR ||、不 NOT ! </p><p>其中 &amp;&amp;、 || 有  捷徑運算 Short-Circuit Evaluation 的特性</p><p>OR  ||　只要其中一個為真就是 true</p><p>AND &amp;&amp; 只要其中一個為假就是 flase </p><h3 id="位元運算"><a href="#位元運算" class="headerlink" title="位元運算"></a>位元運算</h3><p>總之我應該不常用，通常應用在影像、文字編碼等 …</p><p>在程式中變數遞增或遞減 1 是常見的運算</p><p> ++ 或 – 但 這個寫在變數的 前面 或 後面  會影響結果，通常都會加在變數後面。</p><h3 id="指定運算"><a href="#指定運算" class="headerlink" title="指定運算"></a>指定運算</h3><p>通常會先運算在賦值</p><p>+&#x3D;、-&#x3D;、*&#x3D; ….</p><h2 id="掌握型態"><a href="#掌握型態" class="headerlink" title="掌握型態"></a>掌握型態</h2><h3 id="宣告時-的-型態轉換"><a href="#宣告時-的-型態轉換" class="headerlink" title="宣告時 的 型態轉換"></a>宣告時 的 型態轉換</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>; <span class="comment">// OK</span></span><br><span class="line"><span class="type">float</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span> <span class="comment">// Error 因為預設浮數點是 double </span></span><br></pre></td></tr></table></figure><p>所以我們可以用 丟 Cast 讓編譯器住嘴</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14F</span>;</span><br></pre></td></tr></table></figure><p>但要注意的是，你叫他閉嘴那在執行就有可能會出錯 XD </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">214748648</span>; <span class="comment">//Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//就算寫成</span></span><br><span class="line"><span class="type">long</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">2148648</span>; <span class="comment">//Error</span></span><br><span class="line"><span class="type">long</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">2148648L</span>; <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>並非裝不裝得下的問題，而是程式寫下整數時，預設不會使用超過 Int 型態的長度。<br>這時候就需要 + L 告訴他要這麼大。</p><h3 id="運算式-的-型態轉換"><a href="#運算式-的-型態轉換" class="headerlink" title="運算式 的 型態轉換"></a>運算式 的 型態轉換</h3><p>若運算式包含不同的型態數值，運算時會以長度最長的型態為主，其他數值會自同提升 ( Promote ) 型態</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">duoble</span> <span class="variable">b</span> <span class="operator">=</span> a * <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>若 運算元 都是不大於 int 的整數，自動全部提升為 int 型態進行運算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="variable">c</span> <span class="operator">=</span> a + b; <span class="comment">// Error</span></span><br><span class="line"><span class="type">short</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">short</span>) ( a + b ) <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">System.out.println( <span class="number">10</span> / <span class="number">3</span> ); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 因為 10 跟 3 會在 int 做運算</span></span><br><span class="line"></span><br><span class="line">System.out.println( <span class="number">10.0</span> / <span class="number">3</span> ); <span class="comment">// 3.33333</span></span><br></pre></td></tr></table></figure><h3 id="var-型態推斷"><a href="#var-型態推斷" class="headerlink" title="var 型態推斷"></a>var 型態推斷</h3><p>若編譯器可以透過前後文推斷出 <strong>區域變數</strong> 可以用 <strong>var</strong> 宣告變數，就不用明確指定變數型態</p><p>善用 var 可以加強程式碼的可讀性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">upper</span> <span class="operator">=</span> <span class="number">100000L</span>;</span><br><span class="line"><span class="type">var</span> <span class="variable">tau</span> <span class="operator">=</span> <span class="number">3.141509F</span>;</span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if-…-else-條件式"><a href="#if-…-else-條件式" class="headerlink" title="if … else 條件式"></a>if … else 條件式</h3><p>如果 OOOO 成立就要，否則就 .. ，條件為 true 會執行 if 的 { 與 } 陳述句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 條件式 ) &#123;</span><br><span class="line">陳述句 ;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">陳述句 ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 實際上不存在 if … else if … 的 語法 其實只是省略了 if … else …. if …. else 的寫法而成</p><h3 id="switch-條件式"><a href="#switch-條件式" class="headerlink" title="switch 條件式"></a>switch 條件式</h3><p>用於比對整數、字元、字串、Enum</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">swtich ( 變數貨運算式 )  &#123;</span><br><span class="line"><span class="keyword">case</span> 整數、字元、字串、Enum;</span><br><span class="line">陳述句;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">default</span>;</span><br><span class="line">陳述句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 他可以這樣寫</span></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>( quotient ) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>;</span><br><span class="line">level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>;</span><br><span class="line">level = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>;</span><br><span class="line">level = <span class="string">&#x27;E&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以這樣寫</span></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>( quotient) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>,<span class="number">9</span> -&gt; <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span> -&gt; <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span> -&gt; <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line"><span class="keyword">default</span> -&gt; <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-迴圈"><a href="#for-迴圈" class="headerlink" title="for 迴圈"></a>for 迴圈</h3><p>重複性指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( 初始式; 結果為 <span class="type">boolean</span> 的重複式; 重複式 ) &#123;</span><br><span class="line">陳述句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt;= <span class="number">10</span> ; i++ ) &#123;</span><br><span class="line">System.out.println(i); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>經典九九乘法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="type">var</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span> ; j &lt; <span class="number">10</span>; j++ ) &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; <span class="number">10</span>; j++ ) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot; %d * %d = %2d &quot;</span> , i , j , i * j );</span><br><span class="line">&#125;</span><br><span class="line">System.out.println ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while-迴圈"><a href="#while-迴圈" class="headerlink" title="while 迴圈"></a>while 迴圈</h3><p>指定條件式判斷是否執行迴圈本體</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( 條件式 ) &#123;</span><br><span class="line">陳述句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-…-while-迴圈"><a href="#do-…-while-迴圈" class="headerlink" title="do … while 迴圈"></a>do … while 迴圈</h3><p>先執行一些動作在判斷要不要重複</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">陳述句;</span><br><span class="line">&#125; <span class="keyword">while</span> ( 條件式 );</span><br><span class="line"><span class="comment">// 最後 while 要用分號結束 ; </span></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">number</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">number = ( <span class="type">int</span> ) ( Math.random() * <span class="number">10</span> );</span><br><span class="line">&#125; <span class="keyword">while</span> ( number != <span class="number">5</span> ) &#123;</span><br><span class="line">System.out.priintln (<span class="string">&quot;I hit 5...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break、continue"><a href="#break、continue" class="headerlink" title="break、continue"></a>break、continue</h3><p>break 可以離開 switch 、 for 、 while 、 do … while 的區塊</p><p>continue 是會略過</p><h2 id="認識物件"><a href="#認識物件" class="headerlink" title="認識物件"></a>認識物件</h2><p>撰寫 Java 幾乎都在使用 <strong>物件 Object</strong> ，要產生物件前要先定義 <strong>類別 class</strong> </p><p><strong>類別</strong> 是 <strong>物件</strong> 的設計圖、物件是類別的<strong>實例 Instance</strong></p><h3 id="定義類別-class"><a href="#定義類別-class" class="headerlink" title="定義類別 class"></a>定義類別 class</h3><p>定義衣服類別 用 class 關鍵字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clothes</span> &#123;</span><br><span class="line">String color;</span><br><span class="line">Char size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立衣服實例 使用 new 關鍵字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Clothes</span> ();</span><br></pre></td></tr></table></figure><p>若要有個名稱可以這樣宣告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Clothes c1;</span><br></pre></td></tr></table></figure><p> 在 Java 術語中這叫做，參考名稱 Reference name、參考變數 Reference variable 或 參考 Reference </p><p>c1 的本質是變數，若要將 c1 綁到建立的實例，是用 &#x3D; 指定，叫做 參考 refer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Clothes</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cothes</span> ();</span><br></pre></td></tr></table></figure><blockquote><p>物件 object 跟 實例 Instance 在 Java 是等義的名詞</p></blockquote><p>若想要在建立物件時一併進行某個初始流程，可以定義建構式 Constructor，是與類別名稱同名的方法 method </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Clotthes2 ( String color, <span class="type">char</span> size ) &#123;</span><br><span class="line"><span class="built_in">this</span>.color = color;</span><br><span class="line"><span class="built_in">this</span>.size = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可以直接寫 color = colro ;</span></span><br></pre></td></tr></table></figure><h2 id="使用標準類別"><a href="#使用標準類別" class="headerlink" title="使用標準類別"></a>使用標準類別</h2><h3 id="java-nutil-Scanner"><a href="#java-nutil-Scanner" class="headerlink" title="java.nutil.Scanner"></a>java.nutil.Scanner</h3><p>JavaSE 提供了標準 API ，遊許多類別組成。</p><p>Scanner.nextInt() 會抓取輸入的下一個整數。</p><h3 id="java-math-BigDecimal"><a href="#java-math-BigDecimal" class="headerlink" title="java.math.BigDecimal"></a>java.math.BigDecimal</h3><p>如果要求精確度，舊要咬心使用浮點數，而且別用 &#x3D;&#x3D; 比較浮點數</p><h3 id="物件指定與相等性"><a href="#物件指定與相等性" class="headerlink" title="物件指定與相等性"></a>物件指定與相等性</h3><p>&#x3D; 用於基本型態是，將值複製給變數。 &#x3D;&#x3D; 用於基本型態是 比較兩個變數儲存值是否相同。</p><p>&#x3D; 用於 物件 是 將名稱參考至物件。 &#x3D;&#x3D; 用於 物件 是 比較兩個名牌是否綁定到同一物件。</p><h2 id="基本型態包裹器"><a href="#基本型態包裹器" class="headerlink" title="基本型態包裹器"></a>基本型態包裹器</h2><p>因為 Java 有基本型態跟類別型態，兩者又會彼此轉換的需求，就可以透過自動裝箱 Autoboxing 包裹實例，也可用自動拆箱 ( Unboxing ) 與基本型態組合運算。</p><h3 id="包裹基本型態-Warp"><a href="#包裹基本型態-Warp" class="headerlink" title="包裹基本型態 Warp"></a>包裹基本型態 Warp</h3><p>Integer.valueOf() 可以用來包裹運算</p><h2 id="自動裝箱、拆箱"><a href="#自動裝箱、拆箱" class="headerlink" title="自動裝箱、拆箱"></a>自動裝箱、拆箱</h2><p>是編譯器的蜜糖 Complier sugar </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">3.14f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.14f 會先被自動裝箱為 Float 然後指定給 number</span></span><br><span class="line"></span><br><span class="line"><span class="type">Interger</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 自動裝箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">foo</span> <span class="operator">=</span> wrapper; <span class="comment">// 自動拆箱</span></span><br></pre></td></tr></table></figure><h2 id="不使用-x3D-x3D-、-x3D-比較-物件-object-要用-equals"><a href="#不使用-x3D-x3D-、-x3D-比較-物件-object-要用-equals" class="headerlink" title="不使用 &#x3D;&#x3D;、!&#x3D; 比較 物件 object 要用 equals()"></a>不使用 &#x3D;&#x3D;、!&#x3D; 比較 物件 object 要用 equals()</h2><h2 id="陣列物件"><a href="#陣列物件" class="headerlink" title="陣列物件"></a>陣列物件</h2><p>陣列在 Java 就是物件 object </p><h3 id="陣列基礎"><a href="#陣列基礎" class="headerlink" title="陣列基礎"></a>陣列基礎</h3><p>陣列是具有索引 index 的資料結構</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] scores = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>用 int[] 宣告會在記憶體分配 5 個連續空間儲存值，並索引從 0 開始數。<br>如果存取超出索引範圍會拋出 ArrayIndexOutOfBoundsRxception 的錯誤</p><p>[ ] 建議放在關鍵字之後</p><h3 id="增強式-for-迴圈-Enhanced-for-loop"><a href="#增強式-for-迴圈-Enhanced-for-loop" class="headerlink" title="增強式 for 迴圈 Enhanced for loop"></a>增強式 for 迴圈 Enhanced for loop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> score: scors ) &#123;</span><br><span class="line">sout(<span class="string">&quot;學生分數: %d %n&quot;</span> , score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二維陣列"><a href="#二維陣列" class="headerlink" title="二維陣列"></a>二維陣列</h3><p>一維陣列使用一個索引存取陣列元素、二維陣列使用兩個索引存取陣列元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] cords = &#123; <span class="comment">//宣告二維陣列初始值</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="type">var</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; cords.length; x++) &#123;</span><br><span class="line"><span class="keyword">for</span>( <span class="type">var</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span> ; y &lt; cords[x].length; y++ ) &#123;</span><br><span class="line">sout(cord[x][y])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 2 3 </span></span><br><span class="line"><span class="comment">// 4 5 6 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] row : cords ) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> value : row ) &#123;</span><br><span class="line">soutf(value)</span><br><span class="line">&#125;</span><br><span class="line">soutln()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由於有兩個維度，必須先透過 cords.length 得知有幾列 Row，在利用 cordspx[x].length 得知每列有幾個元素</p><p>二維陣列也可以是不規則陣列</p><h2 id="操作陣列物件"><a href="#操作陣列物件" class="headerlink" title="操作陣列物件"></a>操作陣列物件</h2><p>事先不知道元素值，只知道元素個數，可以 new 關鍵字指定長度來建立陣列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] scores = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>陣列元素的初始值</p><table><thead><tr><th>資料型態</th><th>初始值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>float</td><td>0.0F</td></tr><tr><td>doutble</td><td>0.0D</td></tr><tr><td>char</td><td>‘\u000’</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>類別</td><td>null</td></tr></tbody></table><p>Java 的多維陣列是由一維陣列所組成</p><h3 id="陣列複製"><a href="#陣列複製" class="headerlink" title="陣列複製"></a>陣列複製</h3><p>System.arraycopy () 方法會使用原生方式複製原素，比自行使用迴圈快</p><p>Arrays.copyOf() 不用令行建立新陣列</p><p>陣列一但建立，長度就固定了</p><h3 id="淺層複製-Shallow-copy"><a href="#淺層複製-Shallow-copy" class="headerlink" title="淺層複製 Shallow copy"></a>淺層複製 Shallow copy</h3><p>無論是 System.array.copy ( ) 或 Arrays.copyOf ( ) 用在類別型態宣告的陣列都是淺層複製</p><p>就是把所引來參考，而沒有複製，也叫做 複製參考。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c1.length; i++) &#123;</span><br><span class="line">c2[i] = c1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深層複製-Deep-copy"><a href="#深層複製-Deep-copy" class="headerlink" title="深層複製 Deep copy"></a>深層複製 Deep copy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; c1.lengt; i++) &#123;</span><br><span class="line">c2[i] = <span class="keyword">new</span> <span class="title class_">Clothes2</span>(c1[i].color, c1[i].size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字串物件"><a href="#字串物件" class="headerlink" title="字串物件"></a>字串物件</h2><h3 id="字串基礎"><a href="#字串基礎" class="headerlink" title="字串基礎"></a>字串基礎</h3><p>字串代表一組字元 是 java.lang.String 類別的實例</p><h3 id="字串特性"><a href="#字串特性" class="headerlink" title="字串特性"></a>字串特性</h3><ul><li>字串常量 與 字串池</li><li>不可變動 immutable 字串</li></ul><p>Java 為了效率考量，以 “ “ 包括的字串，內容相同，JVM 就只會建立一個 String 實例在 字串池 String pool 中維護。</p><p>用 “ “ 寫下的字串稱為 : 字串常量 String Literal 如果用 &#x3D;&#x3D; 比較就會以記憶體位置來比較，所以切記要用 equals() 來比較 “內容” </p><h3 id="不可變動字串"><a href="#不可變動字串" class="headerlink" title="不可變動字串"></a>不可變動字串</h3><p>字串物件一但建立，就無法變更任何內容，沒有任何方法可以更動字串內容</p><p>使用 + 串接字元會產生新的 String 實例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; <span class="number">101</span>; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( i != <span class="number">100</span> ) &#123;</span><br><span class="line">sout(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">100</span>; i++ ) &#123;</span><br><span class="line">soutf(<span class="string">&quot;%d+&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">soutln(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">text = text + i + <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">stouln ( text + <span class="number">100</span> )</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">oneTo100</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>() &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">ontTo100.append(i).append(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">soutln(oneTo100.append(<span class="number">100</span>).toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字區塊"><a href="#文字區塊" class="headerlink" title="文字區塊"></a>文字區塊</h3><p>文字區塊用 “”” 當開頭跟結尾，空白預設會被忽略，可以用 \s 來達成跳行。</p><h2 id="原始檔編碼"><a href="#原始檔編碼" class="headerlink" title="原始檔編碼"></a>原始檔編碼</h2><p>你寫的 .java 原始碼檔案室甚麼編碼 ? </p><p>UTF-8</p><h3 id="Unicode-與-UTF"><a href="#Unicode-與-UTF" class="headerlink" title="Unicode 與 UTF"></a>Unicode 與 UTF</h3><p>字元集是一組符號的集合，字元編碼是字元實際儲存時的位元組格式。</p><p>每個字元會有編碼做為 碼點 Code Ponit 實際儲存字元時 UCS-2 會以兩個位元組為一個碼元 Code unit 也就是管理為元組的單位。</p><p>UTF-8 儲存字元時使用位元祖的數量</p><p>簡單來說 : Unicode 對字元給予編號以便進行管理，真正要儲存字元時，可以採用 UTF-8、UTF-16 等編碼為位元組</p><h3 id="char-與-String"><a href="#char-與-String" class="headerlink" title="char 與 String"></a>char 與 String</h3><p>4-48</p><h3 id="查詢-Java-API-文件"><a href="#查詢-Java-API-文件" class="headerlink" title="查詢 Java API 文件"></a>查詢 Java API 文件</h3><p>4-55 練習</p><h2 id="物件封裝-Encapsulation"><a href="#物件封裝-Encapsulation" class="headerlink" title="物件封裝 Encapsulation"></a>物件封裝 Encapsulation</h2><h3 id="封裝物件初始流程"><a href="#封裝物件初始流程" class="headerlink" title="封裝物件初始流程"></a>封裝物件初始流程</h3><p>先使用 class 關鍵字進行定義</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">card1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CashCard</span>();</span><br><span class="line">card1.number = <span class="string">&quot;A01&quot;</span>;</span><br><span class="line">card2.balance = <span class="number">500</span>;</span><br><span class="line">bard1.bonus = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>若要存取物件的資料成員，透過「. 」運算子加上資料成員名稱。建構式 Constructor 改進這個問題</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CashCard</span> &#123;</span><br><span class="line">String number;</span><br><span class="line"><span class="type">int</span> balance;</span><br><span class="line"><span class="type">int</span> bouns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CashCrad( String number, <span class="type">int</span> balacne , <span class="type">int</span> bouns) &#123;</span><br><span class="line"><span class="built_in">this</span>.number = number;</span><br><span class="line"><span class="built_in">this</span>.balance = balance;</span><br><span class="line"><span class="built_in">this</span>.bouns = bouns;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建構式 是與 類別名稱同名的 <strong>方法 Method ，</strong>不用宣告傳回型態，在物件資料成員前加 this 關鍵字，指定給這個物件 this </p><p>那麼你封裝了什麼 ? 你用了建構式，實現物件初始化流程的封裝。</p><blockquote><p><strong>物件導向或設計上</strong></p></blockquote><p>CashCard 建立 3 個物件，方法 Method</p><blockquote><p><strong>Java 命名慣例中 方法名稱首字是小寫</strong></p></blockquote><p>隱藏物件細節是封裝的目的之一，另一目的是公開使用者感興趣的資訊。</p><h3 id="封裝物件內部資料"><a href="#封裝物件內部資料" class="headerlink" title="封裝物件內部資料"></a>封裝物件內部資料</h3><p> 建構式 Constructor ，不想讓使用者直接存取 number、balacne、bouns，所以用 private 宣告。( 直接存取會噴錯 )</p><p>限制使用者只能用擬提共的取值方法 ( Getter ) 取值</p><blockquote><p><strong>Java 命名規範 取值方法名稱以 get 開頭之後接上首字大寫的單字。</strong></p></blockquote><p>( 通常 IDE 也會代勞 )</p><p><strong>封裝了類別的私有資料，讓使用者無法直接存取，必須透過你提供的操作方法，經過定義的流程來存取私有資料。</strong> </p><p>事實上，使用者也無從知道有哪些私有資料，不會知道物件的內部細節。</p><p>private 可以用在方法或建構式的宣告上，通常是類別內部某個共用的演算流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CashCard</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String number;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> balalance;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> bouns;</span><br><span class="line">...略;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">store</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(money &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.balance += money;</span><br><span class="line"><span class="keyword">if</span>(money &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.balance++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">soutln(<span class="string">&quot;除值是負的 ? 你是來亂的嗎 ?&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> balacne;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getBouns</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bonus;</span><br><span class="line">&#125;</span><br><span class="line">String <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="類別語法細節"><a href="#類別語法細節" class="headerlink" title="類別語法細節"></a>類別語法細節</h2><h3 id="public-權限修飾"><a href="#public-權限修飾" class="headerlink" title="public 權限修飾"></a>public 權限修飾</h3><p><strong>沒有宣告權限修飾的成員，只有在相同套件的類別程式碼中，才可以直接存取，也就是「套件範圍權限」。</strong> </p><blockquote><p>SE 導入了模組系統，其他模組存取的套件，必須在模組描述檔宣告，否則就算是 public 的類別或方法等，其他地方也無法存取。</p></blockquote><h3 id="關於建構式"><a href="#關於建構式" class="headerlink" title="關於建構式"></a>關於建構式</h3><p>建構式或是類別名稱同名，無須宣告傳回型態的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> String text;</span><br><span class="line">Some(<span class="type">int</span> a, String text) &#123;</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line"><span class="built_in">this</span>.text = text;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下建立 Some 實例，成員 a 與 text  會初始兩次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">some</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Some</span>(<span class="number">10</span>, <span class="string">&quot;some text&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用 new 建構 Some 物件時，a 與 text 會先初始為 10 與 null   </p><p>建構物件時，資料成員就會初始化，如果沒有指定初始值，會使用愈預設值初始化，預設值如下表。</p><table><thead><tr><th>資料型態</th><th>初始值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>float</td><td>0.0F</td></tr><tr><td>double</td><td>0.0D</td></tr><tr><td>char</td><td>‘\u000’</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>類別</td><td>null</td></tr></tbody></table><p>如果定義類別時，沒有撰寫任何建構式，編譯器會自動加入一個無參數、內容為空的建構式，稱為 <strong>預設建構式 Deagult constructor</strong>，在沒有撰寫任何建構式時，就可以使用無引數方式呼叫建構式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">some</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Some</span>();</span><br></pre></td></tr></table></figure><blockquote><p>無參數的建構式 Nullary 建構式<br>****編譯器自動加入的建構式，才被稱為預設建構式</p></blockquote><h3 id="建構式與方法重載-Overload"><a href="#建構式與方法重載-Overload" class="headerlink" title="建構式與方法重載 Overload"></a>建構式與方法重載 Overload</h3><p>你可以定義多個建構式，只要參數型態或個數不同，這稱為重載 Overload 建構式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;n.a.&quot;</span> ;</span><br><span class="line"></span><br><span class="line">Some (<span class="type">int</span> a ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( a &gt; <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Some ( <span class="type">int</span> a, String text ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( a &gt; <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( text != <span class="literal">null</span> ) &#123;</span><br><span class="line"><span class="built_in">this</span>.text = text;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定義方法時，也可以進行重載，編譯時期會根據參數型態或個數，決定要呼叫的對應方法。</p><p>以 String 類別為例，valueOf ( ) 方法就提供了很多版本。</p><blockquote><p>返回值不能作為方法重載依據，會噴錯</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="title function_">some</span> <span class="params">( <span class="type">int</span> i )</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="title function_">some</span> <span class="params">( <span class="type">int</span> i )</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方法重載時要注意自動裝箱、拆箱的問題。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">some</span> <span class="params">( <span class="type">int</span> i )</span> &#123;</span><br><span class="line">soutln ( <span class="string">&quot;int 呼叫&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">some</span> <span class="params">(Integer integer )</span> &#123;</span><br><span class="line">soutln ( <span class="string">&quot;Integer 版本被呼叫&quot;</span> )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverloadBoxing</span> &#123;</span><br><span class="line"><span class="keyword">public</span> staic <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Some</span>();</span><br><span class="line">s.some(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果版本被呼叫，呼叫參數 Integer 版本的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.some ( Integer.valueOf (<span class="number">1</span>) );</span><br></pre></td></tr></table></figure><p>編譯器在處理重載方法時，順序處理 : </p><ol><li>沒有裝箱前可符合引數與型態的方法。</li><li>裝箱動作後可符合引數個數與型態的方法</li><li>嘗試有不定長度引數，並符合引述型態的方法。</li><li>找不到合適的方法，編譯錯誤</li></ol><h2 id="使用-this"><a href="#使用-this" class="headerlink" title="使用 this"></a>使用 this</h2><p>除了被宣告 static 的地方外， this 關鍵字可以出現在類別中的任意區塊。代表「這個物件」的參考名稱，建構式參數與物件參數同名時可以用 this 加以區別。</p><blockquote><p>重複的程式碼在程式設計中是 <strong>不好的味道 Bad Small</strong></p></blockquote><blockquote><p><strong>this( )  呼叫只能在建構式的第一行</strong></p></blockquote><p>在建構之後，呼叫之前，如果有想要執行的流程，可以使用 { } 定義</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">sout( <span class="string">&quot;物件初始區塊&quot;</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Other () &#123;</span><br><span class="line">soutln ( <span class="string">&quot; Other () 建構式 &quot;</span> )</span><br><span class="line">&#125;</span><br><span class="line">Other (<span class="type">int</span> o ) &#123;</span><br><span class="line">soutln ( <span class="string">&quot; Ohter ( int o ) 建構式 &quot;</span> )</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Other</span> (<span class="number">1</span>); <span class="comment">// 就算只呼叫有 int 數字的 建構式 也會連帶呼叫上面的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">物件初始區塊</span><br><span class="line">Other () 建構式</span><br><span class="line">Ohter ( <span class="type">int</span> <span class="number">1</span> ) 建構式</span><br></pre></td></tr></table></figure><p>物件資料成員也可以宣告 final </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> x ; <span class="comment">//Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面範例會噴錯是因為 : 這樣表示延遲物件成員值的指定，在建構式執行流程中，一定要指定值的動作，否則編譯錯誤。</p><p>可以修改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">some</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">some() &#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">some(<span class="type">int</span> x) &#123;</span><br><span class="line"><span class="built_in">this</span>.x = x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="static-類別成員"><a href="#static-類別成員" class="headerlink" title="static 類別成員"></a>static 類別成員</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 這樣寫如果建立 Ball 實例都會有自己的 radius 跟 PI </span></span><br></pre></td></tr></table></figure><p>但圓周率是固定的，我們可以把它變成類別</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line">doubble radius;</span><br><span class="line"><span class="keyword">static</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>被宣告為 static 的成員，不會讓個別實例擁有，而是屬於類別。 被宣告為 static 的成員</strong></p><p><strong>是將類別名稱作為名稱空間，可以如下取值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soutln (Ball.PI)</span><br></pre></td></tr></table></figure><p>雖然可以透過參考名稱來存取 static 成員，但 <strong>非常不建議如此撰寫</strong></p><p>Java 類別命名實例的範例來說，首字是大寫，以 static 來說是以類別名稱 . 運算子來取值。</p><p>由於 static 成員屬於類別  : </p><p><strong>在 static 方法或區塊不能出現 this 關鍵字</strong> </p><p><strong>staitc  方法中不能用非 static 資料成員</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">r</span> <span class="operator">=</span> <span class="built_in">this</span>.radius; <span class="comment">// Error </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">r</span> <span class="operator">=</span> radius; <span class="comment">// Erroe </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有些程式碼，想要在位元碼載入後執行，可以定義 static 區塊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">soutln ( <span class="string">&quot;位元碼載入後就會被執行&quot;</span> )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，Ball.java 載入 JVM 後，預設會執行 static 區塊</p><p>靜態成員可以透過 import static 語法來匯入，可以少打幾個字，並且增加可讀性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.in;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImportStatic</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Import <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">console</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in);</span><br><span class="line">out.print(<span class="string">&quot; 請輸入姓名 &quot;</span>);</span><br><span class="line">out.printf(<span class="string">&quot; %S 你好! %n &quot;</span>, console.nextLine());</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本瀏覽看到 in 跟 out 並不知道是什麼，但前面 import 先跟他說了。</p><p>前提是不要偷懶過頭，不要發生名稱衝突，基本上在解析名稱順序為 </p><ol><li>區域變數覆蓋 : 選用方法中的同名變數、參數方法名稱</li><li>成員覆蓋 : 選用類別中定義的資料成員、方法名稱</li><li>重載方法比對 : 使用 import static 各個靜態成員，若有同名衝突，嘗試透用重載判斷。</li><li>無法編譯，錯誤。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Arrays.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> cc.openhome.Until.*;</span><br><span class="line"></span><br><span class="line">publci <span class="keyword">static</span> Main &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">sort(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>&#125; <span class="comment">// Error 不知到是哪個 sort </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不定長度引數-Variable-length-Argument"><a href="#不定長度引數-Variable-length-Argument" class="headerlink" title="不定長度引數 Variable length Argument"></a>不定長度引數 Variable length Argument</h2><p>例如 System.out.printf ( ) 無法事先決定引數個數</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.printf ( “%d” , <span class="number">10</span> ) <span class="comment">// 無法指定引數個數</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tool</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span> <span class="params">(<span class="type">int</span>... number)</span> &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> number : number ) &#123;</span><br><span class="line">sum += number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取得不定長度引數中每個元素，可以用 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.println(MathTool.sum(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>不定常數引數是編譯器的蜜糖，int… 宣告的變數實際展開來是陣列，反組譯會得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out.println (</span><br><span class="line">MathTool.sum(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>使用不定常數引數時，方法上宣告的不定長度參數，必須參數列的最後一個。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">some</span> <span class="params">( <span class="type">int</span> arg1, <span class="type">int</span> arg2, <span class="type">int</span>... varargs )</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>且不能使用兩個。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">some</span> <span class="params">( <span class="type">int</span>... arg1, <span class="type">int</span>... arg2 )</span> &#123; <span class="comment">//Error</span></span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="內部類別-Inner-Class"><a href="#內部類別-Inner-Class" class="headerlink" title="內部類別 Inner Class"></a>內部類別 Inner Class</h2><p>類別中可以在定義類別</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>實務中很少見到下面的寫法 :</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Some</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Some</span>();</span><br><span class="line">Some.<span class="type">Other</span> <span class="variable">o</span> <span class="operator">=</span> s.<span class="keyword">new</span> <span class="title class_">Other</span>();</span><br></pre></td></tr></table></figure><p>內部類別可以用 public 、private、protected 來宣告<br>內部類別本身可以存取外部類別的成員，通常非靜態成員會被軒到為 Private ，輔助操作，所以外部不用知道內容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>實務上比較常看到方法中定義 <strong>匿名內部類別 Anonymous inner class ，</strong>這跟繼承跟介面食作比較有關。</p><p>這個語法定義了沒有名稱的類別，並 <strong>重新定義 Override</strong> 了 toString 方法，這方法可以用  Lembda語法來解決。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">object</span> () &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;無聊展示的示範&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="繼承-Inherit-與-多型-Polymorphism"><a href="#繼承-Inherit-與-多型-Polymorphism" class="headerlink" title="繼承 Inherit 與 多型 Polymorphism"></a>繼承 Inherit 與 多型 Polymorphism</h2><p>物件導向中，子類別繼承 Inherit 父類別，可以避免重複定義型為與實作。</p><p>但繼承濫用也會導致維護困難，判斷繼承時機，以及繼承後活用多型。</p><p>以 RPG 遊戲來舉例，比如共有的角色血量、等級可以寫成一個共用程式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> level;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> blood;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBlood</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> blood;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBlood</span><span class="params">( <span class="type">int</span> Blood)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.blood = blood;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣 魔法師 跟 劍士 就可以用 繼承中的 關鍵字 extends 方法都使用這個方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwordMan</span> <span class="keyword">extends</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span> <span class="params">()</span> &#123;</span><br><span class="line">System.out.println( <span class="string">&quot;揮劍攻擊&quot;</span> )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要驗證有沒有繼承成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RPG</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arge)</span> &#123;</span><br><span class="line">demoSwordMan();</span><br><span class="line">demoMagician();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demoSwrodMan</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">var</span> swoordMan.setMan = <span class="keyword">new</span> <span class="title class_">SwordsMan</span>();</span><br><span class="line">swordMan.setBlood(<span class="number">200</span>);</span><br><span class="line">soutf(<span class="string">&quot;劍士&quot;</span> : %f , swordsMan.getBlood());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Private 成員可以繼承，只不過子類別無法存取，需要透過父類別提供的方法來存取。</p></blockquote><h3 id="多型-與-is-a"><a href="#多型-與-is-a" class="headerlink" title="多型 與 is-a"></a>多型 與 is-a</h3><p><strong>子類別只能繼承一個父類別</strong> </p><p>繼承除了可以避免重複的程式碼以外，<strong>子類別 跟  父類別 還會有 is-a 的關係 「是一種」</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SwordsMan</span> <span class="variable">swrodman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">swordman</span>();</span><br><span class="line"><span class="type">Role</span> <span class="variable">role1</span> <span class="operator">=</span> mew <span class="title function_">SwordMan</span><span class="params">()</span>;</span><br><span class="line"><span class="type">SwordMan</span> <span class="variable">swordman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(); <span class="comment">//Error </span></span><br></pre></td></tr></table></figure><h3 id="多型-Polymorphism"><a href="#多型-Polymorphism" class="headerlink" title="多型 Polymorphism"></a>多型 Polymorphism</h3><p><strong>使用單一介面操作多種形態的物件</strong> ，像上面就是可以透過 Role 操作劍士跟魔法師</p><blockquote><p>以繼承及介面來實作多型是次型態 SubType 多型一種呈現</p></blockquote><h3 id="重新定義實作"><a href="#重新定義實作" class="headerlink" title="重新定義實作"></a>重新定義實作</h3><p> 如果角色需要攻擊，那我們通常會在 Role 新增這個方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> fight &#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子類別 繼承了 Role 後 就可以重新定義 fight () 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwordMan</span> <span class="keyword">extends</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;揮劍攻擊&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>繼承父類別後，定義與父類別中相同的方法簽署，但實作內容不同稱為 <strong>重新定義 Override</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> calss Magician <span class="keyword">extends</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span><span class="params">()</span> &#123;</span><br><span class="line">soutln(<span class="string">&quot;魔法攻擊&quot;</span>)</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在子類別前加上 <strong>@Override</strong> 可以要求編譯器幫你檢查，繼承的父類別有沒有這個方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span><span class="params">()</span> &#123;</span><br><span class="line">soutln(<span class="string">&quot;魔法攻擊&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象方法-與-抽象類別"><a href="#抽象方法-與-抽象類別" class="headerlink" title="抽象方法 與 抽象類別"></a>抽象方法 與 抽象類別</h3><p>Abstract 可以標示方法為抽象方法，不用撰寫 {} 區塊，直接分號結束 : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">fight</span> <span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>類別若有未實作的抽象方法，定義不完整的類別不能用來生成實例。<br>內含 <strong>抽象方法</strong> 的類別，一定要在 <strong>class 前標示 abstrac</strong>t 表示這是一個定義不完整抽像類別</p><p>子類別若繼承抽象類別，對抽象方法有兩種處理方法 :<br>一種是繼續標示方法為 abstract ，另一種是實作抽象方法</p><h2 id="繼承語法細節"><a href="#繼承語法細節" class="headerlink" title="繼承語法細節"></a>繼承語法細節</h2><h3 id="protected-成員"><a href="#protected-成員" class="headerlink" title="protected 成員"></a>protected 成員</h3><p>被宣告成 protected 的成員 :<br>同一套件的其他的類別可以直接存取<br>不同套件在繼承同一子類別後就可以直接存取 </p><h2 id="權限關鍵字-與-範圍"><a href="#權限關鍵字-與-範圍" class="headerlink" title="權限關鍵字 與 範圍"></a>權限關鍵字 與 範圍</h2><table><thead><tr><th>關鍵字</th><th>內部類別</th><th>相同套件類別</th><th>不同套件類別</th></tr></thead><tbody><tr><td>public</td><td>可存取</td><td>可存取</td><td>可存取</td></tr><tr><td>private</td><td>可存取</td><td>不可存取</td><td>不可存取</td></tr><tr><td>protected</td><td>可存取</td><td>可存取</td><td>子類別可存取</td></tr><tr><td>無</td><td>可存取</td><td>可存取</td><td>不可存取</td></tr></tbody></table><p>簡單來說，權限依小至大區分 : private → 無 → protected → public<br>如果一開始不確定通常都會先用 private </p><h3 id="重新定義的細節"><a href="#重新定義的細節" class="headerlink" title="重新定義的細節"></a>重新定義的細節</h3><p>在呼叫前，加上 super 關鍵字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwordsMan</span> <span class="keyword">extends</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;劍士&quot;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 super 關鍵字呼叫父類別的方法，不能定義為 privare。</p><p><strong>重新定義方法要注意，父類別中方法權限只能擴大不能縮小</strong> </p><p>若原來成員 public 子類別重新定義不可為 private 或 protected</p><blockquote><p>static 方法屬於類別擁有，若子類別定義相同簽署 static 成員，該成員是屬於子類別擁有，而非重新定義。<br>static 方法也沒有多型，因為物件不會個別擁有 static 成員</p></blockquote><h3 id="再看建構式"><a href="#再看建構式" class="headerlink" title="再看建構式"></a>再看建構式</h3><p>如果類別有繼承關係，建立子類別實例後，為先執行父類別建構式定義的流程，再執行子類別建構是定義的流程。</p><p><strong>預設會呼叫父類別中無參數建構式。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">Some() &#123;</span><br><span class="line">out.println(<span class="string">&quot;呼叫Some()&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> <span class="keyword">extends</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">Other() &#123;</span><br><span class="line">out.println(<span class="string">&quot;呼叫Other()&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果呼叫 Some 會先執行呼叫Some 再 執行 呼叫 Other()</p><p>想執行父類別建構式，可以用 super() 指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">Some() &#123;</span><br><span class="line">out.println(<span class="string">&quot;呼叫Some()&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Some( <span class="type">int</span> i ) &#123;</span><br><span class="line">out.println(<span class="string">&quot;呼叫 Some(int i)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> <span class="keyword">extends</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">Ohter() &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="number">10</span>);</span><br><span class="line">out.println(<span class="string">&quot;呼叫Other()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>super(10) 表示呼叫父類別建構式時，傳入 int 數值 10 </p><blockquote><p><strong>this ( ) 與 super ( ) 只能擇一呼叫，而且一定要再建構式第一行執行。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">Some( <span class="type">int</span> i ) &#123;</span><br><span class="line">out.println(<span class="string">&quot;呼叫 Some(int i)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> <span class="keyword">extends</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">Other() &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>編譯器會再沒有撰寫任何建構式時，自動帶入無參數的預設建構式 Default constructor </p><h3 id="再看-final-關鍵字"><a href="#再看-final-關鍵字" class="headerlink" title="再看 final 關鍵字"></a>再看 final 關鍵字</h3><p>class 前面 也可以 加上 final 關鍵字，若 class 使用了 final 關鍵字限定，就表示這個類別在繼承體系中式最後一個，不會再有子類別，也就是 <strong>不能被繼承</strong>。</p><p>定義類別沒有使用 extends 關鍵字指定繼承任何類別，就是繼承 java.lang.Object </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Some</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其實上面的寫法等於下面的寫法 ( 只是被忽略了 ) </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Some</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>物件一定 「是一種」Object 因此下面撰寫是合法的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Oject</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="string">&quot;Justin&quot;</span></span><br></pre></td></tr></table></figure><p>任何型態的物件都可以使用 Object 型態名稱來參考，好處是若要使用陣列收集各種物件，就可以宣告為 Object [ ]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Object[] objs = &#123;<span class="string">&quot;A&quot;</span>, <span class="keyword">new</span> <span class="title class_">Data</span>(), <span class="keyword">new</span> <span class="title class_">SwordsMan</span>()&#125;;</span><br><span class="line"><span class="type">var</span> <span class="variable">name</span> <span class="operator">=</span> (String) objs[<span class="number">0</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">date</span> <span class="operator">=</span> (Date) objs[<span class="number">1</span>];</span><br><span class="line"><span class="type">var</span> <span class="variable">swordMan</span> <span class="operator">=</span> (SwordMan) objs[<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 但因為陣列長度有限，所以用 ArrayList 可以不限長度收集物件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Object[] elems; <span class="comment">// 使用 Object 陣列收集</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> next; <span class="comment">// 下一個可儲存物件的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArraryList</span><span class="params">(<span class="type">int</span> capacity)</span> &#123; <span class="comment">//指定初始容量</span></span><br><span class="line">elems = <span class="keyword">new</span> <span class="title class_">Oject</span>[capacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArraryList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="number">16</span>); <span class="comment">//初始容量為 16</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123; <span class="comment">//收集物件方法</span></span><br><span class="line"><span class="keyword">if</span>(next == elems.length) &#123; <span class="comment">//自動增長 Object 陣列長度</span></span><br><span class="line">elems = Arrarys.copyOf(elems , elems.length * <span class="number">2</span> ); </span><br><span class="line">&#125;</span><br><span class="line">elems[next++] = o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="comment">// 依索引取得收集之物件</span></span><br><span class="line"><span class="keyword">return</span> elems(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123; <span class="comment">// 已收集的物件個數</span></span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重新定義-toString"><a href="#重新定義-toString" class="headerlink" title="重新定義 toString( )"></a>重新定義 toString( )</h3><h3 id="重新定義-equals"><a href="#重新定義-equals" class="headerlink" title="重新定義 equals ( )"></a>重新定義 equals ( )</h3><p>要比較實質相等性，不是用 &#x3D;&#x3D; ，而是透過 equals( ) ，Integer 包裹器、字串內容相等比較時都要用 equals ( ) 方法來比較。</p><p>intstanceof 運算子</p><p>可以判斷物件是否由某個類別建構，左運算是物件，右運算是類別</p><p><strong>實作 equals() 時通常也要時作 hashCode()</strong></p><p><strong>instanceOf 模式比對時指定的名稱，只有在 instanceof 判斷為 ture 的場合才能存取</strong></p><h2 id="垃圾收集-JVM"><a href="#垃圾收集-JVM" class="headerlink" title="垃圾收集 JVM"></a>垃圾收集 JVM</h2><p><strong>JVM 有垃圾收集 Garbage Collection , GC</strong> 機制，垃圾物件佔據記憶體空間，無法透過變數參考的物件，會被垃圾收集器找出、釋放。</p><h3 id="再看抽象類別"><a href="#再看抽象類別" class="headerlink" title="再看抽象類別"></a>再看抽象類別</h3><h2 id="介面-與-多型"><a href="#介面-與-多型" class="headerlink" title="介面 與 多型"></a>介面 與 多型</h2><h3 id="何為介面-interface"><a href="#何為介面-interface" class="headerlink" title="何為介面 ? interface"></a>何為介面 ? interface</h3><p>很多書都會說 別濫用 繼承 ! 、多用 介面 不要用 繼承等 .. 說法 </p><p><strong>java 只能繼承一個父類別，強化了 「是一種」關係的限制性</strong><br>可以被全部物件擁有、而不是某些物件專屬，可以使用 interface 關鍵字定義</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swimer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>介面可以定義行為但不定義實作，類別要實作介面要使用 implements 關鍵字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Fish</span> <span class="keyword">implements</span> <span class="title class_">Swimmer</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Fish</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以 Java 的語意來說，繼承有 「是一種」關係，實作介面則是「擁有行為」</strong></p><h3 id="行為的多型"><a href="#行為的多型" class="headerlink" title="行為的多型"></a>行為的多型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Swimmer</span> <span class="variable">swimmer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shark</span>();</span><br><span class="line"><span class="type">Swimmer</span> <span class="variable">swimmer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Human</span>();</span><br><span class="line"><span class="type">Swimmer</span> <span class="variable">swimmer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Submarine</span>();</span><br><span class="line"><span class="comment">// 都可以成功編譯</span></span><br></pre></td></tr></table></figure><p>原本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSwim</span><span class="params">(Fish fish)</span> &#123;</span><br><span class="line">fish.swim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSwim</span><span class="params">(Humna human)</span> &#123;</span><br><span class="line">human.swim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但種類多的話會很囉嗦，所以會游泳的東西可以擁有 Swimmer 行為、實作 Swimmer 介面<br>這樣可維護性會提供很多 ! </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oean</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">doSwim(<span class="keyword">new</span> <span class="title class_">Anemonefish</span>(<span class="string">&quot;尼莫&quot;</span>));</span><br><span class="line">doSwim(<span class="keyword">new</span> <span class="title class_">fish</span>(<span class="string">&quot;多莉&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSwim</span><span class="params">(Swimmer swimmer)</span>&#123; <span class="comment">//參數是 Swimmer 型態</span></span><br><span class="line">swimmer.swim();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解決需求變化"><a href="#解決需求變化" class="headerlink" title="解決需求變化"></a>解決需求變化</h3><p>寫程式要有彈性、可維護性 : 既有程式碼不需修改，只需針對新需求撰寫程式。</p><p>像上面除了會游泳的行為外可能還會飛</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Seaplane</span> <span class="keyword">implements</span> <span class="title class_">Swimmer</span>, Flyer &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Seaplance</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">soutf(<span class="string">&quot;海上飛機 %S 再飛%n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">soutf(<span class="string">&quot;海上飛機 %s 再航行%n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>類別可以 : 實作兩個以上的介面，擁有兩個以上的行為。</p><p>類別可以 : 同時繼承某類別，實作某介面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyingFish</span> <span class="keyword">extends</span> <span class="title class_">Fish</span> <span class="keyword">implements</span> <span class="title class_">Flyer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">FlyingFish</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">soutln(<span class="string">&quot;飛魚游泳&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">soutln(<span class="string">&quot;飛魚再飛&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不好的架構下修改程式，很容易牽一髮而動全身。</p><p><strong>再 Java 中，介面可以繼承自另一個介面，也就是繼承父介面行為，再於子介面額外定義行為。</strong></p><h2 id="介面語法細節"><a href="#介面語法細節" class="headerlink" title="介面語法細節"></a>介面語法細節</h2><h3 id="介面的預設"><a href="#介面的預設" class="headerlink" title="介面的預設"></a>介面的預設</h3><p>在 Java 可使用 interface 來定義抽象的行為與外觀</p><p><strong>如果是介面中的方法，可宣告為 pu0blic abstract</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swimmer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>介面中方法沒有實作時，一定是公開抽象，<strong>為了方便，可以省略 piblic abstract<br>編譯器會自動加上</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swimmer</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 interface 中，可以定義常數</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Action &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RIGHT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LEFT</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為也只能定義 public static final 所以為了方便可以這樣撰寫，編譯器會自動幫你補上，所以一定要賦予值 &#x3D; 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Action</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">STOP</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">RIGHT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">LEFT</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但以上已經都不建議，現在推薦用 enum 來列舉。</p><h3 id="匿名內部類別-Anonymous-inner-class"><a href="#匿名內部類別-Anonymous-inner-class" class="headerlink" title="匿名內部類別 Anonymous inner class"></a>匿名內部類別 Anonymous inner class</h3><p>臨時繼承某類別或實作某介面，並建立實例的需求，因為只用一次，所以不需要為這些類別定義名稱 </p><p>語法為</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父類別()|介面() &#123;</span><br><span class="line"><span class="comment">//類別本體實作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是實作某個介面，例如 Some 介面定義了 DoService() 方法要建立匿名函數可以這樣寫</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Some</span> <span class="variable">some</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Some</span>() &#123; <span class="comment">// 實作 Some 介面並直接產生實例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">()</span> &#123;</span><br><span class="line">out.println(<span class="string">&quot;做一些事情&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若介面僅定義抽象方法，可以用 Lambda 表示式 來簡化此程式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Some</span> <span class="variable">some</span> <span class="operator">=</span> () -&gt; out.println(<span class="string">&quot;做一些事&quot;</span>)</span><br></pre></td></tr></table></figure><p>若要在匿名內部類別中存取區域變數，區域變數必須等效於 final，否則會發生編譯錯誤。</p><p>( 因為 區域變數的生命週期只限於方法之中 )</p><h3 id="使用-Enum-列舉常數"><a href="#使用-Enum-列舉常數" class="headerlink" title="使用 Enum 列舉常數"></a>使用 Enum 列舉常數</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">STOP, RIGHT, LIGHT, UP, DOWN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">play(Action.RIGHT); <span class="comment">// 只能傳入 Action 實例</span></span><br><span class="line">play(Action.UP);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(Action action)</span> &#123;</span><br><span class="line">out.println(</span><br><span class="line"><span class="keyword">switch</span>(action) &#123;</span><br><span class="line"><span class="keyword">case</span> STOP -&gt; <span class="string">&quot;播放停止動畫&quot;</span>;</span><br><span class="line"><span class="keyword">case</span> UP -&gt; <span class="string">&quot;播放向上動畫&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例外處理"><a href="#例外處理" class="headerlink" title="例外處理"></a>例外處理</h2><h3 id="語法與繼承架構"><a href="#語法與繼承架構" class="headerlink" title="語法與繼承架構"></a>語法與繼承架構</h3><p>Java 的錯誤也已物件方式呈現，若能捕捉包裝錯誤的物件，就有機會處理該錯誤，例如嘗試回復正常流程、進行日誌 Logging 紀錄</p><h3 id="使用-try-、-catch"><a href="#使用-try-、-catch" class="headerlink" title="使用 try 、 catch"></a>使用 try 、 catch</h3><p> JVM 會嘗試執行 try 區塊的程式碼，如果發生錯誤，執行流程會跳離錯誤的發生點，然後比對 catch 括弧中宣告的型態是否符合被拋出的錯誤型態，符合就執行 catch 區塊的程式碼</p><h3 id="例外繼承架構"><a href="#例外繼承架構" class="headerlink" title="例外繼承架構"></a>例外繼承架構</h3><p>Throwable </p><p>Error</p><p>VirtualMachineError</p><p>AssertionError</p><p>Threadeath</p><p>Exception</p><p>ReflectivOperationException</p><p>ClassNotFoundException</p><p>InstantiationException</p><p>IOException</p><p>FileNotFouindException</p><p>InterruptedException</p><p>RuntimeEception</p><p>ArithmemnticException</p><hr><p>Throwable 定義取得錯誤訊息、堆疊追蹤 Stack Trace 等方法，如果程式沒有任何 catch 捕捉，最後被 JVM 捕捉會中斷程式。</p><p>Error 與其子類別實例代表嚴重系統錯誤 : 例如硬體層面錯誤、JVM 錯誤、記憶體不足等…<br><strong>Error 物件拋出時，基本上不用處理。</strong></p><p><strong>程式本身的錯誤建議用 Exception 或其子類別實例來表現</strong>，通常稱錯誤處理為例外處理 Exception handing</p><p>只要不是屬於 Error 或 RuntimeException，稱為<strong>受檢例外 Checked Exception<br>主要是</strong> API 設計者實作某方法，提醒呼叫者明確處理錯誤。</p><p><strong>RuntimeException 代表 API 設計者實作方法條件引發錯誤，稱為 非受檢例外 Unchecked Exception</strong></p><p>如果父類別例外訂譯在子類別例外之前，編譯會失敗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.in.read();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">ex.print <span class="comment">// Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以寫 <strong>多重捕捉 multi-cath，但例外不得有 繼承關係</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//做一些事...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | InterruptedException | ClassCastExceptioin e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.in.read();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | Exception ex) &#123;</span><br><span class="line"><span class="comment">//Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="要-抓-還是要-拋"><a href="#要-抓-還是要-拋" class="headerlink" title="要 抓 還是要 拋"></a>要 抓 還是要 拋</h3><p>設計時沒有足夠的資訊知道如何處理，可以拋出例外，讓呼叫方法的客戶端來處理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拋出受檢例外，表示你認為呼叫方法的客戶端有能力且應該處理例外</strong><br>throws 拋出部分，會事 API 介面的一部分，客戶端不用查看原始碼，從文件就能得知。</p><p><strong>Java 的設計哲學認為 非受檢例外事程式設計不當引發的臭蟲，不應該使用 try、catch 嘗試處理</strong></p><p> 自訂非受檢例外</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizedException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123; <span class="comment">// 自訂非受檢例外</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span> ( SomeException ex ) &#123;</span><br><span class="line"><span class="comment">// 做些可行的處理</span></span><br><span class="line"><span class="comment">// 也許是 Logging 之類的</span></span><br><span class="line"><span class="comment">// Checked 或 Unchecked ?</span></span><br><span class="line"><span class="keyword">throws</span> <span class="keyword">new</span> <span class="title class_">CustomizedException</span>(<span class="string">&quot;error message...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>開發者需要思考，這是客戶端可以處理的例外嗎 ? 還是客戶端沒有準備好前置條件就呼叫方法才導致的意外 ?</p><h3 id="認識堆疊追蹤-Stack"><a href="#認識堆疊追蹤-Stack" class="headerlink" title="認識堆疊追蹤 Stack"></a>認識堆疊追蹤 Stack</h3><p>多重方法呼叫下，想知道例外發生的根源，可利用例外自動收集的 堆疊追蹤 Stack Trace 來取得資訊</p><p>最簡單的方法就是呼叫 printStackTrace( ) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SttackTraceDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">c ();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">c</span> <span class="params">()</span> &#123;</span><br><span class="line">b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">b</span> <span class="params">()</span> &#123;</span><br><span class="line">a();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span> text.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當例外被捕捉的時候，可以呼叫 printStackTrace() 在主控台顯示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException</span><br><span class="line">at....(<span class="number">22</span>)</span><br><span class="line">at....(<span class="number">17</span>)</span><br><span class="line">at....(<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p>如果想取得個別的堆追蹤元素進行處理，可以使用 getStackTrace( )，會回傳 StackTraceElement 陣列</p><p>善用堆疊追蹤的前提是程式碼中不可有私吞例外的行為。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">使用 System ( 類別class ) 上 out ( 物件Oject ) 的 println() ( 方法method ) J </span><br></pre></td></tr></table></figure><h3 id="🐙-變數值的互換"><a href="#🐙-變數值的互換" class="headerlink" title="🐙 變數值的互換"></a>🐙 變數值的互換</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">        <span class="comment">//a = 6 , b = 5</span></span><br><span class="line">        <span class="comment">//temp 暫時的意思，借放一下值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a; <span class="comment">//5</span></span><br><span class="line">        a = b; <span class="comment">// a = 6, b = 6, temp = 5</span></span><br><span class="line">        b = temp; <span class="comment">//讓 b 拿出來</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a); <span class="comment">//6</span></span><br><span class="line">        System.out.println(b); <span class="comment">//5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🐙-陣列中值的互換"><a href="#🐙-陣列中值的互換" class="headerlink" title="🐙 陣列中值的互換"></a>🐙 陣列中值的互換</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//想要把 1 跟 4 對調</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//一樣用temp創一個</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[<span class="number">3</span>];</span><br><span class="line">        arr[<span class="number">3</span>] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print( i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🐙-字串切割取單字"><a href="#🐙-字串切割取單字" class="headerlink" title="🐙 字串切割取單字"></a>🐙 字串切割取單字</h3><p>在任何程式語言都很實用的 tips<br>文件 or 大量資料處理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello , how are you today ?&quot;</span>;</span><br><span class="line">        <span class="comment">//split 會切分陣列</span></span><br><span class="line">        <span class="comment">//regular expression 正規</span></span><br><span class="line">        String[] myArr = s.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String small : myArr) &#123;</span><br><span class="line">            <span class="comment">//將字串的每一個字都取出來，在去找你要的單字</span></span><br><span class="line">            System.out.println(small);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🐙-切割單字"><a href="#🐙-切割單字" class="headerlink" title="🐙 切割單字"></a>🐙 切割單字</h3><p>使用 .substring </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        s = s.substring(<span class="number">0</span>, s.length() - <span class="number">1</span>); <span class="comment">// 0 is-inclusive, 4 is exclusive</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🐙-Math-內建-常用-tips"><a href="#🐙-Math-內建-常用-tips" class="headerlink" title="🐙 Math ( 內建 ) 常用 tips"></a>🐙 Math ( 內建 ) 常用 tips</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">28</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">        <span class="comment">//回傳參數最大值</span></span><br><span class="line">        System.out.println(Math.max(x,y)); <span class="comment">//28</span></span><br><span class="line">        <span class="comment">//無條件捨去 ( floor 地板 )</span></span><br><span class="line">        System.out.println(Math.floor(z)); <span class="comment">//3.0</span></span><br><span class="line">        <span class="comment">//無條件進位 ( ceiling 天花板 )</span></span><br><span class="line">        System.out.println(Math.ceil(z)); <span class="comment">//4.0</span></span><br><span class="line">        <span class="comment">//開根號 square()</span></span><br><span class="line">        System.out.println(Math.sqrt(x)); <span class="comment">//5.291502622129181</span></span><br><span class="line">        <span class="comment">//次方 power() a 的 y 次方</span></span><br><span class="line">        System.out.println(Math.pow(a, y));<span class="comment">//16.0</span></span><br><span class="line">        <span class="comment">//以10為底的對數函數，返回 double 以10為底的對數</span></span><br><span class="line">        System.out.println(Math.log10(x));<span class="comment">//1.4471580313422192</span></span><br><span class="line">        <span class="comment">//log10 實用例子 : 計算有幾個數</span></span><br><span class="line">        System.out.println((<span class="type">int</span>)Math.floor(Math.log10(x)+<span class="number">1</span>)); <span class="comment">//2</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(Math.PI);</span><br><span class="line">        System.out.println(Math.E);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🐙-遞迴函數-recursion-method"><a href="#🐙-遞迴函數-recursion-method" class="headerlink" title="🐙 遞迴函數 recursion method"></a>🐙 遞迴函數 recursion method</h3><p>a method that calls itself 一個函數執行他自己</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printHi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">        printHi();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遞迴函數 recursion method</span></span><br><span class="line">        <span class="comment">// a method that calls itself 一個函數呼叫他自己</span></span><br><span class="line">        printHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🐙-Stack"><a href="#🐙-Stack" class="headerlink" title="🐙 Stack"></a>🐙 Stack</h3><p> 遞迴 : 背後的資料結構 Stack  堆疊 先進後出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printHi</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i == <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;We just enter printHi with i is &quot;</span> + i );</span><br><span class="line">        printHi( i - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;We finished running printHi with i is &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遞迴函數 recursion method</span></span><br><span class="line">        <span class="comment">// a method that calls itself 一個函數呼叫他自己</span></span><br><span class="line">        printHi(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">We just enter printHi with i is <span class="number">10</span></span><br><span class="line">We just enter printHi with i is <span class="number">9</span></span><br><span class="line">We just enter printHi with i is <span class="number">8</span></span><br><span class="line">We just enter printHi with i is <span class="number">7</span></span><br><span class="line">We just enter printHi with i is <span class="number">6</span></span><br><span class="line">We just enter printHi with i is <span class="number">5</span></span><br><span class="line">We just enter printHi with i is <span class="number">4</span></span><br><span class="line">We just enter printHi with i is <span class="number">3</span></span><br><span class="line">We just enter printHi with i is <span class="number">2</span></span><br><span class="line">We just enter printHi with i is <span class="number">1</span></span><br><span class="line">We finished running printHi with i is <span class="number">1</span></span><br><span class="line">We finished running printHi with i is <span class="number">2</span></span><br><span class="line">We finished running printHi with i is <span class="number">3</span></span><br><span class="line">We finished running printHi with i is <span class="number">4</span></span><br><span class="line">We finished running printHi with i is <span class="number">5</span></span><br><span class="line">We finished running printHi with i is <span class="number">6</span></span><br><span class="line">We finished running printHi with i is <span class="number">7</span></span><br><span class="line">We finished running printHi with i is <span class="number">8</span></span><br><span class="line">We finished running printHi with i is <span class="number">9</span></span><br><span class="line">We finished running printHi with i is <span class="number">10</span></span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7e070a94-9def-4eca-bb5d-266e42e3a46e/Untitled.png" alt="Untitled"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/de299f2c-bb7a-476a-8625-3cfe1a15e178/Untitled.png" alt="Untitled"></p><h3 id="🐙-mod-operator-remoinder-operator"><a href="#🐙-mod-operator-remoinder-operator" class="headerlink" title="🐙 mod operator, remoinder operator"></a>🐙 mod operator, remoinder operator</h3><p>餘數運算子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//mod operator, remoinder operator</span></span><br><span class="line">        <span class="comment">// 10 被 3 除的餘數</span></span><br><span class="line">        System.out.println(<span class="number">10</span> % <span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line">        System.out.println(<span class="number">10</span> % <span class="number">2</span>); <span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>餘數運算子 常運用在判斷</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WisonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a is an even number&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a in not an even number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🐙-check-if-somthing-is-unll-or-not-null-must-use-x3D-x3D-or-x3D"><a href="#🐙-check-if-somthing-is-unll-or-not-null-must-use-x3D-x3D-or-x3D" class="headerlink" title="🐙 check if somthing is unll or not null, must use &#x3D;&#x3D; or !&#x3D;"></a>🐙 check if somthing is unll or not null, must use &#x3D;&#x3D; or !&#x3D;</h3><p>不能用 </p><h2 id="🐿️-java-lang-Object"><a href="#🐿️-java-lang-Object" class="headerlink" title="🐿️  java.lang.Object"></a>🐿️  java.lang.Object</h2><h3 id="🍂getClass-return-自己的-class"><a href="#🍂getClass-return-自己的-class" class="headerlink" title="🍂getClass() | return 自己的 class"></a>🍂getClass() | return 自己的 class</h3><p>public final native Class&lt;?&gt; getClass();</p><h3 id="🍂equals-比較-referance-的位置是不是一樣"><a href="#🍂equals-比較-referance-的位置是不是一樣" class="headerlink" title="🍂equals() | 比較 referance 的位置是不是一樣"></a>🍂equals() | 比較 referance 的位置是不是一樣</h3><p>因為除了 primitive type 是真的將 values 存在記憶體位置中</p><p>其他所有 Non-primitive 非基本型別都是 referance by datatpye 在記憶體位置都是指向的，因此用 &#x3D;&#x3D; 比較只會針對記憶體體位製比較，用 equals 才可以對值對比較</p><p>public boolean equals(Object obj) {    return (this &#x3D;&#x3D; obj);}</p><h3 id="🍂toString-把指向的資料變成字串"><a href="#🍂toString-把指向的資料變成字串" class="headerlink" title="🍂toString() | 把指向的資料變成字串"></a>🍂toString() | 把指向的資料變成字串</h3><p>pcublic String toString() {    return getClass().getName() + “@” +Integer.<em>toHexString</em>(hashCode());}</p><h2 id="🐿️-JFrame-amp-JPanel"><a href="#🐿️-JFrame-amp-JPanel" class="headerlink" title="🐿️ JFrame &amp; JPanel"></a>🐿️ JFrame &amp; JPanel</h2><p>Part1. 基本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">package</span> JFram_JPanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">window</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">        window.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        window.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        window.setVisible(<span class="literal">true</span>);</span><br><span class="line">        window.setContentPane(<span class="keyword">new</span> <span class="title class_">Mypen</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mypen.java</span></span><br><span class="line"><span class="keyword">package</span> JFram_JPanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mypen</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//繪製原件，在需要被執行的時候被執行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        <span class="comment">//這裡可以看 paintComponent 的特性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Java is invoking paintComponent&quot;</span>);</span><br><span class="line">        g.drawString(<span class="string">&quot;Hello World&quot;</span>,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        g.setColor(Color.BLACK);</span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;歷史&quot;&gt;&lt;a href=&quot;#歷史&quot; class=&quot;headerlink&quot; title=&quot;歷史&quot;&gt;&lt;/a&gt;歷史&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;J2SE 則是平台名稱，包含了 JDK 與 Java 程式語言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1990年被 昇陽 Sun MicroSystems 由 James Gosling 在1994年 寫出，2009年被 Oracle 收購，目前有三個版本&lt;/p&gt;
&lt;p&gt;Java 語言只是 Java SE 的一部分&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="java" scheme="https://22aliang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb 基礎筆記</title>
    <link href="https://22aliang.github.io/2024/05/13/Mongodb%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    <id>https://22aliang.github.io/2024/05/13/Mongodb%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/</id>
    <published>2024-05-13T12:37:24.891Z</published>
    <updated>2024-05-13T12:54:21.329Z</updated>
    
    <content type="html"><![CDATA[<h3 id="儲存格式"><a href="#儲存格式" class="headerlink" title="儲存格式"></a>儲存格式</h3><p>NoSQL 是用 object 來儲存</p><span id="more"></span><h3 id="JSON-amp-BSON"><a href="#JSON-amp-BSON" class="headerlink" title="JSON &amp; BSON"></a>JSON &amp; BSON</h3><p>JavaScript Object Notation 通常被稱為 JSON </p><p>JavaScript 物件是簡單的容器，其中一個 String key 可以映射到一個 value ( 可以是 number、string、function、object … )</p><p>JSON 普遍性，成為 MongoDB 開發數據結構第一選擇</p><p>但有幾個問題讓 JSON 不太適合使用在數據庫</p><ol><li>JSON 是純文字格式、解析慢</li><li>JSON 高可讀性無法節省儲存空間</li><li>JSON 僅支援有限數量基本 data types</li></ol><p>所以人們發明了 BSON 代表 Binary JSON</p><p>BSON 二進制結構對 data types 和 長度信息進行編碼，可以快解析</p><h3 id="MongoDB-Shell-mongosh"><a href="#MongoDB-Shell-mongosh" class="headerlink" title="MongoDB Shell ( mongosh )"></a>MongoDB Shell ( mongosh )</h3><p>是一個功能齊全的 JavaScript 、 Node.js 16x REPL ( Read, Evaluate, Pint, Loop ) 環境</p><p>一次擁有多個 database，內部可以有多個 collections 等於是 MySQL 的一個 Table</p><ol><li><p>安裝 <strong><a href="https://www.mongodb.com/try/download/community">MongoDB Community Server Download</a></strong></p></li><li><p>再安裝 <strong><a href="https://www.mongodb.com/try/download/shell">MongoDB Shell Download</a> ，</strong>解壓縮後放到 C:\Program Files 裡面，並在環境變數的 path 中新增到 bin 的路徑</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:\<span class="title class_">Program</span> <span class="title class_">Files</span>\mongosh-<span class="number">1.8</span><span class="number">.0</span>-win32-x64\bin</span><br></pre></td></tr></table></figure><p>or 下載 MSI 版本可以省略上面的步驟</p><h3 id="使用語法"><a href="#使用語法" class="headerlink" title="使用語法"></a>使用語法</h3><p>查看版本</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">version</span>()</span><br></pre></td></tr></table></figure><p>查看資料庫</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br><span class="line">show dbs <span class="comment">//簡寫</span></span><br></pre></td></tr></table></figure><p>展示目前所在的資料庫</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><p>切換到 database 如果不存在會直接新增</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use &lt;db&gt;</span><br></pre></td></tr></table></figure><p>顯示目前資料庫裡所有 collections</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><p>再MondoDB 中 document 指的是數據的基本單元或基本結構塊<br>跟 CRUD 相關的語法 </p><ul><li>新增一筆資料 | 參數為一筆物件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">insertOne</span>(&lt;<span class="variable language_">document</span>&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//示範</span></span><br><span class="line"></span><br><span class="line">exampleDB&gt; </span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">insertOne</span>(<span class="params">&#123;name:<span class="string">&quot;Grace&quot;</span>, age:<span class="number">27</span>, major:<span class="string">&quot;Computer&quot;</span>, schlarship:&#123;merit:<span class="number">3000</span>, other:<span class="number">1500</span>&#125;&#125;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">acknowledged</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">insertedId</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6434f9fb6894bfb6d8854174&quot;</span>) <span class="comment">//自動加的 primary key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新增一筆或多筆資料 | 參數是一個由物件組成的 array</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">insertMany</span>([&lt;document1&gt;,&lt;document2&gt;...])</span><br><span class="line"></span><br><span class="line"><span class="comment">//示範</span></span><br><span class="line"></span><br><span class="line">exampleDB&gt; </span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">insertOne</span>([&#123;<span class="attr">name</span>:<span class="string">&quot;Grace&quot;</span>, <span class="attr">age</span>:<span class="number">27</span>, <span class="attr">major</span>:<span class="string">&quot;Computer&quot;</span>, <span class="attr">schlarship</span>:&#123;<span class="attr">merit</span>:<span class="number">3000</span>, <span class="attr">other</span>:<span class="number">1500</span>&#125;&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;Grace&quot;</span>, <span class="attr">age</span>:<span class="number">27</span>, <span class="attr">major</span>:<span class="string">&quot;Computer&quot;</span>, <span class="attr">schlarship</span>:&#123;<span class="attr">merit</span>:<span class="number">3000</span>, <span class="attr">other</span>:<span class="number">1500</span>&#125;&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">//檢查一下</span></span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">find</span>() </span><br></pre></td></tr></table></figure><ul><li>萬用新增數據 | 參數是一個物件，或是一個由物件組成的 array</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">insert</span>([&lt;document1&gt;,&lt;document2&gt;...])</span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">insert</span>(&lt;<span class="variable language_">document</span>&gt;)</span><br></pre></td></tr></table></figure><ul><li><p>數據查詢 | Query 的 data type 是 object，用來過濾找的資料</p><p>  要獲得所有 collection 資料可以是 empty object 、或不給參數</p><p>  特別的是裡面可以放比較值，必須看<a href="https://www.mongodb.com/docs/manual/reference/operator/query/lt/">官網</a></p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collcetion</span>.<span class="title function_">find</span>(&lt;query&gt;)</span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">find</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;Grace&quot;</span>&#125;)</span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">find</span>(&#123;<span class="string">&quot;schlarship.merit&quot;</span>:&#123;<span class="attr">$lt</span>: <span class="number">1000</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得所有 collection</span></span><br><span class="line">db.<span class="property">collcetion</span>.<span class="title function_">find</span>()</span><br><span class="line">db.<span class="property">collcetion</span>.<span class="title function_">find</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>更新一筆數據 | 更新 collection 第一筆找到的資料</p><p>  data type 是 object，跟 find() 中 query 功能一樣</p><p>  第一筆參數尋找要更改的資料</p><p>  第二筆參數通常會加這個 $set : {} 括弧裡面放更新的資料</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">updateOne</span>(&lt;filter&gt;,&lt;update&gt;)</span><br><span class="line"></span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">updateOne</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;Esther&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;Eason&quot;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">updateOne</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;Eason&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">26</span>&#125;,<span class="attr">$currentDate</span>:&#123;<span class="attr">lastModified</span>: <span class="literal">true</span>&#125;&#125;)</span><br><span class="line"><span class="comment">//會記錄最後更新的時間</span></span><br><span class="line"><span class="attr">lastModified</span>: <span class="title class_">ISODate</span>(<span class="string">&quot;2023-04-11T13:49:55.577Z&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>更新多筆數據 | 可以一次更新符合 filter 的資料</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">updateMany</span>(&lt;filter&gt;,&lt;update&gt;)</span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">updateMany</span>(&#123;<span class="attr">major</span>:<span class="string">&quot;Math&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">major</span>:<span class="string">&quot;chinese&quot;</span>&#125;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>刪除單筆數據 | 第一筆符合資料刪除</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">deleteOne</span>(&lt;filter&gt;)</span><br></pre></td></tr></table></figure><ul><li>刪除多筆數據 | 刪除所有符合的資料</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">collection</span>.<span class="title function_">deleteMany</span>(&lt;filter&gt;)</span><br></pre></td></tr></table></figure><h1 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h1><h3 id="Mongoose-1"><a href="#Mongoose-1" class="headerlink" title="Mongoose"></a>Mongoose</h3><p>若要再程式語言中使用或存取 MongoDB 需要工具讓資料庫可以跟 JS 程式碼連結</p><p>能夠將 JS 中的 Object 轉換成 MongoDB 中的 document </p><p>因此這類工具叫做 object-document mapping ( ODM ) </p><p>使用 ODM 的好處有 :</p><ol><li>資料庫結構能被追蹤</li><li>ORM ( SQL資料庫使用的工具叫做ORM 像 JAVA 就會用 Hibernate )、ODM 會內建保護機制、保護型語法，不用擔心 SQL Injection 之類的攻擊</li><li>讓 Projecet 更符合 MVC 模型 : Mongoose 是 model 用來跟 MongoDB互動獲得資料，View 是 EJS、Controller 是 app.js</li></ol><h3 id="Model-amp-Schema"><a href="#Model-amp-Schema" class="headerlink" title="Model &amp; Schema"></a>Model &amp; Schema</h3><ol><li>Schema : 每個 Schema 對應到 MongoDB 的 Collection ，並定義裡面 document 的架構，像是最大值、最小值等..，就像MySQL 中 creat table 的步驟</li><li>Model : 包裝 Schema 的容器，可以用 Model 來對 Collection CRUD</li></ol><p>Schema  語法為</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mongoose <span class="keyword">from</span> <span class="string">&quot;mongoose&quot;</span>; <span class="comment">// 等於 const mongoose = require(&quot;mongoose&quot;);</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Schema</span> &#125; = mongoose; <span class="comment">// ohject constructor 這個可用的變數 Schema  </span></span><br><span class="line"><span class="keyword">const</span> blogSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123; <span class="comment">//這是 new object 的語法</span></span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>, <span class="comment">// String is shorthand for &#123; type:String&#125;</span></span><br><span class="line">  <span class="attr">date</span>: &#123; <span class="attr">type</span>: <span class="title class_">Date</span>, <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="property">now</span> &#125;,</span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="attr">votes</span>: <span class="title class_">Number</span>, <span class="attr">favs</span>: <span class="title class_">Number</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再 blogSchema  的 constructor 中，參數為一個物件</p><p>每個 key 都定義了 blogSchema   當中 document 的屬性</p><p>每個 key 賦予的 value 為一個屬性，為 Schema Type的物件 </p><p>常見 Schema Type 物件 : String、Number、Date、Boolean、ObjectId、Array、Decimal123、Map … ( 第一個字都大寫 )</p><p>Model 語法為</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Blog</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Blog&#x27;</span>,blogSchema)</span><br></pre></td></tr></table></figure><p>注意事項 : mongoose.model() 第一個參數為 String，為 collection 的名稱，開頭要大寫、且為單數 ( 舉例 : student 會轉換成 Students、people 會轉換成 Pserson，Mongoose會自己轉 )</p><p>第二個參數是前面製作的 Schema</p><h3 id="Query-Object-跟-Promise-比較"><a href="#Query-Object-跟-Promise-比較" class="headerlink" title="Query Object 跟 Promise 比較"></a>Query Object 跟 Promise 比較</h3><p>Query Object : </p><p>是一種thenable object，代表後面可以串接.then()以及.catch()<br>find()以及findOne()兩個method的return值都是Query Object<br>因此就算把 .exec() 刪掉也可以運作</p><p>Promise : </p><p>可以用 .then()、.catch()</p><p>不管在哪種情況，在Query Object後面加上.exec()，讓它變成Promise都是比較好的</p><h3 id="Mongooes-中常見的-CRUD"><a href="#Mongooes-中常見的-CRUD" class="headerlink" title="Mongooes 中常見的 CRUD"></a>Mongooes 中常見的 CRUD</h3><p>儲存 MongoDB 的 document</p><p>return prmise ，並儲存資料</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doucument.<span class="title function_">save</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">saveDoc</span> =&gt;</span> &#123;</span><br><span class="line">saveDoc === doc; <span class="comment">//true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示範的部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Student&quot;</span>, studentSchema);</span><br><span class="line"><span class="keyword">const</span> newObject = <span class="keyword">new</span> <span class="title class_">Student</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lisa&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">major</span>: <span class="string">&quot;Math&quot;</span>,</span><br><span class="line">  <span class="attr">scholarship</span>: &#123;</span><br><span class="line">    <span class="attr">merit</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">other</span>: <span class="number">1000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">newObject</span><br><span class="line">  .<span class="title function_">save</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">saveObject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;資料儲存是:&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(saveObject);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">伺服器正在prot3000...</span><br><span class="line">成功連結mongoDB</span><br><span class="line">資料儲存是:</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Lisa&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">major</span>: <span class="string">&#x27;Math&#x27;</span>,</span><br><span class="line">  <span class="attr">scholarship</span>: &#123; <span class="attr">merit</span>: <span class="number">5000</span>, <span class="attr">other</span>: <span class="number">1000</span> &#125;,</span><br><span class="line">  <span class="attr">_id</span>: <span class="keyword">new</span> <span class="title class_">ObjectId</span>(<span class="string">&quot;64357352434482976e4fae00&quot;</span>),</span><br><span class="line">  <span class="attr">__v</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在 mongo 中</span><br><span class="line">db.<span class="property">students</span>.<span class="title function_">find</span>()</span><br><span class="line">可以看到有沒有成功</span><br></pre></td></tr></table></figure><p>在 Mongoose 中許多 methods return 都是 Query 是 Mongoose 特有的 Class</p><p>可用在 find、update、delete documents 等操作</p><p>如果要讓這些 methods 的 return type 變成 promise 可以用要加</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">exec</span>()</span><br></pre></td></tr></table></figure><ul><li><p>篩選全部資料 | 找到所有符合條件的物件</p><p>  可以用 $去設定要篩選的資料</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(filter)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">find</span>(&#123; <span class="string">&quot;scholarship.merit&quot;</span>: &#123; <span class="attr">$gte</span>: <span class="number">5000</span> &#125; &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>篩選第一筆資料 | 找到符合的第一筆資料</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">findOne</span>(filter)</span><br></pre></td></tr></table></figure><aside>💡 在 mongooes 中 update 並不會管 schema 的設定，必須要加第三個參數{ runValidators: true } 才會檢查但.save() 會被擋下來</aside><ul><li><p>更新資料 | 第一個符合的物件，並將資料 update</p><p>  filter、update 這個參數都是 object ，.then() 內 callback 被執行帶入參數是更新的訊息</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">updateOne</span>(filter, update, options)</span><br><span class="line"><span class="title class_">Model</span>.<span class="title function_">updateOne</span>(filter, update, options).<span class="title function_">exec</span>() </span><br><span class="line"><span class="comment">//return Promise .then()、.catch()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---- 範例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Student&quot;</span>, studentSchema);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">updateOne</span>(</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Eason&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Eason Lam&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">runValidators</span>: <span class="literal">true</span> , <span class="attr">new</span>: <span class="literal">true</span>&#125; <span class="comment">//nwe: true 是無效的</span></span><br><span class="line">)</span><br><span class="line">  .<span class="title function_">exec</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">mes</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mes);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正確回饋 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">acknowledged</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">modifiedCount</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">upsertedId</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">upsertedCount</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">matchedCount</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 檢查</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">find</span>(&#123;&#125;)</span><br><span class="line">  .<span class="title function_">exec</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>更新多筆資料 | 符合的所有物件，將資料 update</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">updateMany</span>(filter, update, options)</span><br></pre></td></tr></table></figure><ul><li>更新資料 | 找到第一個符合條件的物件並更新</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">findOneAndUpdate</span>(condition, update, option)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Student&quot;</span>, studentSchema);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">findOneAndUpdate</span>(</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Grace&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Grace Xie&quot;</span> &#125;,</span><br><span class="line"><span class="comment">//new 控制找到的屬性是不是更新前的</span></span><br><span class="line">  &#123; <span class="attr">runValidator</span>: <span class="literal">true</span>, <span class="attr">new</span>: <span class="literal">true</span> &#125; </span><br><span class="line">)</span><br><span class="line">  .<span class="title function_">exec</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">newData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newData);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>updateOne() 適合在不需要顯示更新後資料狀況、findOneAndUpdate() ，設定 new: true 在需要確認更新後狀況時很好用</p><ul><li><p>刪除資料 | 從 collection 刪除和 conditions 匹配的第一個 document</p><p>  return 一個 deletedConnt 屬性的 Object</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">deleteOnd</span>(conditions)</span><br><span class="line"></span><br><span class="line"><span class="comment">//示範</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">deleteOne</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Lisa&quot;</span> &#125;)</span><br><span class="line">  .<span class="title function_">exec</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//回傳</span></span><br><span class="line">&#123; <span class="attr">acknowledged</span>: <span class="literal">true</span>, <span class="attr">deletedCount</span>: <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>刪除多筆資料 | 從 collection 刪除和 conditions 匹配的所有 document</p><p>  return 一個 deletedConnt 屬性的 Object</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">deleteMany</span>(conditions)</span><br></pre></td></tr></table></figure><h3 id="Schema-Validtors-驗證器"><a href="#Schema-Validtors-驗證器" class="headerlink" title="Schema Validtors 驗證器"></a>Schema Validtors 驗證器</h3><p>希望 Collection 的資料在被放進去之前，都可以經過驗證，就可以在 schema 中設定屬性驗證器 validators </p><p>Schema 屬性設定語法通常是 : </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>: <span class="title class_">String</span></span><br><span class="line"><span class="attr">name</span>: &#123; type : <span class="title class_">String</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入 Validtors 的寫法</span></span><br><span class="line"><span class="attr">name</span>: &#123;</span><br><span class="line">type : <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為每種 data type 所用的驗證器不同，對每個 data type 通用有 2 種</p><ol><li>required : 可放入一個 boolean、或 array、或 function</li><li>default : 設定屬性的預設值</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//範例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minlength</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">maxlength</span>: <span class="number">50</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">match</span>: <span class="regexp">/^([\w-\.]+@([\w-]+\.)+[\w-]&#123;2,4&#125;)?$/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">min</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">role</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">enum</span>: [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//範例</span></span><br><span class="line"><span class="keyword">const</span> studentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;<span class="attr">name</span>: <span class="title class_">String</span> ,<span class="attr">required</span>: [<span class="literal">true</span>,<span class="string">&quot;每個學生都有名字&quot;</span>]&#125;,</span><br><span class="line">  <span class="comment">//min 是一個限制，array 第一個參數是限制、第二個參數是錯誤訊息</span></span><br><span class="line">  <span class="attr">age</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">min</span>: [<span class="number">0</span>, <span class="string">&quot;年齡不能小於0&quot;</span>] &#125;,</span><br><span class="line"><span class="attr">major</span>: <span class="title class_">String</span>,<span class="attr">require</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">merit</span> &gt;= <span class="number">3000</span></span><br><span class="line">  &#125;, <span class="comment">// &lt; 3000 就可以不用填這個值</span></span><br><span class="line"><span class="attr">enum</span>: [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;undecided&quot;</span>, <span class="string">&quot;Chinese&quot;</span>], <span class="comment">//只能新增這幾個</span></span><br><span class="line"><span class="attr">scholarship</span>: &#123;</span><br><span class="line"><span class="comment">//預設是 0 </span></span><br><span class="line">    <span class="attr">merit</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="attr">other</span>: <span class="title class_">Number</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="跟-String-有關的-Schema-Validtors-驗證器"><a href="#跟-String-有關的-Schema-Validtors-驗證器" class="headerlink" title="跟 String 有關的 Schema Validtors 驗證器"></a>跟 String 有關的 Schema Validtors 驗證器</h3><ol><li><p>uppercase ( boolean)</p></li><li><p>lowercase ( boolean)</p></li><li><p>enum (array of strings) </p><p> 只能新增指定的值 enum : [”指定”,”指定”]</p></li><li><p>minlength (number)</p></li><li><p>maxlength (number)</p></li></ol><h3 id="跟-Number-有關的-Schema-Validtors-驗證器"><a href="#跟-Number-有關的-Schema-Validtors-驗證器" class="headerlink" title="跟 Number 有關的 Schema Validtors 驗證器"></a>跟 Number 有關的 Schema Validtors 驗證器</h3><ol><li>min</li><li>max</li><li>enum</li></ol><h3 id="Instance-Method"><a href="#Instance-Method" class="headerlink" title="Instance Method"></a>Instance Method</h3><p>在 Mongoose Model 當中每筆資料叫做 documnet ，document 又叫做 instance </p><p>若我們想要某個 model  所有 documents 都可以使用某個 method<br>共用 methods 的概念跟物件導向有一點像<br>就可以將 Method 定義在 schema 上，這樣被稱為 instance method </p><p>Instance 的語法有兩種</p><ol><li>Schema 內設定 methods 屬性並給予一個 Object</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animalSchema = <span class="keyword">new</span> <span class="title class_">Schema</span> (&#123;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="attr">findSimilor</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//示範</span></span><br><span class="line"><span class="keyword">const</span> studentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="comment">//min 是一個限制，array 第一個參數是限制、第二個參數是錯誤訊息</span></span><br><span class="line">    <span class="attr">age</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">min</span>: [<span class="number">0</span>, <span class="string">&quot;年齡不能小於0&quot;</span>] &#125;,</span><br><span class="line">    <span class="attr">major</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">require</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">merit</span> &gt;= <span class="number">3000</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">scholarship</span>: &#123;</span><br><span class="line">      <span class="attr">merit</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">      <span class="attr">other</span>: <span class="title class_">Number</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;<span class="comment">//第二個物件放一個 methods</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">printTotalScholarship</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//這個 this 指的是 Student model 製作出的 object</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">merit</span> + <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">other</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Student&quot;</span>, studentSchema);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">find</span>(&#123;&#125;)</span><br><span class="line">  .<span class="title function_">exec</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">student</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span> + <span class="string">&quot;總學金是&quot;</span> + student.<span class="title function_">printTotalScholarship</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ol><li>直接設定 Schema 的 methods 屬性</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> studentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">maxlength</span>: <span class="number">25</span> &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">min</span>: [<span class="number">0</span>, <span class="string">&quot;年齡不能小於0&quot;</span>] &#125;,</span><br><span class="line">    <span class="attr">major</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">merit</span> &gt;= <span class="number">3000</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">enum</span>: [</span><br><span class="line">        <span class="string">&quot;Chemistry&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Computer Science&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mathematics&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Civil Engineering&quot;</span>,</span><br><span class="line">        <span class="string">&quot;undecided&quot;</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">scholarship</span>: &#123;</span><br><span class="line">      <span class="attr">merit</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">      <span class="attr">other</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">studentSchema.<span class="property">method</span>.<span class="property">printTotalScholarship</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">merit</span> + <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">other</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Student&quot;</span>, studentSchema);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">find</span>(&#123;&#125;)</span><br><span class="line">  .<span class="title function_">exec</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">student</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span> + <span class="string">&quot;總學金是&quot;</span> + student.<span class="title function_">printTotalScholarship</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="Static-Methods"><a href="#Static-Methods" class="headerlink" title="Static Methods"></a>Static Methods</h3><p>定義專於 Schema 使用的 method 可以使用 static method，並屬於 Schema 本身</p><p>不屬於 Mongoose Model 內部的 documents，概念來自物件導向，有 3 種寫法</p><h2 id="開啟一個專案"><a href="#開啟一個專案" class="headerlink" title="開啟一個專案"></a>開啟一個專案</h2><p>對資料夾</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>再下載</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express ejs</span><br></pre></td></tr></table></figure><p>再 app.js 寫入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;伺服器正在prot3000...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再開啟伺服器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.<span class="property">js</span></span><br></pre></td></tr></table></figure><p>再安裝套件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure><p>詳細連接伺服器方法可以看<a href="https://mongoosejs.com/">官網</a></p><p>確認一下 mongosh 的位置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$mongosh </span><br><span class="line"></span><br><span class="line"><span class="title class_">Connecting</span> <span class="attr">to</span>:          </span><br><span class="line"><span class="attr">mongodb</span>:<span class="comment">//127.0.0.1:27017/?directConnection=true&amp;serverSelectionTimeoutMS=2000&amp;appName=mongosh+1.8.0</span></span><br></pre></td></tr></table></figure><p>確認一下要連結到哪個DB</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">啟動 mopngosh 的情況</span><br><span class="line"></span><br><span class="line">show dbs</span><br></pre></td></tr></table></figure><p>再新增</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line">mongoose</span><br><span class="line">  .<span class="title function_">connect</span>(<span class="string">&quot;mongodb://127.0.0.1:27017/exampleDB&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功連結mongoDB&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>再終端機開啟 mongosh 的情況下 再開一個終端機執行 去看有沒有跑</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.<span class="property">js</span></span><br><span class="line"></span><br><span class="line">[nodemon] restarting due to changes...</span><br><span class="line">[nodemon] starting <span class="string">`node app.js`</span></span><br><span class="line">伺服器正在prot3000...</span><br><span class="line">成功連結mongoDB</span><br></pre></td></tr></table></figure><p>設定 schema </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Schema</span> &#125; = mongoose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> studentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">major</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">scholarship</span>: &#123;</span><br><span class="line">    <span class="attr">merit</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">other</span>: <span class="title class_">Number</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Student&quot;</span>, studentSchema);</span><br><span class="line"><span class="keyword">const</span> newObject = <span class="keyword">new</span> <span class="title class_">Student</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Esther&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">major</span>: <span class="string">&quot;Math&quot;</span>,</span><br><span class="line">  <span class="attr">scholarship</span>: &#123;</span><br><span class="line">    <span class="attr">merit</span>: <span class="number">6000</span>,</span><br><span class="line">    <span class="attr">other</span>: <span class="number">7000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">newObject</span><br><span class="line">  .<span class="title function_">save</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">saveObject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;資料已經儲存完畢，儲存的資料是&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(saveObject);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>執行 node.js 新增資料</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">node app.<span class="property">js</span></span><br><span class="line"></span><br><span class="line">伺服器正在prot3000...</span><br><span class="line">成功連結mongoDB</span><br><span class="line">資料已經儲存完畢，儲存的資料是</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Esther&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">major</span>: <span class="string">&#x27;Math&#x27;</span>,</span><br><span class="line">  <span class="attr">scholarship</span>: &#123; <span class="attr">merit</span>: <span class="number">6000</span>, <span class="attr">other</span>: <span class="number">7000</span> &#125;,</span><br><span class="line">  <span class="attr">_id</span>: <span class="keyword">new</span> <span class="title class_">ObjectId</span>(<span class="string">&quot;64350a818696853779c27ad0&quot;</span>),</span><br><span class="line">  <span class="attr">__v</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再 mogodb 可以用 db.students.find() 找到</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;6434f9fb6894bfb6d8854174&quot;</span>),</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Grace&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">    <span class="attr">major</span>: <span class="string">&#x27;Computer&#x27;</span>,</span><br><span class="line">    <span class="attr">schlarship</span>: &#123; <span class="attr">merit</span>: <span class="number">3000</span>, <span class="attr">other</span>: <span class="number">1500</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;64350a065bd049d1f30c1230&quot;</span>),</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Esther&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">major</span>: <span class="string">&#x27;Math&#x27;</span>,</span><br><span class="line">    <span class="attr">scholarship</span>: &#123; <span class="attr">merit</span>: <span class="number">6000</span>, <span class="attr">other</span>: <span class="number">7000</span> &#125;,</span><br><span class="line">    <span class="attr">__v</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;64350a818696853779c27ad0&quot;</span>),</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Esther&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">major</span>: <span class="string">&#x27;Math&#x27;</span>,</span><br><span class="line">    <span class="attr">scholarship</span>: &#123; <span class="attr">merit</span>: <span class="number">6000</span>, <span class="attr">other</span>: <span class="number">7000</span> &#125;,</span><br><span class="line">    <span class="attr">__v</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>查詢資料</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Student&quot;</span>, studentSchema);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">find</span>(&#123;&#125;)</span><br><span class="line">  .<span class="title function_">exec</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------ 可以改寫 async ------- </span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">Student</span>.<span class="title function_">find</span>().<span class="title function_">exec</span>();</span><br><span class="line">    res.<span class="title function_">send</span>(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加篩選條件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title class_">Student</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Grace&quot;</span> &#125;).<span class="title function_">exec</span>();</span><br><span class="line">    res.<span class="title function_">send</span>(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Mongooese-Middleware"><a href="#Mongooese-Middleware" class="headerlink" title="Mongooese Middleware"></a>Mongooese Middleware</h3><p>Mongoose Middleware 也就是 pre, post hooks 是在異步含是執行期間傳遞控制權的函數，Middleware是定義在Schema上的。</p><p>pre 就是什麼什麼之前</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個 Middleware</span></span><br><span class="line"><span class="title class_">Schema</span>.<span class="title function_">pre</span>(<span class="string">&#x27;save&#x27;</span>,callbackFn)</span><br><span class="line"></span><br><span class="line"><span class="comment">//任何與這個 Schema 有關的物件要被儲存前，這個 hook 內的 callbackFn會先被執行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//範例</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Schema</span> &#125; = mongoose;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"></span><br><span class="line">mongoose</span><br><span class="line">  .<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/exampleDB&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功連結mongoDB....&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> studentSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">maxlength</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">min</span>: [<span class="number">0</span>, <span class="string">&quot;年齡不能小於0&quot;</span>] &#125;,</span><br><span class="line">  <span class="attr">major</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">merit</span> &gt;= <span class="number">3000</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">enum</span>: [</span><br><span class="line">      <span class="string">&quot;Chemistry&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Computer Science&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Mathematics&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Civil Engineering&quot;</span>,</span><br><span class="line">      <span class="string">&quot;undecided&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">scholarship</span>: &#123;</span><br><span class="line">    <span class="attr">merit</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="attr">other</span>: &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// studentSchema.statics.findAllMajorStudents = function (major) &#123;</span></span><br><span class="line"><span class="comment">//   return this.find(&#123; major: major &#125;).exec();</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">studentSchema.<span class="title function_">static</span>(<span class="string">&quot;findAllMajorStudents&quot;</span>, <span class="keyword">function</span> (<span class="params">major</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">find</span>(&#123; <span class="attr">major</span>: major &#125;).<span class="title function_">exec</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">studentSchema.<span class="property">methods</span>.<span class="property">printTotalScholarship</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">merit</span> + <span class="variable language_">this</span>.<span class="property">scholarship</span>.<span class="property">other</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">studentSchema.<span class="title function_">pre</span>(<span class="string">&quot;save&quot;</span>, <span class="function">() =&gt;</span> &#123; <span class="comment">//在 save 之前要做的動作</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(<span class="string">&quot;record.txt&quot;</span>, <span class="string">&quot;A new data will be saved...&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e) <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Student</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Student&quot;</span>, studentSchema); <span class="comment">//  students</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newStudent = <span class="keyword">new</span> <span class="title class_">Student</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">major</span>: <span class="string">&quot;Computer Science&quot;</span>,</span><br><span class="line">  <span class="attr">scholarship</span>: &#123;</span><br><span class="line">    <span class="attr">merit</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">other</span>: <span class="number">1000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">newStudent</span><br><span class="line">  .<span class="title function_">save</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;資料已經儲存&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;伺服器正在聆聽port 3000....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;儲存格式&quot;&gt;&lt;a href=&quot;#儲存格式&quot; class=&quot;headerlink&quot; title=&quot;儲存格式&quot;&gt;&lt;/a&gt;儲存格式&lt;/h3&gt;&lt;p&gt;NoSQL 是用 object 來儲存&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="database" scheme="https://22aliang.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>MVC 模式</title>
    <link href="https://22aliang.github.io/2024/05/13/MVC%E6%A8%A1%E5%BC%8F%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    <id>https://22aliang.github.io/2024/05/13/MVC%E6%A8%A1%E5%BC%8F%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/</id>
    <published>2024-05-13T12:34:47.030Z</published>
    <updated>2024-05-13T12:54:25.919Z</updated>
    
    <content type="html"><![CDATA[<p>MVC ( Model View Controller ) 是軟體工程的一種 design pattern 軟體架構模式<br>把軟體系統分為三個基本部分 : 模型 Model 、視圖 View、控制器 Controller</p><span id="more"></span><p>Contranster Controller ⇒ 調用 模型Model ⇒ Render View</p><p>MVC模式目的是實現一種動態的程式設計，使後續修改、擴充簡化，並使程式某一部分重複利用</p><p>透過對複雜度簡化、使結構更直覺，對自身基本分離同時，賦予各基本部分應有的功能</p><p>現代網頁開發框架有 : Java Swing、ASP.NET、Ruby on Rails、Django、Laravel … 都是標準MVC design pattern</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/400px-MVC-Process.svg.png"></p><ul><li><p>模型 Model</p><p>  封裝應用程式邏輯相關的資料、對資料處理方法「Model」有對資料直接存取的權利，( 去跟資料庫要資料 )</p></li><li><p>視圖 View</p><p>  資料有目的顯示出來 ( EJS )</p></li><li><p>控制器 Controller</p><p>  控制應用程式的流程，處理事件並做出回應，「事件」包括使用者行為和Model的改變 ( app.js 、express routing )</p><p>  優點有以下</p></li></ul><ol><li><p>重複使用寫好的程式碼 : </p><p> model、view、controller 各司其職，不同 view 可以使用同一個 model 連結資料庫，產生不同的頁面，增加開發效率。</p></li><li><p>容易維護的程式碼 : </p><p> MVC 彼此獨立，將現有project 擴大、修改可以不破壞原有架構</p></li><li><p>團隊分工合作 : </p><p> view 可以由前端工程師美化、model、controller 由後端或資料庫人員負責</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;MVC ( Model View Controller ) 是軟體工程的一種 design pattern 軟體架構模式&lt;br&gt;把軟體系統分為三個基本部分 : 模型 Model 、視圖 View、控制器 Controller&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="backend," scheme="https://22aliang.github.io/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用指令</title>
    <link href="https://22aliang.github.io/2024/05/13/Git%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>https://22aliang.github.io/2024/05/13/Git%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</id>
    <published>2024-05-13T12:24:12.783Z</published>
    <updated>2024-05-13T12:53:59.143Z</updated>
    
    <content type="html"><![CDATA[<p>.gitigonre 檔案會讓檔案不被 git 追蹤</p><span id="more"></span><table><thead><tr><th>Git command</th><th>Description</th></tr></thead><tbody><tr><td>git init</td><td>初始化 &#x2F; 開始追蹤 git</td></tr><tr><td>git config –list</td><td>在 git 裡面的設定</td></tr><tr><td>git config –global <a href="http://user.name/">http://user.name</a> “name”</td><td>設定使用者</td></tr><tr><td>git config –global <a href="http://user.nameemail/">http://user.nameemail</a> “name”</td><td>設定聯絡信箱</td></tr><tr><td>git status</td><td>目前狀態</td></tr><tr><td>git add .</td><td>新增所有檔案到 Staging Area</td></tr><tr><td>git add *.html</td><td>新增所有 html 檔案到 Staging Area</td></tr><tr><td>git commit -m “Creat : 新東東”</td><td>新增 commit &amp; 他的訊息</td></tr><tr><td>git log</td><td>git 日誌</td></tr><tr><td>git branch branchName</td><td>新增 branch 分支 ( Feature 新功能分支 )</td></tr><tr><td>git checkout branchName</td><td>切換 git branch 分支</td></tr><tr><td>git merge branchName</td><td>合併分支</td></tr><tr><td>git remote add origin gitSSH</td><td>增加遠端資料庫</td></tr><tr><td>git push -u origin master</td><td></td></tr><tr><td>設定完後，之後可以省略成 git push</td><td>從本地端推指定 branch 到 遠端</td></tr><tr><td>git remote remove origin</td><td>移除遠端資料庫的設定</td></tr><tr><td>git pull gitSSH</td><td>更新遠端新版本到本地端</td></tr><tr><td>git clone gitSSH</td><td>如過電腦上沒有就用 clone</td></tr></tbody></table><p>git merge conflict 合併衝突<br>通常在 vscode 可以看衝突在哪裡發生<br>README.md<br>讓別人很快知道這個 project 在幹嘛</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;.gitigonre 檔案會讓檔案不被 git 追蹤&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="tips" scheme="https://22aliang.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Class Diagram 類別圖 基礎筆記</title>
    <link href="https://22aliang.github.io/2024/05/13/Class%20Diagram%20%E9%A1%9E%E5%88%A5%E5%9C%96%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    <id>https://22aliang.github.io/2024/05/13/Class%20Diagram%20%E9%A1%9E%E5%88%A5%E5%9C%96%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/</id>
    <published>2024-05-13T11:47:54.972Z</published>
    <updated>2024-05-13T12:24:01.873Z</updated>
    
    <content type="html"><![CDATA[<ul><li>類別圖描述了系統的類別集合，類別的屬性和類別之間的關係。</li></ul><span id="more"></span><h2 id="使用規則"><a href="#使用規則" class="headerlink" title="使用規則"></a>使用規則</h2><h3 id="關聯-Association"><a href="#關聯-Association" class="headerlink" title="關聯 (Association)"></a><strong>關聯 (Association)</strong></h3><blockquote><p><strong>以實線箭頭表示。</strong></p></blockquote><p>關聯關係使一個類別知道另外一個類別的屬性和方法；<br>通常含有「知道」、「瞭解」的含義。</p><ul><li>貓咪<strong>知道</strong>天氣情況</li></ul><h3 id="實作-Implementation"><a href="#實作-Implementation" class="headerlink" title="實作 (Implementation)"></a><strong>實作 (Implementation)</strong></h3><blockquote><p><strong>以空心三角形的虛線箭頭表示。</strong></p></blockquote><p>實作關係指的是一個 class 類別實現 interface 介面。</p><p>• 飛機<strong>實作</strong>可飛行介面</p><h3 id="聚合（Aggregation）"><a href="#聚合（Aggregation）" class="headerlink" title="聚合（Aggregation）"></a><strong>聚合（Aggregation）</strong></h3><blockquote><p><strong>以空心菱形的實線表示。</strong></p></blockquote><p>聚合關係是整體與部分的「弱」包含關係。部分類別可單獨存在，也可以屬於多個整體物件。</p><p><strong>描述has-a的關係</strong></p><ul><li>學校<strong>包含</strong>學生、課堂<strong>包含</strong>學生</li><li>學生可以單獨存在</li></ul><h3 id="組成（Composition）"><a href="#組成（Composition）" class="headerlink" title="組成（Composition）"></a><strong>組成（Composition）</strong></h3><blockquote><p><strong>以實心菱形的實線表示。</strong></p></blockquote><p>組成關係是整體與部分的「強」包含關係。部分類別無法單獨存在，其生命週期與整體相同。</p><p><strong>描述contains-a的關係</strong></p><ul><li>手錶<strong>包含</strong>時針、時鐘<strong>包含</strong>時針</li><li>時針無法單獨存在</li></ul><h3 id="繼承-Inheritance"><a href="#繼承-Inheritance" class="headerlink" title="繼承 (Inheritance)"></a><strong>繼承 (Inheritance)</strong></h3><blockquote><p><strong>以空心三角形的實線箭頭表示。</strong></p></blockquote><p>繼承關係指的是父類別擁有子類別的共有功能。而子類別可以視作父類別的特例。</p><p><strong>描述is-a的關係</strong></p><ul><li>學生<strong>是</strong>人的特例、工程師<strong>是</strong>人的特例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    note &quot;From Duck till Zebra&quot;</span><br><span class="line">    Animal &lt;|-- Duck</span><br><span class="line">    note for Duck &quot;can fly\ncan swim\ncan dive\ncan help in debugging&quot;</span><br><span class="line">    Animal &lt;|-- Fish</span><br><span class="line">    Animal &lt;|-- Zebra</span><br><span class="line">    Animal : +int age</span><br><span class="line">    Animal : +String gender</span><br><span class="line">    Animal: +isMammal()</span><br><span class="line">    Animal: +mate()</span><br><span class="line">    class Duck&#123;</span><br><span class="line">        +String beakColor</span><br><span class="line">        +swim()</span><br><span class="line">        +quack()</span><br><span class="line">    &#125;</span><br><span class="line">    class Fish&#123;</span><br><span class="line">        -int sizeInFeet</span><br><span class="line">        -canEat()</span><br><span class="line">    &#125;</span><br><span class="line">    class Zebra&#123;</span><br><span class="line">        +bool is_wild</span><br><span class="line">        +run()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    class BankAccount</span><br><span class="line">    BankAccount : +String owner</span><br><span class="line">    BankAccount : +Bigdecimal balance</span><br><span class="line">    BankAccount : +deposit(amount)</span><br><span class="line">    BankAccount : +withdrawal(amount)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    class Animal</span><br><span class="line">    Vehicle &lt;|-- Car</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    class `Animal Class!`</span><br><span class="line">    class `Car Class`</span><br><span class="line">    `Animal Class!` --&gt; `Car Class`</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">class BankAccount</span><br><span class="line">BankAccount : +String owner</span><br><span class="line">BankAccount : +BigDecimal balance</span><br><span class="line">BankAccount : +deposit(amount)</span><br><span class="line">BankAccount : +withdrawal(amount)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">class BankAccount&#123;</span><br><span class="line">    +String owner</span><br><span class="line">    +BigDecimal balance</span><br><span class="line">    +deposit(amount)</span><br><span class="line">    +withdrawal(amount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>&lt;</td><td>–</td></tr><tr><td>*–</td><td>Composition</td></tr><tr><td>o–</td><td>Aggregation</td></tr><tr><td>–&gt;</td><td>Association</td></tr><tr><td>–</td><td>Link (Solid)</td></tr><tr><td>..&gt;</td><td>Dependency</td></tr><tr><td>..</td><td>&gt;</td></tr><tr><td>..</td><td>Link (Dashed)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">classA &lt;|-- classB</span><br><span class="line">classC *-- classD</span><br><span class="line">classE o-- classF</span><br><span class="line">classG &lt;-- classH</span><br><span class="line">classI -- classJ</span><br><span class="line">classK &lt;.. classL</span><br><span class="line">classM &lt;|.. classN</span><br><span class="line">classO .. classP</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">classA --|&gt; classB : Inheritance</span><br><span class="line">classC --* classD : Composition</span><br><span class="line">classE --o classF : Aggregation</span><br><span class="line">classG --&gt; classH : Association</span><br><span class="line">classI -- classJ : Link(Solid)</span><br><span class="line">classK ..&gt; classL : Dependency</span><br><span class="line">classM ..|&gt; classN : Realization</span><br><span class="line">classO .. classP : Link(Dashed)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">classA &lt;|-- classB : implements</span><br><span class="line">classC *-- classD : composition</span><br><span class="line">classE o-- classF : aggregation</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    Animal &lt;|--|&gt; Zebra</span><br></pre></td></tr></table></figure><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>&lt;</td><td></td></tr><tr><td>*</td><td>Composition</td></tr><tr><td>o</td><td>Aggregation</td></tr><tr><td>&gt;</td><td>Association</td></tr><tr><td>&lt;</td><td>Association</td></tr><tr><td></td><td>&gt;</td></tr></tbody></table><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>–</td><td>Solid</td></tr><tr><td>..</td><td>Dashed</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;類別圖描述了系統的類別集合，類別的屬性和類別之間的關係。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="tips" scheme="https://22aliang.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>NPM 基礎筆記 Node Package Manager</title>
    <link href="https://22aliang.github.io/2024/05/13/NPM%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98%20Node%20Package%20Manager/"/>
    <id>https://22aliang.github.io/2024/05/13/NPM%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98%20Node%20Package%20Manager/</id>
    <published>2024-05-13T11:46:14.270Z</published>
    <updated>2024-05-13T12:03:17.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NPM-套件管理工具"><a href="#NPM-套件管理工具" class="headerlink" title="NPM 套件管理工具"></a>NPM 套件管理工具</h1><p><a href="https://www.npmjs.com/">NPM</a>(Node Package Manager) 是 Node.js 的套件管理工具，負責管理專案使用的模組，像是模組的下載、版本、移除…等</p><span id="more"></span><ol><li>下載 Node.js <a href="https://nodejs.org/en/">官網</a><ol><li>安裝 LTS 長期支援版本 ( 最新可能不穩定 )</li></ol></li><li>vs code terminal 中輸入 <code>node -v</code>  <code>npm -v</code> 回覆版本號即成功</li><li><code>npm init</code> 初始化<ul><li>name - 專案名稱：全小寫，單字之間用 - 隔開</li><li>version - 專案版本</li><li>description - 專案描述</li><li>main - 程式起始點 (非套件的前端專案不用理會，預設為 index.js)</li><li>script - 自定義腳本</li><li>author - 專案作者：格式請用 ”姓名 <Email> (個人網站連結)“</li><li>license - 授權許可</li></ul></li><li>產生 <code>package.json</code><ol><li>後續安裝的套件會同步紀錄再此文件裡</li><li>專案初始化，並提供預設值 <code>npm init -y</code></li></ol></li><li>npm <a href="https://www.npmjs.com/">官網</a></li><li>搜尋套件 輸入以下指令 會下載套件到專案裡<ol><li>輸入指令  <code>npm i bootstrap</code>  、 <code>npm install bootstrap</code></li><li><code>npm install</code> 會偵測 package.json 裡面的 dependencies 有的模組，再下載安裝 ( 別人的npm 專案不會有<code>node_modules</code> )</li></ol></li></ol><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be661f24-b603-402b-8ec0-bbf3a49b5d17/Untitled.png" alt="Untitled"></p><ol><li><p>下載套件會放在 <code>node_modules</code> 的資料夾裡</p><ol><li><code>package-lock.json</code> 會同時自動產生相關紀錄</li></ol></li><li><p><code>npm install webpack ==save=dev</code></p></li></ol><h3 id="NPM-全域安裝-g"><a href="#NPM-全域安裝-g" class="headerlink" title="NPM 全域安裝 -g"></a>NPM 全域安裝 -g</h3><p>如果專案資料夾沒有套件，它會往電腦的根目錄上找</p><p><code>npm install 套件 -g</code>  會安裝到全域 ( 自己電腦裡 ) 的預設資料夾內</p><p>mac : 權限問題 sudo &#x2F; 帳號密碼</p><aside>💡  寫測試 jest、mocha、express 會用到全域</aside><h3 id="–save、–save-dev-指令差異"><a href="#–save、–save-dev-指令差異" class="headerlink" title="–save、–save-dev 指令差異"></a><strong>–save、–save-dev 指令差異</strong></h3><p><code>npm i 套件 --save-dev</code> 只會在開發中用到，節省bulid時間</p><p>安裝並加入 <strong>devDependencies</strong></p><p><code>npm i 套件 --save</code>  <strong>|</strong> 新版預設不用加</p><p>安裝並加入 <strong>dependencies</strong> </p><p><code>npm update 套件</code>  更新套件</p><p><code>npm uninstall 套件</code> 移除套件</p><aside>💡 也可以移除全域上的套件 -g</aside><aside>💡 在**devDependencies**中，也可以手動套件增加並指定版本號，記得執行install就好</aside><h3 id="NPM-script-自訂指令"><a href="#NPM-script-自訂指令" class="headerlink" title="NPM script 自訂指令"></a>NPM script 自訂指令</h3><p>寫在package的script裡面，測試的指令 “test” 加逗號</p><p><code>npm run</code> 指令</p><p><a href="https://github.com/22aliang/github-slideshow/blob/main/README.md">github-slideshow&#x2F;README.md at main · 22aliang&#x2F;github-slideshow</a></p><hr><p>名詞解釋</p><ul><li>CLI - Commond Line Interface：對應的是 GUI (圖形化介面)，CLI 通常只支援 <strong>鍵盤輸入指令</strong> ，不支援滑鼠操作。像是 Windows 的 <strong>命令提示字元</strong> 、 <strong>PowerShell</strong> 或是 Mac 的 <strong>terminal</strong> 都是CLI工具</li><li>CLI Commond - 指令：在 CLI 中，沒有圖形化的介面，所有事情都是靠指令完成，像是 <code>mkdir &lt;name&gt;</code> ， mkdir 就是一個 <strong>指令</strong> 用來建立資料夾，後面的<name>就是資料夾的名稱。</li></ul><p>查看版本 | <code>npm -v</code> </p><p>專案初始化 | <code>npm init</code></p><ol><li><code>npm init -y</code>  | 載入預設專案相關資料</li></ol><ul><li>會生成 package.json 儲存 npm 下載套件名稱、版本</li><li>建立專案起手式</li><li>安裝npm下載套件一定要輸入</li></ul><p>本地、本機全域安裝 <code>-g</code> |<br>專案安裝  開發完成後仍會用到的 <strong>依賴套件dependencies</strong> <code>--save</code> | 只有開發才會用到的 <strong>開發依賴套件devDependencies</strong> <code>--save-dev</code></p><p>移除套件 | <code>npm uninstall [套件名稱]</code></p><p>移除本機套件 | <code>npm uninstall -g [套件名稱]</code></p><p>還原專案套件 | <code>npm install</code></p><ul><li>呼喚node_modules黑洞的咒語</li></ul><p><code>hexo d -g</code> 這一段的意思就是我要生成靜態網頁並部署</p><h3 id="NVM-切換-NPM-版本"><a href="#NVM-切換-NPM-版本" class="headerlink" title="NVM 切換 NPM 版本"></a>NVM 切換 NPM 版本</h3><p><code>.npmrc</code><br>，參考一下<a href="https://docs.npmjs.com/files/npmrc">官方的文件</a></p><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td>command -v nvm</td><td>檢查 nvm 是否安裝成功，如果是會輸出 nvm</td></tr><tr><td>nvm ls-remote</td><td>查看目前可安裝版本</td></tr><tr><td>nvm ls-remote</td><td>篩選特定版本</td></tr><tr><td>nvm install</td><td>安裝特定版本</td></tr><tr><td>nvm ls</td><td>查看本地目前安裝的版本</td></tr><tr><td>nvm use</td><td>切換版本，但切換視窗會回到預設版本</td></tr><tr><td>nvm alias default</td><td>更改預設版本</td></tr></tbody></table><p><code>npm config list</code>  檢查資料夾位置</p><p><a href="https://www.wfublog.com/2022/05/nodejs-module-not-found.html">config 全域問題</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;NPM-套件管理工具&quot;&gt;&lt;a href=&quot;#NPM-套件管理工具&quot; class=&quot;headerlink&quot; title=&quot;NPM 套件管理工具&quot;&gt;&lt;/a&gt;NPM 套件管理工具&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;(Node Package Manager) 是 Node.js 的套件管理工具，負責管理專案使用的模組，像是模組的下載、版本、移除…等&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="npm, tips, tool" scheme="https://22aliang.github.io/tags/npm-tips-tool/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 常見快捷鍵 Keyboard shortcut</title>
    <link href="https://22aliang.github.io/2024/05/13/VS%20Code%20%E5%B8%B8%E8%A6%8B%E5%BF%AB%E6%8D%B7%E9%8D%B5%20Keyboard%20shortcut/"/>
    <id>https://22aliang.github.io/2024/05/13/VS%20Code%20%E5%B8%B8%E8%A6%8B%E5%BF%AB%E6%8D%B7%E9%8D%B5%20Keyboard%20shortcut/</id>
    <published>2024-05-13T11:40:13.731Z</published>
    <updated>2024-05-13T12:54:32.611Z</updated>
    
    <content type="html"><![CDATA[<p>Ctrl + H：尋找&#x2F;取代當前視窗</p><span id="more"></span><p>Ctrl + Shift + H：尋找&#x2F;取代所有工作區檔案</p><p>Ctrl + W：關閉當前視窗</p><p>Ctrl + K + W：關閉所有視窗</p><p>Alt + Shift + F：格式化(縮排對齊)整份文件</p><p>Alt + B：開啟網頁 (需安裝 open in browser 套件才有效果)</p><p>Alt + L + O：開啟網頁 (需安裝 Live server 套件才有效果)</p><pre><code>→ 請確認，電腦針對 *.html類型 預設開啟的應用程式是什麼? ←→ 若擴充套件採用電腦中預設的應用程式打開需另外調整此設定 ←</code></pre><p>Alt + ↑ &#x2F; ↓：可以搬移程式碼(可以多行)</p><p>Alt + Shift + ↑ &#x2F; ↓：可以複製一行</p><p>Alt + Shift + 滑鼠左鍵：直欄選取</p><p>Ctrl + N：開啟新視窗</p><p>Ctrl + S：存檔</p><p>Ctrl + Z：回上一步</p><p>Ctrl + R：切換工作區</p><p>Ctrl + P：開啟選單輸入檔案名稱直接開啟檔案</p><p>Ctrl + &#x2F;：註解 或取消註解</p><p>Ctrl + K + C：註解 或取消註解</p><p>Ctrl + D：可以針對範圍內所選取到相同的文字進行集體修改</p><p>Ctrl + Shift + L 一次選取檔案內所有相同的文字</p><p>Ctrl + Shift + K 整行刪除</p><blockquote><p>官方 | <a href="https://code.visualstudio.com/docs/getstarted/keybindings">https://code.visualstudio.com/docs/getstarted/keybindings</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ctrl + H：尋找&amp;#x2F;取代當前視窗&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="html,tips" scheme="https://22aliang.github.io/tags/html-tips/"/>
    
  </entry>
  
  <entry>
    <title>User Snippet 自訂快捷鍵</title>
    <link href="https://22aliang.github.io/2024/05/13/User%20Snippet%20%E8%87%AA%E8%A8%82%E5%BF%AB%E6%8D%B7%E9%8D%B5/"/>
    <id>https://22aliang.github.io/2024/05/13/User%20Snippet%20%E8%87%AA%E8%A8%82%E5%BF%AB%E6%8D%B7%E9%8D%B5/</id>
    <published>2024-05-13T11:29:06.650Z</published>
    <updated>2024-05-13T11:40:12.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>每個 user snippet 可以設定名稱、程式碼主體、描述以及trigger，trigger是指我們要打什麼才會觸發 snippet</li><li>在 <a href="https://snippet-generator.app/?description=&tabtrigger=&snippet=&mode=vscode">snippet-generator</a> 中貼上你的語言 user snippet<span id="more"></span></li></ul><p><img src="https://i.imgur.com/0nDe5Zx.png" alt="Untitled"></p><ul><li>右下角 copy</li><li>打開文字編輯器 vs code</li><li>右下角 &gt; 使用者程式片段</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每個 user snippet 可以設定名稱、程式碼主體、描述以及trigger，trigger是指我們要打什麼才會觸發 snippet&lt;/li&gt;
&lt;li&gt;在 &lt;a href=&quot;https://snippet-generator.app/?description=&amp;tabtrigger=&amp;snippet=&amp;mode=vscode&quot;&gt;snippet-generator&lt;/a&gt; 中貼上你的語言 user snippet</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="html,tips" scheme="https://22aliang.github.io/tags/html-tips/"/>
    
  </entry>
  
  <entry>
    <title>html基礎筆記</title>
    <link href="https://22aliang.github.io/2024/05/13/JS%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    <id>https://22aliang.github.io/2024/05/13/JS%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/</id>
    <published>2024-05-13T11:26:30.746Z</published>
    <updated>2024-05-13T11:55:35.142Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li>可以使用單引號也可以使用雙引號</li><li></li></ul><h2 id="JavaScrtop-引擎"><a href="#JavaScrtop-引擎" class="headerlink" title="JavaScrtop 引擎"></a>JavaScrtop 引擎</h2><p>javascript 並不是任何程式語言所寫成，他是歐洲電腦製造協會 ECMA 所制定的標準。</p><p>瀏覽器內部的 JavaScript 引擎會遵從 ECMA 標準處理 JS</p><p>目前最有名的更新在 2015，被稱為 ECMA2015 或是 ES6</p><span id="more"></span><ul><li>可以使用<code>getElementById()</code>更改HTML的內容</li></ul><p>以下程式碼舉例，只要點擊”點我”按鈕，就可以將”JavaScript 可以改變 HTML 的內容”這段文本內容，改成”變魔法囉”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;JavaScript 可以改變 HTML 的內容&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&#x27;document.getElementById(&quot;demo&quot;).innerHTML = &quot;變魔法囉&quot;&#x27;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><ul><li><p>可以使用<code>getElementById()</code>更改HTML的圖片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=&quot;document.getElementById(&#x27;myImage&#x27;).src=&#x27;pic_bulbon.gif&#x27;&quot;&gt;點我換成第一張圖片&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;img id=&quot;myImage&quot; src=&quot;pic_bulboff.gif&quot; style=&quot;width:100px&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick=&quot;document.getElementById(&#x27;myImage&#x27;).src=&#x27;pic_bulboff.gif&#x27;&quot;&gt;點我換成第二張圖片&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p>可以使用<code>getElementById()</code>更改CSS的樣式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;JavaScript 可以更改 HTML 的樣式&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&#x27;demo&#x27;).style.fontSize=&#x27;35px&#x27;&quot;&gt;點擊我更換字體大小&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p>可以使用<code>getElementById()</code>隱藏HTML元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;JavaScript 可以隱藏 HTML 的元素&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&#x27;demo&#x27;).style.display=&#x27;none&#x27;&quot;&gt;點擊我將HTML元素隱藏起來&lt;/button&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="JavaScript-顯示可能性"><a href="#JavaScript-顯示可能性" class="headerlink" title="JavaScript 顯示可能性"></a>JavaScript 顯示可能性</h3><ul><li>JavaScript有幾種顯示屬性的方法<ul><li>寫入 HTML 元素<code>innerHTML</code>，以下範例會跑出11<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = 5 + 6;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>寫入 HTML 輸出<code>document.write()</code> <ul><li>只用於測試，會刪除現有的HTML</li></ul></li><li>寫入警報框<code>window.alert()</code><ul><li><code>window</code>不寫也是預設屬性，且跳出的視窗可選擇文字，以下範例會跳出11</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">alert(5 + 6);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><pre><code>- 寫入瀏覽器控制台`console.log()`    - 用於測試- 可列印當前網頁的`window.print()`指令</code></pre><h3 id="JavaScript-語句Statements"><a href="#JavaScript-語句Statements" class="headerlink" title="JavaScript 語句Statements"></a>JavaScript 語句Statements</h3><ul><li>大部分的JavaScript程序都有許多JavaScript語句，以順序一一執行</li><li>由值Values, 運算符Operators, 表達式Expressions, 關鍵字Keywords,註解Comments組成<ul><li>有兩種類型的值Values : 固定值Fixed values、變數值Variable values<ul><li>固定值的字符串是文本，寫在雙引號貨單引號內</li><li>變數值使用 <code>var</code>、<code>let</code>、<code>const</code>來聲明變數，等號 &#x3D; 賦予值</li></ul></li><li>運算符Operators，使用<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>來計算值，等號 &#x3D; 變數為賦值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let x, y;</span><br><span class="line">x = 5;</span><br><span class="line">y = 6;</span><br></pre></td></tr></table></figure></li><li>表達式Expressions是值、變數、運算符的組合，計算一個值<ul><li>可以包含未知數</li><li>可以是各種類型，像數字+字符</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 * 10</span><br><span class="line">x * 10</span><br><span class="line">&quot;John&quot; + &quot; &quot; + &quot;Doe&quot;</span><br></pre></td></tr></table></figure><pre><code>- 關鍵字Keywords是標示要執行的操作，使用`let`、`var`來定義- 註解Comments寫在`//`之後、或`/*`和`*/`之間</code></pre><table><thead><tr><th>關鍵詞</th><th>描述</th></tr></thead><tbody><tr><td>var</td><td>聲明一個變量</td></tr><tr><td>let</td><td>聲明一個塊變量</td></tr><tr><td>const</td><td>聲明一個塊常量</td></tr><tr><td>if</td><td>標記要在條件下執行的語句塊</td></tr><tr><td>switch</td><td>標記要在不同情況下執行的語句塊</td></tr><tr><td>for</td><td>標記要在循環中執行的語句塊</td></tr><tr><td>function</td><td>聲明一個函數</td></tr><tr><td>return</td><td>退出函數</td></tr><tr><td>try</td><td>對語句塊實施錯誤處理</td></tr></tbody></table><blockquote><p>關鍵字不能作為變數</p></blockquote><h3 id="JavaScript-的let"><a href="#JavaScript-的let" class="headerlink" title="JavaScript 的let"></a>JavaScript 的<code>let</code></h3><p><code>let</code>有以下幾種特性</p><ul><li>定義變數的let不能重新聲明<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let x = &quot;John Doe&quot;;</span><br><span class="line">let x = 0;</span><br><span class="line">打妹 ! </span><br></pre></td></tr></table></figure></li><li>定義變數的let必須在使用前聲明</li><li>定義變數的let具有塊範圍 Block Scope<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let x = 2;</span><br><span class="line">&#125;</span><br><span class="line">// x 不能被使用在&#123;&#125;花括弧以外</span><br></pre></td></tr></table></figure>因此下面的情況可以被允許出現，且X變數的狀況會變成以下狀況<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let x = 10;</span><br><span class="line">// 這裡的X變數的值是10</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">let x = 2;</span><br><span class="line">// 這裡的X變數的值是2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 這裡的X變數的值是10</span><br></pre></td></tr></table></figure></li></ul><h3 id="JavaScript-的const"><a href="#JavaScript-的const" class="headerlink" title="JavaScript 的const"></a>JavaScript 的<code>const</code></h3><p><code>const</code>有以下幾種特性</p><ul><li>定義變數的const不能重新聲明 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const PI = 3.141592653589793;</span><br><span class="line">PI = 3.14;      // const的變數不能更改，這行是錯的</span><br><span class="line">PI = PI + 10;   // 這行也是錯的</span><br></pre></td></tr></table></figure></li><li>用定義變數的const不能重新分配<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];</span><br><span class="line"></span><br><span class="line">//你可以改變元素</span><br><span class="line">cars[0] = &quot;Toyota&quot;;</span><br><span class="line"></span><br><span class="line">// 你可以增加元素</span><br><span class="line">cars.push(&quot;Audi&quot;);</span><br><span class="line"></span><br><span class="line">cars = [&quot;Toyota&quot;, &quot;Volvo&quot;, &quot;Audi&quot;];    // 但你不能重新分配 打妹 !</span><br></pre></td></tr></table></figure></li><li>const變數在聲明時必須賦值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const PI = 3.14159265359;</span><br></pre></td></tr></table></figure></li><li>定義變數的const具有塊作用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const x = 10;</span><br><span class="line">// 這裡的X變數的值是10</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">const x = 2;</span><br><span class="line">// 這裡的X變數的值是2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 這裡的X變數的值是10</span><br></pre></td></tr></table></figure></li></ul><h3 id="JavaScript運算符"><a href="#JavaScript運算符" class="headerlink" title="JavaScript運算符"></a>JavaScript運算符</h3><ul><li><code>=</code>為賦予值</li><li><code>+</code>將值相加</li><li><code>*</code>將值相乘</li><li><code>/</code>將值相除<br>變數可以用值相加來取名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let text1 = &quot;我&quot;;</span><br><span class="line">let text2 = &quot;中途斷賽&quot;;</span><br><span class="line">let text3 = text1 + &quot; &quot; + text2;</span><br></pre></td></tr></table></figure>最後結果會變成<br><code>我 中途斷賽</code></li></ul><p><code>+=</code>可以變成合併技</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let text1 = &quot;斷賽&quot;;</span><br><span class="line">text1 += &quot;在第14天&quot;;</span><br></pre></td></tr></table></figure><p>最終結果會變成<br><code>斷賽在第14天</code></p><p>前面有說字串會用雙引號、單引號標註，那運用在數字就會有以下組合技的不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let x = 5 + 5;</span><br><span class="line">let y = &quot;5&quot; + 5;</span><br><span class="line">let z = &quot;Hello&quot; + 5;</span><br></pre></td></tr></table></figure><p>x &#x3D; 10<br>y &#x3D; 55<br>z &#x3D; Hello5</p><h3 id="三元運算子Ternary-Operator"><a href="#三元運算子Ternary-Operator" class="headerlink" title="三元運算子Ternary Operator"></a>三元運算子Ternary Operator</h3><p>通常被用來當作 if 的簡潔寫法，一個條件後面跟著一個問號 ( ? )</p><p>條件 truthy 在冒號 : 前的表達式會被執行、條件 falsy 冒號後面表達式會被執行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? expressionfTrue : expressionIfFalse</span><br></pre></td></tr></table></figure><!-- more --><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> price;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( age &lt; <span class="number">18</span> ) &#123;</span><br><span class="line">price = <span class="number">50</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">price = <span class="number">150</span>;</span><br><span class="line">&#125;</span><br><span class="line">---- 改寫 ----</span><br><span class="line">age &lt; <span class="number">18</span> ? <span class="number">50</span> : <span class="number">150</span>;</span><br></pre></td></tr></table></figure><h3 id="Default-Parameters-預設參數"><a href="#Default-Parameters-預設參數" class="headerlink" title="Default Parameters 預設參數"></a>Default Parameters 預設參數</h3><p>當調用了 function 沒有給定足夠數量的 arguments 參數，parameter 會被設定 undefined </p><p>若在 function 設定 Default Parameters 預設參數就可以避免這種情況</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span> (a , b)  &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b) <span class="comment">// 5 undefined</span></span><br><span class="line"><span class="keyword">return</span> a * b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">5</span>)) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----- 若沒有 Default Parameters 會寫成這樣 -----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a , b</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ( a == <span class="literal">undefined</span>) &#123;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( b == <span class="literal">undefined</span>) &#123;</span><br><span class="line">b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a * b ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---- JS 有支援 Default Parameters -----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a = <span class="number">1</span>, b = <span class="number">1</span></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Backtick-反引號"><a href="#Backtick-反引號" class="headerlink" title="Backtick 反引號  "></a>Backtick 反引號 <code> </code></h3><p>跟單引號、雙引號是一樣的，但通常是一個句子中要用文字、變數中會用到</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line"><span class="string">`Wilson的年齡是<span class="subst">$&#123;age&#125;</span>`</span></span><br></pre></td></tr></table></figure><h3 id="Stong-Typing-強型別-amp-Weak-Typing-弱型別"><a href="#Stong-Typing-強型別-amp-Weak-Typing-弱型別" class="headerlink" title="Stong Typing 強型別 &amp; Weak Typing 弱型別"></a>Stong Typing 強型別 &amp; Weak Typing 弱型別</h3><p>在電腦科學、程式設計中，經常將程式語言的型別系統分為 Stong 、 Weak 兩種</p><p>這兩個術語並沒有非常明確的定義，主要是描述混入不同資料型別的值進行運算時的處理方式，</p><h3 id="Dynamic-Typed-動態型別-amp-Static-Typed-靜態型別"><a href="#Dynamic-Typed-動態型別-amp-Static-Typed-靜態型別" class="headerlink" title="Dynamic Typed 動態型別 &amp; Static Typed 靜態型別"></a>Dynamic Typed 動態型別 &amp; Static Typed 靜態型別</h3><ul><li>Static Typed 靜態型別是指，編譯器 compiler 在編譯時檢查資料類別 ( JAVA 會被編譯成 .class )</li><li>Dynamic Types 動態型別，運行時才檢查  ( JavaScript )</li></ul><p>Static Typed 通常執行的更快，因為編譯器知道正在使用確切的數據類型時，它可以生成優化的機器代碼 machine code 來運行程式，因為也不用邊運行邊檢查，所以記憶體使用也比較少。</p><h3 id="IIFE-Immediately-Invoked-Function-Expression-立即函數表達式"><a href="#IIFE-Immediately-Invoked-Function-Expression-立即函數表達式" class="headerlink" title="IIFE Immediately Invoked Function Expression 立即函數表達式"></a>IIFE Immediately Invoked Function Expression 立即函數表達式</h3><p>在定義後會立即運行，通常也只會一次，名字也不重要，所以就會用 IIFE 語法</p><p>當我們在想要避免汙染 global namic space ，或立即執行匿名 function ( 例如伺服器程式碼內部 )</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//這個括號是表達式，也可以放 arror</span></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;)() <span class="comment">//()直接執行這個函式</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;)();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//或是</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(() =&gt; &#123;</span></span><br><span class="line"><span class="string">console.log(&#x27;</span>hello<span class="string">&#x27;)&#x27;</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = <span class="string">&#x27;你好嗎&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Destructuring-Assignment-解構"><a href="#Destructuring-Assignment-解構" class="headerlink" title="Destructuring Assignment 解構"></a>Destructuring Assignment 解構</h3><p>是一種 JS 語法，將 array 中的值 或 object 中的屬性 unpack 拆開到不同的變量中<br>常見在伺服器的程式碼中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b] = array;</span><br><span class="line"><span class="keyword">const</span> [a, b, ...rest] = array;</span><br><span class="line"><span class="keyword">const</span> &#123;a, b&#125; = obj;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1 = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> a2 = arr[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//--- 可以改寫成 ---</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ a1, a2, a3, a4, a5, a6, a7] = arr ; <span class="comment">//Destructuring Assignment </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1) <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [a1, a2 ...everything]</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Wilson</span> = &#123;</span><br><span class="line">name : <span class="string">&quot;wilson Ren&quot;</span></span><br><span class="line"><span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般寫法</span></span><br><span class="line"><span class="keyword">let</span> location = <span class="title class_">Wilson</span>.<span class="property">age</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//destruturing assigment</span></span><br><span class="line"><span class="keyword">let</span> &#123; age &#125; = wilson; </span><br><span class="line"><span class="comment">// 尋找 wilson 物件中 age 的屬性，並把它存到 age 這個新的變數裡</span></span><br><span class="line"><span class="comment">// 也可以一次解構很多</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">//26</span></span><br></pre></td></tr></table></figure><h3 id="Switch-Statement"><a href="#Switch-Statement" class="headerlink" title="Switch Statement"></a>Switch Statement</h3><h3 id="錯誤處理"><a href="#錯誤處理" class="headerlink" title="錯誤處理"></a>錯誤處理</h3><p>在 JS 中，要執行一段可能會出錯的程式，則可以將程式放入 try… catch… 中，常在後端使用，避免一小段程式碼錯誤，導致整個程式不能使用的狀況。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//try 執行可能出錯的語句</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">tryStatments </span><br><span class="line"><span class="comment">//如果try出錯，執行 catch</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (exceptionVar) &#123; <span class="comment">//保存catch捕獲的錯誤</span></span><br><span class="line">catchStatements</span><br><span class="line"><span class="comment">// 無論是否發生異常，都一定會執行 finally </span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">finallyStatements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--- 可使用 ---</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>... <span class="keyword">catch</span>...</span><br><span class="line"><span class="keyword">try</span>... <span class="keyword">finally</span>...</span><br><span class="line"><span class="keyword">try</span>... <span class="keyword">catch</span>... <span class="keyword">finally</span>...</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="title function_">whatevery</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有<span class="subst">$&#123;err&#125;</span>導致的錯誤`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JS 發生的錯誤</span></span><br><span class="line"><span class="comment">// 會自動被做成一個 Error Object</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="title function_">whatevery</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">TypeError</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TypeError錯誤&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> referenceError) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;referenceError錯誤&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;發生其他錯誤&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不管有無錯誤，都會被執行的程式碼&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----- 用到 finally 常見用法 ----</span></span><br><span class="line"><span class="comment">//用程式碼打開檔案</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">openMyFile</span>();</span><br><span class="line"><span class="comment">//如果電腦內存滿了、儲存空間滿了</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="title function_">writeFile</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="title function_">handleWriteFileError</span>();</span><br><span class="line"><span class="comment">//不管有沒有打開，都要關起來</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="title function_">closeMyFile</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Instanceof-operator"><a href="#Instanceof-operator" class="headerlink" title="Instanceof operator"></a>Instanceof operator</h3><p>是 JS 中檢查物件是否為 class 類別的實例 instance</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> <span class="title class_">Class</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructuor</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Mike&#x27;</span>) <span class="comment">//mike 是 Person 製作的新物件</span></span><br><span class="line"><span class="comment">// 在JS中 我們會說一個物件是 object , instance</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mike <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">counstrcutor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Asynchronous-JavaScript-非同步"><a href="#Asynchronous-JavaScript-非同步" class="headerlink" title="Asynchronous JavaScript 非同步"></a>Asynchronous JavaScript 非同步</h1><p>Q: Promise 與 Async、Await 有什麼關係？</p><p>Promise 是用來優化非同步的語法，而 Async、Await 可以基於 Promise 讓非同步的語法的結構類似於 “同步語言”，更易讀且好管理。</p><p>async 強制讓 promise 乖乖排隊</p><p>fetch() 處理 HTTP 寄送收發 、 async 創建非同步函式 ( 裡面可以用 await)</p><p>Axios 是套件，提供了更簡單和一致的 API 設計，具有更好的可用性和支持性，取到的值也直接是JSON 不用 exce() 、json()。Fetch API 則是一個簡單的 Web API，可以在現代瀏覽器中直接使用，但需要更多的手動設置和處理</p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>AJAX 全名 Asynchronous JavaScript and XML 非同步的 JavaScript 與 XML 技術<br>是一套綜合了多項技術的瀏覽器端網頁開發技術</p><p>AJAX 客戶端使用各種 Web 技術來創建異步 asynchronous Web 應用程序，可以在背景從服務器發送、獲得數據，而不干擾現有頁面的顯示和行為。</p><p>透過將數據交換層和表示層分離，Ajax 允許網頁、擴展Web 應用程續動態更改內容，無須重新加載整個頁面，數據傳送常見 JSON。</p><p>常見 Ajax 例子，YT 或 Google 搜尋時，會根據前面打的字猜測搜尋關鍵字。</p><p>圖左是傳統、圖右是目前的方法<br>簡單來說舊的會傳送 html + css<br>新的會把 html + css 留在本地端，只跟 server 傳送 JSON 檔案，在渲染在檔案上</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/08774e89-5705-4b54-9a9e-8803efd5bc5d/Untitled.png" alt="Untitled"></p><h3 id="同步與異步"><a href="#同步與異步" class="headerlink" title="同步與異步"></a>同步與異步</h3><p>在計算機程式中，異步 asynchronous 代表一個 process 獨立於其他 process 運行<br>同步 synchronous 代表一個 process 僅在某個其他 process 完成或移交後運行</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0d9e1dd4-184b-41e6-9040-91c75d623f61/Untitled.png" alt="Untitled"></p><p>JavaScript 的特性是 single-threaded synchronous 一次只做一件事情的程式語言 也就是單線程 </p><p>JS 有內建的 asynchronous function 例如 : setTimeout()，設置一個計時器，時間到就執行 function</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(code, delay)</span><br><span class="line"><span class="comment">// code 是 delay 結束時要執行的程式碼</span></span><br><span class="line"><span class="comment">// delay 是執行前計時器等待時間 ( 毫秒為單位 ) 預設為 0 ( 立即 )</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Here is the code&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"><span class="comment">//start</span></span><br><span class="line"><span class="comment">//end</span></span><br><span class="line"><span class="comment">//Here is the code</span></span><br></pre></td></tr></table></figure><p>在程式設計中，使用非同步方式需要使用特殊的技術，例如使用 Callback Function 回撥函數、Promise 物件或 async&#x2F;await 等方法。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>是現代 JS 中異步編程的基礎，</p><p>Promise 是由 asyncheronous function 所 return 的物件<br>async function return 的 value 一定是 Promise </p><p>主要功能是 Promise 會代理一個建立不用預先得知結果的值 ( 是 pending 狀態 )</p><p>向伺服器傳送 request ，需等待 resopnse 此時的 Promise 是一個擱置狀態 pending ， 在非同步操作後，會得到成功值 success value、失敗訊息 failure reason 的處理函式 handlers ，對照的 then 的 callback 就會被調用</p><p>一個 Promise 物件有以下 3 種狀態 : </p><ol><li>擱置 pending : 初始狀態，並不是 fulfilled、rejected (不會執行</li><li>實現 fulfilled : 操作成功</li><li>拒絕 rejected : 操作失敗</li></ol><p>fetch() 就是一個 async function ，.then()、.catch()都是在 fetch() 回傳 status code 後觸發</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向一個網址寄出 HTTP Request，是一個 async</span></span><br><span class="line"><span class="comment">// JS fetch api 允許我們 send HTTP requests</span></span><br><span class="line"><span class="keyword">let</span> promiseObject = <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>); </span><br><span class="line">promiseObject.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; <span class="comment">//data 是feth(URL) 得到的 HTTP Response</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">---- 示範 ----</span><br><span class="line"><span class="keyword">let</span> fetchPromis = <span class="title function_">fetch</span>(<span class="string">&quot;https://example.com/data&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fetchPromise);</span><br><span class="line"></span><br><span class="line">fetchPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fetchPromise);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>會得到</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6a0a76c9-8f7f-4686-8416-2a1adb40f859/Untitled.png" alt="Untitled"></p><p>Promise 的好處會繼續執行 forloop 等到 server 結束才會調用 .then() 、 catch()</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/205834ed-0ec2-4b4e-8632-b29d75a9f443/Untitled.png" alt="Untitled"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ca4821ff-f06d-4bc5-84ed-3928e20f5623/Untitled.png" alt="Untitled"></p><h3 id="fetch-API"><a href="#fetch-API" class="headerlink" title="fetch() API"></a>fetch() API</h3><p>本身是 JS 提供，可以寄送 HTTP request 的方法，會 return 一個 promise ，接到 response 時會從pending轉變成fulfilled，fetch()所return的promise做.then(callback)時，JavaScript自動帶入callback的參數，會是一個「Response Object」。這個Response Object代表HTTP response。</p><p>如果遇到404的情況，fetch()的promise並不會出現rejected狀態，而是會變成fulfilled狀態。但我們可以用使用Response Object的屬性status或ok來確定我們得到的Response是200 OK還是404 Not Found</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://example.com/movies.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">myJson</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myJson);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------ 範例 來發個 POST Request</span></span><br><span class="line"><span class="title function_">postData</span>(<span class="string">&#x27;http://example.com/answer&#x27;</span>, &#123;<span class="attr">answer</span>: <span class="number">42</span>&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data)) <span class="comment">// JSON from `response.json()` call</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postData</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">  <span class="comment">// Default options are marked with *</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), <span class="comment">// must match &#x27;Content-Type&#x27; header</span></span><br><span class="line">    <span class="attr">cache</span>: <span class="string">&#x27;no-cache&#x27;</span>, <span class="comment">// *default, no-cache, reload, force-cache, only-if-cached</span></span><br><span class="line">    <span class="attr">credentials</span>: <span class="string">&#x27;same-origin&#x27;</span>, <span class="comment">// include, same-origin, *omit</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 MDN Example&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// *GET, POST, PUT, DELETE, etc.</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span>, <span class="comment">// no-cors, cors, *same-origin</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span>, <span class="comment">// manual, *follow, error</span></span><br><span class="line">    <span class="attr">referrer</span>: <span class="string">&#x27;no-referrer&#x27;</span>, <span class="comment">// *client, no-referrer</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>()) <span class="comment">// 輸出成 json</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------ 上傳 JSON 資料</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;https://example.com/profile&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">username</span>: <span class="string">&#x27;example&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// or &#x27;PUT&#x27;</span></span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), <span class="comment">// data can be `string` or &#123;object&#125;!</span></span><br><span class="line">  <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success:&#x27;</span>, response));</span><br><span class="line"></span><br><span class="line"><span class="comment">//------ 上傳檔案</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line"><span class="keyword">var</span> fileField = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input[type=&#x27;file&#x27;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;abc123&#x27;</span>);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, fileField.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com/profile/avatar&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: formData</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success:&#x27;</span>, response));</span><br></pre></td></tr></table></figure><h3 id="包含憑證-Credentials-的-Request-用法"><a href="#包含憑證-Credentials-的-Request-用法" class="headerlink" title="包含憑證 Credentials 的 Request 用法"></a>包含憑證 Credentials 的 Request 用法</h3><p>跟 CORS 有關</p><p>要讓瀏覽器將 credentials 跟著 request 一起送出, 方式就是在 <code>init</code><br> object 加上 <code>credentials: &#39;include&#39;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//同源</span></span><br><span class="line"><span class="comment">// The calling script is on the origin &#x27;https://example.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;same-origin&#x27;</span></span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//確保瀏覽器不會帶著 credentials 請求，可以用 credentials: &#x27;omit&#x27;</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;omit&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="檢查-Fetch-有沒有成功"><a href="#檢查-Fetch-有沒有成功" class="headerlink" title="檢查 Fetch() 有沒有成功"></a>檢查 Fetch() 有沒有成功</h3><p>當<code>[fetch()</code>](<a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch">https://developer.mozilla.org/en-US/docs/Web/API/fetch</a>) <br>遇到 CORS 或 server 設定錯誤導致 network error 時, promise 會 reject 並附上<code>[TypeError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError)</code><br>的回應, 但在權限或類似問題導致 404 的常見狀況下, 卻不會導致 network error.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;flowers.jpg&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(response.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">blob</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok.&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">myBlob</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(myBlob);</span><br><span class="line">  myImage.<span class="property">src</span> = objectURL;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;There has been a problem with your fetch operation: &#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON()"></a>JSON()</h3><p>這個 method 也是 async ，會 reuren Promise Object</p><p>.json() 方法接讀取Response Object直到完成。此method會return一個Promise，</p><p>該Promise以將body text解析為 JSON。</p><p><strong>使用.json()就可以將fetch(URL)所回傳的Response Object內部的文本資料取出。</strong></p><p>用 fetch() 得到的 HTTP Response </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> <span class="variable constant_">OK</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Length</span>: <span class="number">300</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: text/json; charset=<span class="variable constant_">UTF</span>-<span class="number">8</span></span><br><span class="line"> </span><br><span class="line">[&#123;<span class="attr">name</span>: <span class="string">&quot;bake beans&quot;</span>, <span class="attr">price</span>: <span class="number">0.4</span>, <span class="attr">image</span>:<span class="string">&quot;beans.jpg&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;hot dogs&quot;</span>, <span class="attr">price</span>: <span class="number">1.99</span>, <span class="attr">image</span>:<span class="string">&quot;hotdogs.jpg&quot;</span>&#125;, ...]</span><br></pre></td></tr></table></figure><p>這個 HTTP Response 會被 JavaScript 製作成 「Response Object」</p><p>但我們只能看到跟Header有關的資訊，例如status 200、okay是true等等，而無法看到HTTP Response中的message section的數據。</p><p>我們需要使用JavaScript中Response Object的.json() method</p><p>將message section中的文字轉成JSON格式後，才能夠使用。這就是.json()的目的。</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/055d36bf-a32f-458f-957e-f91d6af71fa0/2023-03-04_20-16-59-bd94db907695dffaa154cd01e21ac530.png" alt="2023-03-04_20-16-59-bd94db907695dffaa154cd01e21ac530.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```jsx</span><br><span class="line">let fetchPromise = fetch(</span><br><span class="line">  &quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span><br><span class="line">);</span><br><span class="line">  // 把 response 變成 JSON</span><br><span class="line">  // .json () method is also async</span><br><span class="line">  // return Promise object</span><br><span class="line">  //let jsonPromise = response.json(); 這樣寫不對</span><br><span class="line">  //console.log(jsonPromise); //status pending</span><br><span class="line">fetchPromise.then((response) =&gt; &#123;</span><br><span class="line">  response.json().then((data) =&gt; &#123;// 因為是async 所以then要加在Json後面</span><br><span class="line">    console.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">//會得到下圖</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/23630725-eef4-4016-98c2-ba9fd1635850/Untitled.png" alt="Untitled"></p><p>對一個promise來說 .then() 完成後，可以在繼續 .then()<br>會變成傳說中的波動拳 callback hell</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/26ba49e3-69f6-436e-a068-f0afe9616e37/Untitled.png" alt="Untitled"></p><h3 id="在-Promise-中-使用-fetchPromise-可以連續寫"><a href="#在-Promise-中-使用-fetchPromise-可以連續寫" class="headerlink" title="在 Promise 中 使用 fetchPromise 可以連續寫"></a>在 Promise 中 使用 fetchPromise 可以連續寫</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fetchPromise = <span class="title function_">fetch</span>(</span><br><span class="line">  <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fetchPromise</span></span><br><span class="line"><span class="comment">.then((response) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  return response.json();</span></span><br><span class="line"><span class="comment">&#125;).then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(data)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//因為 arrow function 省略 &#123;&#125; 會自動 return 所以可以簡寫</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">fetchPromise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Catching-Error"><a href="#Catching-Error" class="headerlink" title="Catching Error"></a>Catching Error</h3><p>Promise 物件提供 catch() 方法，跟then()很像，在 async 失敗時會自動被JS 調用</p><p>.catch() 放在最後面，不管前面哪一個 .then() 失敗都會執行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetchPromise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="Combining-Multiple-Promises"><a href="#Combining-Multiple-Promises" class="headerlink" title="Combining Multiple Promises"></a>Combining Multiple Promises</h3><p>很多 .then() .then() 串再一起，每一個 Promise 都會互相依賴，前項 .then()  callbackFn 的 return 值，都會被帶入後項參數。</p><p>但有時需要啟動所有 Promise 且不互相依賴，全部 fulfulled 時收到通知，這時候就可以用 Promise.all() ，他接受一個array並返回一個 promise</p><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(); <span class="comment">//返回的 Promise 是</span></span><br><span class="line">fulfilled</span><br><span class="line">rejected <span class="comment">//只要有一個失敗全部失敗</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPromise1 = <span class="title function_">fetch</span>(</span><br><span class="line">  <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> fetchPromise2 = <span class="title function_">fetch</span>(</span><br><span class="line">  <span class="string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/not-found&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> fetchPromise3 = <span class="title function_">fetch</span>(</span><br><span class="line">  <span class="string">&quot;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([fetchPromise1, fetchPromise2, fetchPromise3])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Response</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">url</span>, response.<span class="property">status</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//404 不算錯誤</span></span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/36b02600-5d4b-4157-aae9-52a40453b0f3/Untitled.png" alt="Untitled"></p><h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h3><p>執行一組 Promise 的任何一個，不關心哪一個，就可以使用 Promise.any()<br>只要Promise array 任何一個變成 fulfulled 就執行 .then，所有 promise 被拒絕就 .catch()</p><h3 id="Async-amp-Await-關鍵字"><a href="#Async-amp-Await-關鍵字" class="headerlink" title="Async &amp; Await 關鍵字"></a>Async &amp; Await 關鍵字</h3><p>async 用來創建非同步函式</p><p>await 會暫停函式執行，值到 promise 解決</p><p>提供更簡單的方式來處理基於 async promise 的 code</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//This an async function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在調用會 return Promise 的函數之前使用 awit 關鍵字，使該點等待 Promise 被 fulfilled 或 rejected </p><p>await 關鍵字只能放在 asyne function 內部 </p><p>JS 設定 所有的 async function 都一定會 return 一個 Promise Object ，不論在 async function return 什麼值，Promise 變成 fulfilled時，執行 .then() callback function 內部自動變成參數</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> promise = <span class="title class_">Fn</span>(); <span class="comment">//在這裡的 promise 不是 10 而是一個 promise object</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(data) &#125;) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async return promise object</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">myFunc</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e564a6c1-bd82-4320-a20e-cb1b15f07d68/Untitled.png" alt="Untitled"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要 + .then()才會有值</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">myFunc</span>();</span><br><span class="line">result.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(result));</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9590670c-24e0-4b86-9833-2b18d68c39fc/Untitled.png" alt="Untitled"></p><p>請注意，若程式碼是 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable constant_">URL</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本 fetch() 一定會 retrun Promise<br>但因為調用了 await fetch()，response 並不會是一個 Promise !<br>而是獲得 URL 回應完整的 Response Object<br>有點像 async async 負負得正，這段程式碼變成像是 synchrounous </p><p>( 像同步，但本質還是非同步  )</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchProduct</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch (<span class="string">&quot;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&quot;</span></span><br><span class="line">    );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchProduct</span>()</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0b81a949-1a0f-4f59-bb81-b10abaddbf64/Untitled.png" alt="Untitled"></p><p>這個語法跟 fetch() .then()、.catch() 是可以互通的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchProduct</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch (</span><br><span class="line">      <span class="string">&quot;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchProduct</span>()</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/92c451b7-d3d5-4369-807a-f192b4cca5bb/Untitled.png" alt="Untitled"></p><h3 id="Node-js-Event-Loop"><a href="#Node-js-Event-Loop" class="headerlink" title="Node.js Event Loop"></a>Node.js Event Loop</h3><p>在 Node.js 有需要等待結果，都會被放在 Event loop 中等待</p><p>Node.js 可以保持忙碌且高效率 ( 和瀏覽器的 Event Loop 不盡相同 ) </p><p>Queue 和 Stack 是相似但原則相反的資料結構</p><p>Queue 是列隊式結構，先進先出 FIFO ( First In First Out )</p><p>Stack  是 堆狀結構，後進先出 LIFO  ( Last In First Out )</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/578c9ecf-ad9c-4c1d-8241-c6c3695a3668/Untitled.png" alt="Untitled"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f03a26c8-ed05-41bd-9728-8caadf6ce262/Untitled.png" alt="Untitled"></p><h3 id="Node-js-Event-Loop-的-Queue"><a href="#Node-js-Event-Loop-的-Queue" class="headerlink" title="Node.js Event Loop 的 Queue"></a>Node.js Event Loop 的 Queue</h3><ol><li><p>優先級別 : nextTick queue 、micro Task Queue</p><p> 給定 Promise.nextTick ( callbackFn ) 都會被放入這個 queue</p></li><li><p>普通級別 : macrotask queue ( task queue ) </p><p> 當 Promise Object 由 Pending 轉成 fulfilled 、 rejected 所執行的 callback 會被排在這個 Queue</p><p> 又有六種 :<br> timers :</p><p> setTimeout ( callbackFn ) 跟 setInterval ( callback) 設定時間倒數完畢會被執行</p><p> pending callbacks :</p><p> 給作業系統座使用 socket 連線、傳輸控制協定層</p><p> Idle, prepare :</p><p> Node.js 內部使用的</p><p> polling :</p><p> 當 I&#x2F;O 有callback function 使用的 queue ( 印表機等… )</p><p> check</p><p> setImmediate() 使用的</p><p> close callback</p><p> socket 關閉用</p><h3 id="Node-js-運行程式碼的順序"><a href="#Node-js-運行程式碼的順序" class="headerlink" title="Node.js 運行程式碼的順序"></a>Node.js 運行程式碼的順序</h3><ol><li>整份程式碼先掃描一次</li><li>遇到異步函式，將callback function 分配到各歸屬的 queue</li><li>整份code完成掃描後，Node,js會重複 event loop 循環可能尚未觸發的 callback</li><li>queue 可執行 把內部 callback 先進先出</li><li>有 nextTick Queue 可以執行，優先清空</li><li>microtask Queue 同上</li></ol> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nextTick1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是 sync function</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;resolve&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise then&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// IIFE</span></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setImmediate&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nextTick2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//運行結果 </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">start</span></span><br><span class="line"><span class="comment">promise</span></span><br><span class="line"><span class="comment">async</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment">nextTick1</span></span><br><span class="line"><span class="comment">nextTick2</span></span><br><span class="line"><span class="comment">promise then</span></span><br><span class="line"><span class="comment">setTimeout</span></span><br><span class="line"><span class="comment">setImmediate</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="製作-mutex"><a href="#製作-mutex" class="headerlink" title="製作 mutex"></a>製作 mutex</h3><p> <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb5ab7b7-5f75-4a43-b6ea-e73bdad54b81/Untitled.png" alt="Untitled"></p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mutex = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">doingSomethingCritical</span>(<span class="params"></span>) &#123;</span><br><span class="line">mutex = mutex.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//do .. stuff on the critiical path</span></span><br><span class="line">&#125;) .<span class="title function_">catch</span>() =&gt; &#123;</span><br><span class="line"><span class="comment">//manage errors on the critical path</span></span><br><span class="line">)</span><br><span class="line"> <span class="keyword">return</span> mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> balance = <span class="number">0</span>; <span class="comment">// shared resource</span></span><br><span class="line"><span class="keyword">let</span> mutex = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(); <span class="comment">// return fulfilled Promise object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomDelay</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// return value is a Promise</span></span><br><span class="line">  <span class="comment">// and the time for this promise changing from pending to fulfilled</span></span><br><span class="line">  <span class="comment">// is random (0s-0.1s)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadBalance</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">randomDelay</span>(); <span class="comment">// 等個隨機的0s~0.1s</span></span><br><span class="line">  <span class="keyword">return</span> balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">saveBalance</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">randomDelay</span>();</span><br><span class="line">  balance = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sellGrapes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  mutex = mutex</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> balance = <span class="keyword">await</span> <span class="title function_">loadBalance</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`賣葡萄前，帳戶金額為: <span class="subst">$&#123;balance&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">const</span> newBalance = balance + <span class="number">50</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">saveBalance</span>(newBalance);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`賣葡萄後，帳戶金額為: <span class="subst">$&#123;newBalance&#125;</span>`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> mutex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sellOlives</span>(<span class="params"></span>) &#123;</span><br><span class="line">  mutex = mutex</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> balance = <span class="keyword">await</span> <span class="title function_">loadBalance</span>();</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`賣橄欖前，帳戶金額為: <span class="subst">$&#123;balance&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">const</span> newBalance = balance + <span class="number">50</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">saveBalance</span>(newBalance);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`賣橄欖後，帳戶金額為: <span class="subst">$&#123;newBalance&#125;</span>`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> mutex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    <span class="title function_">sellGrapes</span>(),</span><br><span class="line">    <span class="title function_">sellOlives</span>(),</span><br><span class="line">    <span class="title function_">sellOlives</span>(),</span><br><span class="line">    <span class="title function_">sellOlives</span>(),</span><br><span class="line">    <span class="title function_">sellGrapes</span>(),</span><br><span class="line">    <span class="title function_">sellGrapes</span>(),</span><br><span class="line">    <span class="title function_">sellGrapes</span>(),</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">const</span> balance = <span class="keyword">await</span> <span class="title function_">loadBalance</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`賣葡萄與橄欖後的帳戶金額是$<span class="subst">$&#123;balance&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h3 id="Promise-based-API"><a href="#Promise-based-API" class="headerlink" title="Promise based API"></a>Promise based API</h3><p> 算是做一個API</p><p> API ( Application Programming Interface ) 的中文是應用程式介面</p><p> Application  是指任何具有功能的程式，Interface 接口，可以被認為是兩個程式之間的服務契約，這套標準就是 API </p><p> 使用 API 需要知道三件事 : </p><ol><li>API 上面要求提供什麼資料才能溝通 ?</li><li>成功回復</li><li>失敗回復</li></ol><p> 若我們想要製作一個 API ，裡面的 function 會 return promise object 使得調用這些 function 時，可以使用 .then()、.catch() 等 … ，我們必須使用 Promise class 的 constructor</p><p> Promise constructor 接受一個函數作為參數，稱為 executor</p><p> executor 有兩個參數，都是函數成功被調用的 resolve、失敗被調用的 reject  這兩個的參數可以是任何 data type</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">alarm</span>(<span class="params">person, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delay &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;delay不能小於 0&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(person + <span class="string">&quot;起床&quot;</span>);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> promiseObject = <span class="title function_">alarm</span>(name.<span class="property">value</span>, delay.<span class="property">value</span>);</span><br><span class="line">  promiseObject.<span class="title function_">then</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerHTML</span> = message;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>( <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerHTML</span> = e;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">alarm</span>(<span class="params">person, delay</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerHTML</span> = person + <span class="string">&quot;起床!!&quot;</span>;</span><br><span class="line">  &#125;, delay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">alarm</span>(name.<span class="property">value</span>, delay.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Promise</span> object</span><br><span class="line"><span class="comment">//pending 的 delay 秒 =&gt; fulfilled</span></span><br><span class="line"><span class="comment">//若 delay &lt; 0 返回 reject</span></span><br></pre></td></tr></table></figure><p>共用鬧鐘 寫法差別 ( 就是 Promise-based API )</p><p>共用 html </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant-TW&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;delay&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;set-alarm&quot;</span>&gt;</span>設定鬧鐘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>寫法一</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#name&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> delay = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#delay&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#set-alarm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#output&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alarm</span>(<span class="params">person, delay</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerHTML</span> = person + <span class="string">&quot;起床!!&quot;</span>;</span><br><span class="line">  &#125;, delay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return Promise object</span></span><br><span class="line"><span class="comment">// pending 的 delay 秒 =&gt; fulfilled</span></span><br><span class="line"><span class="comment">// 若 delay &lt; 0 返回 reject</span></span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> promiseObject = <span class="title function_">alarm</span>(name.<span class="property">value</span>, delay.<span class="property">value</span>);</span><br><span class="line">  promiseObject.<span class="title function_">then</span>(<span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerHTML</span> = message;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">innerHTML</span> = e;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>寫法二</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#name&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> delay = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#delay&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#set-alarm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#output&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alarm</span>(<span class="params">person, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delay &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;delay不能小於 0&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(person + <span class="string">&quot;起床&quot;</span>);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">alarm</span>(name.<span class="property">value</span>, delay.<span class="property">value</span>)</span><br><span class="line">    output.<span class="property">innerHTML</span> = result;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    output.<span class="property">innerHTML</span> = e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>笑話 API 執行的樣子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant-TW&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;new-joke&quot;</span>&gt;</span>新增笑話<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#output&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">      <span class="string">&quot;https://v2.jokeapi.dev/joke/Programming?type=single&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> result.<span class="title function_">json</span>();</span><br><span class="line">    output.<span class="property">innerText</span> += data.<span class="property">joke</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">joke</span>); <span class="comment">//只剩下笑話</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#new-joke&quot;</span>);</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">hello</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Execution-Context-執行環境"><a href="#Execution-Context-執行環境" class="headerlink" title="Execution Context 執行環境"></a>Execution Context 執行環境</h2><p>當 JS 在執行 script 時，會創建 2 種 exencution contexts (執行環境)</p><ol><li>全域執行環境 ( Global Execution Context  ) GEC</li><li>函式執行環境 ( Function Ececution Coontxet ) FEC</li></ol><p>每種 execition context 都包含兩個階段 : 創造階段 creation phase、執行階段 execution phase</p><h3 id="全域執行環境"><a href="#全域執行環境" class="headerlink" title="全域執行環境"></a>全域執行環境</h3><p>當第一次執行 JS 程式碼時，JS 引擎會創造第一種 exencution contexts ，叫 Global Execution Context 會先進入  creation phase</p><ol><li>創建 global object ( 瀏覽器的 windows object、Node.js global object )</li><li>建立 scope</li><li>創建 this 關鍵字，並綁定 global object</li><li>將 variables 變數、class 類、function 函式分配至記憶體 ( hosting 步驟 )</li></ol><p>creation phase 結束後，會進入 execution phase</p><aside>💡 function 會在 execution phase 先被做好，所以呼叫時不管放哪裡都可以</aside><ol><li>逐行 line by line 執行 JS 程式碼</li><li>遇到遞迴時，使用 call stack 排定工作順序</li></ol><h3 id="函式執行環境"><a href="#函式執行環境" class="headerlink" title="函式執行環境"></a>函式執行環境</h3><p>每次的 function call ， JS 引擎也會創造類似 function execution context，一樣有creation phase、execution phase  差別在於，函式執行環境創建 argument object。</p><p>函式執行環境的 creatuon phase</p><ol><li>創建 argument object</li><li>建立 scope ( 依照 closure 準則 )</li><li>創建 this </li><li>將 varibles、class、function 分配至記憶體 ( hositing 步驟 )</li></ol><p>進入 execution phase</p><ol><li>逐行 line by line 執行 JS 程式碼</li><li>遇到遞迴時，使用 call stack 排定工作順序</li></ol><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/42d0b825-c95e-443d-99e5-13305d3fe8d9/Untitled.png" alt="Untitled"></p><h3 id="Constructor-Function-建構函數"><a href="#Constructor-Function-建構函數" class="headerlink" title="Constructor Function 建構函數"></a>Constructor Function 建構函數</h3><p>通常首字母為大寫，用來區別</p><p>並用 this 引用來即將被創建的新對象</p><p>製作出來的每個物件都是獨立的，會單獨佔據記憶體的位置</p><p>用這個寫程式碼容易撰寫且好維護</p><p>寫的好可以節省記憶體空間 ( 共用 attributes 、 methods</p><p>在函式執行環境的 creation phase 當中，每個 function 都有創建 this 關鍵字這個步驟，this 指目前正在執行 method 的 object ，如果被調用的 function 是常規 function 而非 method ，那 this 會被指向 global object ( 因為 closure 會向外找 this 這個關鍵字 ) </p><p>如果調用 function 使用 new 關鍵字，則 function 會被當成 constructor function 來使用 </p><ol><li>有寫 new 的 function 會被認定為 constructor function</li><li>RAM 會預留空間給這個 { } 新製作的物件</li><li>this 會指向新製作的物件</li><li>會 return</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通常用大寫開頭</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;說你好&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wilson = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wilson&quot;</span>,<span class="number">27</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wilson); <span class="comment">//Person &#123;name:&#x27;wilson&#x27; , age: 27&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/188c37bf-1cf9-4423-b0b6-fcd14f185225/Untitled.png" alt="Untitled"></p><h3 id="Hoisting-提升"><a href="#Hoisting-提升" class="headerlink" title="Hoisting 提升"></a>Hoisting 提升</h3><p>JS 的 Hoistion 是指 JS 引擎在執行 code 之前，將 function 、variables、class 的 declaration 移動到範圍頂部的過程。</p><p>注意 : </p><p>被宣告的 function 不算，他只會先被當變數往上提升，等 JS 往下執行時 function 才會被執行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">conlog.<span class="title function_">loe</span>(<span class="string">&quot;hello  &quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>Scope 是指在當前的 exceution context中，變數的可訪問性 accessiblility ，他能被訪問的範圍是 scpoe ，JS 有以下幾種 scope</p><ol><li>Globel scope : 全域變數</li><li>Module scope : 網頁後端才會使用到</li><li>Function scope : 在 function 內宣告的變數，只活在 function 中</li><li>用 let、const 去宣告的 Block scope : 在 { } 中被稱為 block，常見在 loop 、if</li></ol><h3 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h3><p>Closure 的規則是</p><ol><li>從 Arhument Object 、 Local varibale { } 內的變數、和內部的變數</li><li>若從 1. 找不到，則從記憶體被分配給函數的位置開始尋找</li><li>若在目前的 ecectyion context找不到，就繼續往外層找，往全域一層一層的去找</li></ol><h3 id="在-function-中去執行另外一個-function-就會-Call-Stack"><a href="#在-function-中去執行另外一個-function-就會-Call-Stack" class="headerlink" title="在 function 中去執行另外一個 function 就會 Call Stack"></a>在 function 中去執行另外一個 function 就會 Call Stack</h3><p>是 JS 引擎追蹤，再調用多個函數的程式碼中位置的機制 ( 資料結構的一種 )</p><p>Call Stack 幫助我們知道 JS 引擎 當前在正運行什麼函式，以及從函數中調用了甚麼函式</p><p>Stack 是堆的意思，特性是後進先出 LIFO </p><p>當 f2 執行完畢後，JS 引擎會把 f2 從 call stack 中取出，並從 f1 停止的位置繼續執行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="title function_">f2</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;2start&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;2end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f1</span>()</span><br><span class="line"><span class="comment">//start</span></span><br><span class="line"><span class="comment">//2start</span></span><br><span class="line"><span class="comment">//2end</span></span><br><span class="line"><span class="comment">//end</span></span><br></pre></td></tr></table></figure><p>如果 call stack 堆疊過高，高出記憶體分配給 call stack 最大空間，會導致 stack overflow 溢出的問題 </p><p>code 中 如果 function 中執行自己的 function 叫做遞迴 stack overflow</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">consloe.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><h3 id="Recursion-遞迴"><a href="#Recursion-遞迴" class="headerlink" title="Recursion 遞迴"></a>Recursion 遞迴</h3><p>在數學中，遞迴 recurrence relation 是定義數列的方式: 數列的每一項定義為前面項的函數，在 code 中，遞迴演算法有類似的概念。</p><p>在遞迴演算法中，需要定義一個 base case 避免 call stack 變成 stack oberflow</p><ol><li>A base S(1) &#x3D; 2</li><li>S(n) &#x3D; 2*S(n-1)f or n≥2</li></ol><p>由上面規則可知，S 會是等比數列 2,4,8,16,32</p><h3 id="費波那契數列"><a href="#費波那契數列" class="headerlink" title="費波那契數列"></a>費波那契數列</h3><h3 id="Inheritance-繼承"><a href="#Inheritance-繼承" class="headerlink" title="Inheritance 繼承"></a>Inheritance 繼承</h3><p>JS，每個物件都有一個 private attribute 叫做 _<em>proto</em>_，若物件A的 <em>proto</em> 屬性值設物件B，則物件A會繼承物件B所有 attrubutes、methods</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wilson = &#123;</span><br><span class="line">name = <span class="string">&#x27;wilson&#x27;</span></span><br><span class="line">say <span class="title class_">Hi</span>() &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mike = &#123;</span><br><span class="line"><span class="attr">_proto_</span>: whilson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mike.<span class="property">name</span>);</span><br><span class="line">mike.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><p>每個 Constructor Function 都可以設定 prototype 屬性 ( 本質是一個 empty object ) </p><p>所有從 Constructor Function 製作出來的物件，其 <em>proto</em> 屬性都自動指向 Constructor Function的 prototype</p><p>我們可以根據這個特性，節省記憶體空間</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;說你好&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> wilson = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wilson&quot;</span>,<span class="number">27</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//這叫做 Prototpye Inheritance </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wilson.<span class="property">_proto_</span> == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wilson.<span class="property">hello</span> == mike.<span class="property">hello</span>)<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="string">&#x27;人類&#x27;</span> </span><br><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mike&quot;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mike.<span class="property">type</span>); <span class="comment">// 人類</span></span><br></pre></td></tr></table></figure><p>設定 A.prototype &#x3D; Object.create(B.prototype)</p><p>不能寫 A.prototype  &#x3D; B.prototype  <strong>(</strong> 因為它們是 reference data type ) </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, major, grade</span>) &#123;</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>) <span class="comment">//this他會指定Student做的物件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;正在努力讀&#x27;</span> + <span class="variable language_">this</span>.<span class="property">major</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">26</span>, <span class="string">&#x27;chinese&#x27;</span>, <span class="number">2.5</span>)</span><br><span class="line"><span class="comment">//繼承物件屬性後就可以執行 say hi</span></span><br></pre></td></tr></table></figure><h3 id="Prototype-Chain"><a href="#Prototype-Chain" class="headerlink" title="Prototype Chain"></a>Prototype Chain</h3><p>JS 內建的資料類型都有繼承其他的 prototype，不斷往上連結的結果就叫做 Prototype chain</p><h3 id="Function-Methods"><a href="#Function-Methods" class="headerlink" title="Function Methods"></a>Function Methods</h3><p>在 JS 中 function 是一個特別的物件 object，Function.prototype 有 3 種常見的 methods </p><ol><li>function.bind (obj) : 將function 的 this 綁定為 obj</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Lisa</span> = &#123;</span><br><span class="line">name = <span class="string">&#x27;Lisa&#x27;</span></span><br><span class="line">age = <span class="number">33</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 會綁定另外一個 function</span></span><br><span class="line"><span class="keyword">let</span> newFunction = getAge.<span class="title function_">bind</span>(<span class="title class_">Lisa</span>)</span><br><span class="line">consoloe.<span class="title function_">log</span>(<span class="title function_">newFunction</span>()) <span class="comment">//33</span></span><br></pre></td></tr></table></figure><ol><li>function.call(obj, argm &#x2F;* …., *&#x2F; argN ) 使用obj 當作 this 值來調用函數</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Lisa</span> = &#123;</span><br><span class="line">name = <span class="string">&#x27;Lisa&#x27;</span></span><br><span class="line">age = <span class="number">33</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params">country, height</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;來自&#x27;</span> + conutry + <span class="string">&#x27;身高為&#x27;</span> + height + <span class="string">&#x27;cm&#x27;</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get.<span class="title function_">call</span>(<span class="title class_">Lisa</span>,<span class="string">&#x27;台灣&#x27;</span>,<span class="number">160</span>) <span class="comment">//Lisa來自台灣，身高為160cm</span></span><br></pre></td></tr></table></figure><ol><li>function.apply(obj,argsArrat) 與 call 相同，但他的參數是 array</li></ol><h3 id="Class-類別-ES6-新增的語法糖-建立新物件的模板"><a href="#Class-類別-ES6-新增的語法糖-建立新物件的模板" class="headerlink" title="Class  類別  : ES6 新增的語法糖 建立新物件的模板"></a>Class  類別  : ES6 新增的語法糖 建立新物件的模板</h3><p>ECMA Script 2015 引入 JavaScript Class 語法，可以用來取代 Constructor Function ，class 基於 JS 現有的 prototype inheritance 的法糖。</p><p>若一個 Constructor Function 要繼承另一個 Constructor 的 prototype 則可以使用 extends 關鍵字。</p><p>Static 關鍵字是用於給定class的所有物件一個共享的相同 attriubute 或 method ，Static 所設定的 attriubute 和 method 屬於 class 本身，不屬於由 class 製作出的物件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, major</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;說你好&#x27;</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---- <span class="keyword">class</span> 用語法糖改寫 ----</span><br><span class="line"><span class="comment">//第一個字母通常要大寫</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age, major</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;說你好&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, major, grade</span>) &#123;</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>) <span class="comment">//this他會指定Student做的物件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">&#125;</span><br><span class="line">------ 用 <span class="keyword">extends</span> 改寫 -------</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;說你好&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//super 離散數學可以看到他</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age, major, grade</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>(name, age);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">grade</span> = grage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;正在努力讀&#x27;</span> + <span class="variable language_">this</span>.<span class="property">major</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">26</span>, <span class="string">&#x27;chinese&#x27;</span>, <span class="number">2.5</span>);</span><br><span class="line">mike.<span class="title function_">sayHi</span>();</span><br><span class="line">mike.<span class="title function_">study</span>();</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, major</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property">exampleProperty</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property">exampleFunction</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是沒有功能的function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="title function_">exampleFunction</span>();</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;說你好&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">26</span>, <span class="string">&#x27;chinese&#x27;</span>, <span class="number">2.5</span>);</span><br><span class="line">mike.<span class="title function_">sayHi</span>() <span class="comment">//可以</span></span><br><span class="line">mike.<span class="title function_">exampleProperty</span>() <span class="comment">//不能運行</span></span><br><span class="line"></span><br><span class="line">-------- 改寫 --------</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">static</span> exampleProperty = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age, major</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;說你好&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">exampleFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;這是一個沒有特別功能的fun&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mike&quot;</span>, <span class="number">26</span>, <span class="string">&#x27;chinese&#x27;</span>, <span class="number">2.5</span>);</span><br><span class="line">mike.<span class="title function_">exampleFunction</span>();</span><br></pre></td></tr></table></figure><h3 id="Static-Methods-amp-Attributes"><a href="#Static-Methods-amp-Attributes" class="headerlink" title="Static Methods &amp; Attributes"></a>Static Methods &amp; Attributes</h3><p>靜態</p><p>JS 內建的 class 有許多 static properties 靜態屬性 , static methods , instance properties, instance methods </p><p>例如  : Array 的 Array.isArray() 就是 Array Class 的 static method，可用來確認某個資料是不是Array</p><p>若用 typeof operator 確認 attay 的資料類型只能看到 objecct，若要確認變數是否為 array 就要用 Array.isArray()</p><p>另一個例子，Math Class 所以的 properties 以及 methods 都是 static 、ex: Math.E、Math.floor()</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用物件導向來做很多圓型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123; </span><br><span class="line"><span class="comment">//用 circle class 來追蹤在這裏面做的圓所有的面積總和</span></span><br><span class="line"><span class="keyword">static</span> allCircles = [];</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">radius</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">allCircle.<span class="title function_">push</span>(<span class="variable language_">this</span>); <span class="comment">//每執行一次都在陣列塞一次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getArea</span>(<span class="params"></span>) &#123; <span class="comment">//算圓的面積</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PO</span> * <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPerimeter</span>(<span class="params"></span>) &#123; <span class="comment">//算圓半徑</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">redius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static</span></span><br><span class="line"><span class="comment">// 去拿到圓面積的工具</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getAreaFormule</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> 圓面積公式為 pi * r * r ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static method</span></span><br><span class="line"><span class="comment">//拿到所有圓的面積的總和</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">grtAllCircleAreaTotal</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span> ;</span><br><span class="line"><span class="title class_">Circle</span>.<span class="property">allCircles</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">circle</span> =&gt;</span> &#123;</span><br><span class="line">total += circle.<span class="title function_">getArea</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//算完之後要塞回去變數裡面</span></span><br><span class="line"><span class="keyword">return</span> total; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c1 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1.<span class="title function_">getArea</span>());</span><br><span class="line"><span class="keyword">let</span> c2 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> c3 = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">15</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Circle</span>.<span class="title function_">getAllCirclesAreaTotal</span>());</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可以使用單引號也可以使用雙引號&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;JavaScrtop-引擎&quot;&gt;&lt;a href=&quot;#JavaScrtop-引擎&quot; class=&quot;headerlink&quot; title=&quot;JavaScrtop 引擎&quot;&gt;&lt;/a&gt;JavaScrtop 引擎&lt;/h2&gt;&lt;p&gt;javascript 並不是任何程式語言所寫成，他是歐洲電腦製造協會 ECMA 所制定的標準。&lt;/p&gt;
&lt;p&gt;瀏覽器內部的 JavaScript 引擎會遵從 ECMA 標準處理 JS&lt;/p&gt;
&lt;p&gt;目前最有名的更新在 2015，被稱為 ECMA2015 或是 ES6&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="html" scheme="https://22aliang.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css 基礎筆記</title>
    <link href="https://22aliang.github.io/2024/05/13/CSS%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    <id>https://22aliang.github.io/2024/05/13/CSS%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/</id>
    <published>2024-05-13T11:24:14.787Z</published>
    <updated>2024-05-13T12:32:10.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS介紹"><a href="#CSS介紹" class="headerlink" title="CSS介紹"></a>CSS介紹</h3><p>樣式定義通常保存在外部的.css文件中，呈現的樣式如下 :<br><img src="https://ithelp.ithome.com.tw/upload/images/20220910/20151122MhoydxlMvw.png" alt="https://ithelp.ithome.com.tw/upload/images/20220910/20151122MhoydxlMvw.png"></p><ul><li>Selector 選擇器、Declaration 宣告、Properties 屬性、Value 值，多個屬性以<code>;</code>分號分開。</li><li>屬性值和單位之間不能加空白 錯誤示範<code>margin-left: 20 px;</code> 正確示範<code>margin-left: 20px;</code></li></ul><span id="more"></span><h3 id="類選擇器-class"><a href="#類選擇器-class" class="headerlink" title="類選擇器 class"></a>類選擇器 class</h3><ul><li>為級聯樣式表</li><li>可用於任何HTML元素</li><li>會區分大小寫，第一個字不能是數字，可以使用中線<code>-</code>跟底線<code>_</code></li><li>可共用也可並用</li></ul><h3 id="ID選擇器"><a href="#ID選擇器" class="headerlink" title="ID選擇器"></a>ID選擇器</h3><ul><li>指定HTML元素唯一的ID</li><li>不能以數字作為開頭</li><li>可作為長頁面HTML中的書籤(快速到達)</li></ul><blockquote><p>優先權 HTML元素內的style &gt; ID &gt; tag &gt; class &gt; 瀏覽器預設</p></blockquote><hr><h3 id="CSS-背景屬性介紹"><a href="#CSS-背景屬性介紹" class="headerlink" title="CSS 背景屬性介紹"></a>CSS 背景屬性介紹</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定背景顏色--&gt;</span></span><br><span class="line">background-color</span><br><span class="line"><span class="comment">&lt;!--指定URL當作背景圖片，預設重複、覆蓋整個元素--&gt;</span></span><br><span class="line">background-image: url(&quot;paper.gif&quot;);</span><br><span class="line">可水平重複圖像 background-repeat: repeat-x;</span><br><span class="line">可垂直重覆圖像 background-repeat: repeat-y;</span><br><span class="line">不重覆圖片 background-repeat: no-repeat;</span><br><span class="line">改變圖像位置 background-position: right top;</span><br><span class="line">固定背景圖像不跟隨頁面滾動 background-attachment: fixed;</span><br><span class="line">背景圖像與頁面一起滾動 background-attachment: scroll;</span><br><span class="line">// 以上屬性都可以使用速記屬性，縮寫為同一排 舉例: //</span><br><span class="line">body &#123;background: #ffffff url(&quot;img_tree.png&quot;) no-repeat right top;&#125;</span><br><span class="line">使用速記屬性時的順序為 : </span><br><span class="line">background-color</span><br><span class="line">background-image</span><br><span class="line">background-repeat</span><br><span class="line">background-position</span><br><span class="line">缺少一個屬性值不重要，按照順序排列即可。</span><br><span class="line"><span class="comment">&lt;!--不透明度0.0 ~ 1.0，值越低，越透明，ps也可透過RGBA來指定透明度--&gt;</span></span><br><span class="line">opacity </span><br></pre></td></tr></table></figure><h3 id="CSS-邊框屬性"><a href="#CSS-邊框屬性" class="headerlink" title="CSS 邊框屬性"></a>CSS 邊框屬性</h3><ul><li>border-style屬性指定要顯示的邊框類型<ul><li>屬性有四個值 ( 上下左右 ) <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dotted- 虛線邊框</span><br><span class="line">dashed- 虛線邊框</span><br><span class="line">solid- 實心邊框</span><br><span class="line">double- 雙邊框</span><br><span class="line">groove- 3D 凹槽邊框。效果取決於border-color的值</span><br><span class="line">ridge- 3D 脊狀邊界。效果取決於border-color的值</span><br><span class="line">inset- 3D 插入邊框。效果取決於border-color的值</span><br><span class="line">outset- 3D 起始邊界。效果取決於border-color的值</span><br><span class="line">none- 無邊界</span><br><span class="line">hidden- 隱藏邊框</span><br></pre></td></tr></table></figure></li></ul></li><li>border-width屬性指定要顯示的邊框寬度<ul><li>用 (px、pt、cm、em等為單位指定邊框的寬度</li><li>thick、medium、bold三個屬性指定薄、中、厚</li><li>上下左右的寬度可速寫在同一行，<code>border-width:上px 下px 左px 右px ;</code></li></ul></li><li>border-color 為指定邊框的顏色<ul><li>若未設定顏色，將繼承元素的顏色</li><li>顏色同樣適用速寫在同一行 <code>border-width:上red 下green 左blue 右yellow;</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--border以下三個屬性可變成一個速寫元素--&gt;</span></span><br><span class="line">border-width</span><br><span class="line">border-style（必需的）</span><br><span class="line">border-color</span><br><span class="line"><span class="comment">&lt;!--以下為範例--&gt;</span></span><br><span class="line">p &#123;border: 5px solid red;&#125;</span><br><span class="line"><span class="comment">&lt;!--以下為指定四邊框其中之一的範例--&gt;</span></span><br><span class="line">p &#123;border-left: 6px solid red;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>border-radius屬性 可以為元素添加圓角邊框</li></ul><h3 id="控制CSS邊距的兩大屬性-margin-、-padding"><a href="#控制CSS邊距的兩大屬性-margin-、-padding" class="headerlink" title="控制CSS邊距的兩大屬性 margin 、 padding"></a>控制CSS邊距的兩大屬性 margin 、 padding</h3><ul><li>margin <ul><li>可分別指定四個邊框屬性 ( margin-top、margin-right、margin-bottom、margin-left)</li><li>元件與元件之間的距離<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--margin可適用下列四個值作為單位--&gt;</span></span><br><span class="line">auto - 自動置中父元素</span><br><span class="line">length - 以 px、pt、cm 等為單位指定邊距。</span><br><span class="line">% - 指定包含元素寬度百分比的邊距</span><br><span class="line">inherit - 指定邊距應該從父元素繼承</span><br><span class="line"><span class="comment">&lt;!--數值可以使用負值--&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>padding<ul><li>可分別指定四個邊框屬性 ( margin-top、margin-right、margin-bottom、margin-left)</li><li>元件推開邊框的大小 (擴大領地)</li><li>常用在<code>&lt;a&gt;</code>上，擴大使用者點擊按鈕可觸及的範圍<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--padding可適用下列四個值作為單位--&gt;</span></span><br><span class="line">length - 以 px、pt、cm 等為單位指定邊距。</span><br><span class="line">% - 指定包含元素寬度百分比的邊距</span><br><span class="line">inherit - 指定邊距應該從父元素繼承</span><br><span class="line"><span class="comment">&lt;!--數值不可使用負值--&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="CSS的寬度、高度、最大寬度"><a href="#CSS的寬度、高度、最大寬度" class="headerlink" title="CSS的寬度、高度、最大寬度"></a>CSS的寬度、高度、最大寬度</h3><p><code>height</code>和<code>width</code>屬性可能具有以下值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto- 預設屬性。瀏覽器會自動計算木前可視視窗與元素間的距離</span><br><span class="line">length- 以 px、cm 等為單位定義高度/寬度。</span><br><span class="line">%- 以包含塊的百分比定義高度/寬度</span><br><span class="line">initial- 將高度/寬度設置為其預設</span><br><span class="line">inherit- 高度/寬度將從其父值繼承</span><br></pre></td></tr></table></figure><blockquote><p><code>height</code>跟<code>width</code>屬性不包括填充、邊框或邊距</p></blockquote><ul><li><code>max-width</code> 為最大的寬度</li></ul><h3 id="CSS字體"><a href="#CSS字體" class="headerlink" title="CSS字體"></a>CSS字體</h3><ul><li>CSS中有五個通用字體系列 :<br>1.襯線字體 Serif - 字母邊緣有小筆畫<br>2.無襯線字體 sans-serif - 乾淨的線條<br>3.等寬字體 Monospaced - 所有字母相同固定寬度<br>4.草書字 cursive - 模仿人類筆跡<br>5.幻想字 Fantasy - 裝飾&#x2F;俏皮的字體<br><img src="https://www.w3schools.com/css/serif.gif"></li><li>使用 <code>font-family: &quot;Times New Roman&quot;, Times, serif;</code> 指定字型<ul><li>應包含多個字體做’備用’<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">以下為W3C推薦網路通用的安全字型</span><br><span class="line">Arial (sans-serif)</span><br><span class="line">Verdana (sans-serif)</span><br><span class="line">Tahoma (sans-serif)</span><br><span class="line">Trebuchet MS (sans-serif)</span><br><span class="line">Times New Roman (serif)</span><br><span class="line">Georgia (serif)</span><br><span class="line">Garamond (serif)</span><br><span class="line">Courier New (monospace)</span><br><span class="line">Brush Script MT (cursive)</span><br></pre></td></tr></table></figure></li></ul></li><li>引用google開源字體 <a href="https://fonts.google.com/about">https://fonts.google.com/about</a><ul><li>在<code>&lt;head&gt;</code>中，插入<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/css?family=填寫要使用的字型&quot;&gt;</code></li><li>有多種字型要引入，使用<code>|</code>隔開 (注意太多字體會影響網頁速度</li><li>可使用以下css各種樣式效果</li></ul></li><li><code>font-size</code> 文字大小<ul><li>預設字體大小為 16px &#x3D; 1em</li><li>可分為絕對尺寸、相對尺寸</li><li>單位有px、em、rm、vw…</li></ul></li><li><code>font-style</code> 主要指定文本為斜體<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-style</span>: normal; 正常顯示</span><br><span class="line"><span class="attribute">font-style</span>: italic; 斜體顯示</span><br><span class="line"><span class="attribute">font-style</span>: oblique; 傾斜顯示</span><br></pre></td></tr></table></figure></li><li><code>font-weight</code> 指定字體的粗細<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>: normal; 普通</span><br><span class="line"><span class="attribute">font-weight</span>: bold; 粗體</span><br></pre></td></tr></table></figure></li><li><code>font-variant: small-caps;</code> 指定字體為小型大寫體</li></ul><h3 id="CSS文本相關屬性"><a href="#CSS文本相關屬性" class="headerlink" title="CSS文本相關屬性"></a>CSS文本相關屬性</h3><ul><li>修改元件顏色 <code>color: blue;</code> </li><li>填充元件容器的底色<code>background-color</code></li></ul><h3 id="CSS對齊屬性"><a href="#CSS對齊屬性" class="headerlink" title="CSS對齊屬性"></a>CSS對齊屬性</h3><ul><li>text-align 設定文本、元素內的元件水平對齊<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center; 文字置中</span><br><span class="line"><span class="attribute">text-align</span>: left; 文字置左 (預設)</span><br><span class="line"><span class="attribute">text-align</span>: right; 文字置右</span><br><span class="line"><span class="attribute">text-align</span>: justify; 以距邊框，等寬分配單字字距</span><br></pre></td></tr></table></figure></li><li>text-align-last 一段文字中，指定最後一段文字的排版方式<ul><li>unicode-bidi: bidi-override; 文字鏡向翻轉</li></ul></li><li>vertical-align 設置元素的垂直對齊 ( 像是調整圖片對齊文本的關係 )<ul><li>只適用於 行內元素 inline element<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: baseline; (預設)元素對齊父元素基線上</span><br><span class="line"><span class="attribute">vertical-align</span>: middle; 放置父元素的中部 ( </span><br><span class="line"><span class="attribute">vertical-align</span>: text-top; 把元素的頂端與父元素字體的頂端對齊</span><br><span class="line"><span class="attribute">vertical-align</span>: text-bottom; 元素的頂端與行中最低的元素的頂端對齊</span><br><span class="line"><span class="attribute">vertical-align</span>: sub; 垂直對齊文本的下標</span><br><span class="line"><span class="attribute">vertical-align</span>: super; 垂直對齊文本的上標</span><br><span class="line">//全局屬性//</span><br><span class="line"><span class="attribute">vertical-align</span>: inherit; 從父元素繼承 <span class="attribute">vertical-align</span> 屬性的值</span><br><span class="line"><span class="attribute">vertical-align</span>: initial; 設置屬性的初始值</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="CSS文字裝飾屬性"><a href="#CSS文字裝飾屬性" class="headerlink" title="CSS文字裝飾屬性"></a>CSS文字裝飾屬性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: overline; 上標線</span><br><span class="line"><span class="attribute">text-decoration</span>: line-through; 刪除線</span><br><span class="line"><span class="attribute">text-decoration</span>: underline; 下底線</span><br><span class="line"><span class="attribute">text-decoration</span>: overline underline; 文本上下都加線</span><br><span class="line"><span class="attribute">text-decoration-color</span>: red; 設定線條顏色</span><br><span class="line"><span class="attribute">text-decoration-style</span> 設定線條樣式(虛線、波浪線、點點、雙線</span><br><span class="line"><span class="attribute">text-decoration</span>-thickness: <span class="number">5px</span>; 設定線條粗細</span><br></pre></td></tr></table></figure><ul><li>text-decoration屬性是以下的簡寫屬性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration-line</span>（必需的）</span><br><span class="line"><span class="attribute">text-decoration-color</span>（可選的）</span><br><span class="line"><span class="attribute">text-decoration-style</span>（可選的）</span><br><span class="line"><span class="attribute">text-decoration</span>-thickness（可選的）</span><br><span class="line">&lt;!--可以寫成--&gt;</span><br><span class="line"><span class="attribute">text-decoration</span>: underline red double <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">text-decoration</span>: 樣式 顏色 線條的樣式 粗細;</span><br></pre></td></tr></table></figure></li><li>連結預設都有下劃線，可用 <code>text-decoration: none;</code> 刪除下劃線。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-transform</span> 指定文本內的英文大小寫</span><br><span class="line"><span class="attribute">text-transform</span>: uppercase; 第一個英文字母大寫</span><br><span class="line"><span class="attribute">text-transform</span>: lowercase; 所有英文單字都小寫</span><br><span class="line"><span class="attribute">text-transform</span>: capitalize; 所有英文單字都大寫</span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS文本排版方式"><a href="#CSS文本排版方式" class="headerlink" title="CSS文本排版方式"></a>CSS文本排版方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: <span class="number">50px</span>;文本第一行的縮排</span><br><span class="line"><span class="attribute">letter-spacing</span>: <span class="number">5px</span>; 指定字距，可使用複數</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">0.8</span>; 指定行距</span><br><span class="line"><span class="attribute">word-spacing</span>: <span class="number">10px</span>; 指定文本中單詞之間</span><br><span class="line"><span class="attribute">white-space</span>: nowrap; 禁止換行</span><br></pre></td></tr></table></figure><h3 id="CSS文字陰影"><a href="#CSS文字陰影" class="headerlink" title="CSS文字陰影"></a>CSS文字陰影</h3><p><code>text-shadow</code>屬性為文本添加陰影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> red; </span><br><span class="line">數值順序為水平陰影+垂直陰影+模糊效果+顏色</span><br></pre></td></tr></table></figure><h3 id="CSS字體屬性簡寫"><a href="#CSS字體屬性簡寫" class="headerlink" title="CSS字體屬性簡寫"></a>CSS字體屬性簡寫</h3><ul><li>使用<code>font</code>屬性簡寫以下屬性 : <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-style</span></span><br><span class="line"><span class="attribute">font-variant</span></span><br><span class="line"><span class="attribute">font-weight</span></span><br><span class="line"><span class="attribute">font-size</span>/<span class="attribute">line-height</span> (必需)</span><br><span class="line"><span class="attribute">font-family</span> (必需)</span><br></pre></td></tr></table></figure>舉例 : <code>font: italic small-caps bold 12px/30px Georgia, serif;</code></li></ul><h3 id="CSS-icon-介紹"><a href="#CSS-icon-介紹" class="headerlink" title="CSS icon 介紹"></a>CSS icon 介紹</h3><p><a href="https://fontawesome.com/">Font Awesome </a></p><ul><li>可以透過添加icon資料庫，簡單使用icon，且icon可縮放大小、使用css等…</li><li>在 <code>&lt;head&gt;</code> 中加入 <code>&lt;script src=&quot;https://kit.fontawesome.com/yourcode.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</code> 即可使用</li></ul><p><a href="https://icons.getbootstrap.com/">Bootstrap icon </a></p><ul><li>在 <code>&lt;head&gt;</code> 中加入 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;</code> 即可使用</li></ul><p><a href="https://fonts.google.com/icons">Google icon</a></p><ul><li>在 <code>&lt;head&gt;</code> 中加入 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;&gt;</code> 即可使用</li></ul><h3 id="CSS-連結的屬性"><a href="#CSS-連結的屬性" class="headerlink" title="CSS 連結的屬性"></a>CSS 連結的屬性</h3><ul><li>四個連結的狀態<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: red;&#125; 正常，尚未被點擊過的連結</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: green;&#125; 用戶點擊過的連結</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: hotpink;&#125; 滑鼠停在標籤上會出現的連結</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: blue;&#125; 點擊時會出現的連結</span><br></pre></td></tr></table></figure></li><li>一個標籤有多種連結狀態是，必須按照以下的順序<ul><li><code>a:hover</code> 必須在 <code>a:link</code> 和 <code>a:visited</code> 之後</li><li><code>a:active</code> 必須在 <code>a:hover</code> 之後</li></ul></li><li><code>text-decoration</code>屬性主要用於刪除連結的下劃線<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">text-decoration</span>: none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">text-decoration</span>: none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">text-decoration</span>: underline;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">text-decoration</span>: underline;&#125;</span><br></pre></td></tr></table></figure></li><li><code>background-color</code> 指定連結的背景顏色</li><li>結合padding將<code>&lt;a&gt;</code>標籤向外推，再結合以上屬性變成可點擊的按鈕</li></ul><h3 id="CSS游標樣式"><a href="#CSS游標樣式" class="headerlink" title="CSS游標樣式"></a><a href="https://www.w3schools.com/css/tryit.asp?filename=trycss_cursor">CSS游標樣式</a></h3><h3 id="CSS列表樣式"><a href="#CSS列表樣式" class="headerlink" title="CSS列表樣式"></a>CSS列表樣式</h3><ul><li><code>list-style-type</code> 可以改變列表項標記<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.a</span> &#123;<span class="attribute">list-style-type</span>: circle;&#125; 空心圓形</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.b</span> &#123;<span class="attribute">list-style-type</span>: square; 實心方形</span><br><span class="line"><span class="selector-tag">ol</span><span class="selector-class">.c</span> &#123;<span class="attribute">list-style-type</span>: upper-roman;&#125; 羅馬字母</span><br><span class="line"><span class="selector-tag">ol</span><span class="selector-class">.d</span> &#123;<span class="attribute">list-style-type</span>: lower-alpha;&#125; 小寫英文</span><br></pre></td></tr></table></figure></li><li><code>list-style-image: url(&#39;sqpurple.gif&#39;);</code> 使用圖片替換列表項</li><li>調整列表項、和內容的排版關係<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.a</span> &#123;<span class="attribute">list-style-position</span>: outside;&#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.b</span> &#123;ist-style-<span class="attribute">position</span>: inside;&#125;</span><br></pre></td></tr></table></figure></li><li>刪除列表的列表項、預設排版方式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>列表的速記屬性，需依照以下順序寫<br><code>list-style-type</code>（如果指定了list-style-image，如果由於某種原因無法顯示圖像，將顯示該屬性的值）<br><code>list-style-position</code><br><code>list-style-image</code>（將圖像指定為列表項標記）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: square inside <span class="built_in">url</span>(<span class="string">&quot;sqpurple.gif&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS表格樣式"><a href="#CSS表格樣式" class="headerlink" title="CSS表格樣式"></a>CSS表格樣式</h3><ul><li>表格設定線條粗細、線條樣式(實心)<ul><li>可調整選擇的標籤，來調整表格樣式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>使用<code>width: 100%</code>讓表格隨著螢幕縮放<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>border-collapse: collapse;</code> 將邊框預設的雙框改成單邊框</li><li><code>text-align: center;</code> 表格內容置中</li></ul><h3 id="CSS顯示屬性"><a href="#CSS顯示屬性" class="headerlink" title="CSS顯示屬性"></a>CSS顯示屬性</h3><ul><li><code>display</code>控制layout最重要的CSS屬性，有以下幾種寫法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: none; 不顯示</span><br><span class="line"><span class="attribute">display</span>: inline; 樣式的樣子更改成行內</span><br><span class="line"><span class="attribute">display</span>: block; 樣式的樣子更改成塊狀</span><br><span class="line">// 注意: display只改變元素顯示的樣子，而不是元素本身類型，因此本身為行內元素套用display: block;還是不能包含在塊元素裡//</span><br></pre></td></tr></table></figure></li><li><code>visibility:hidden;</code> 跟 <code>display: none;</code> 一樣會隱藏元素，但前者會佔空間，後者不會</li><li>最大寬度 <code>max-width</code> 螢幕小於元素寬度後，會自動跳行，適用在各尺寸螢幕上瀏覽</li></ul><h3 id="CSS位置屬性"><a href="#CSS位置屬性" class="headerlink" title="CSS位置屬性"></a>CSS位置屬性</h3><ul><li><code>position</code> 有五種位置值<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--預設，元素靜態定位，不受<span class="attribute">top</span>、<span class="attribute">bottom</span>、<span class="attribute">left</span>、<span class="attribute">right</span>屬性影響--&gt;</span><br><span class="line"><span class="attribute">position</span>: static; </span><br><span class="line">&lt;!--相對定位，可用<span class="attribute">top</span>、<span class="attribute">bottom</span>、<span class="attribute">left</span>、<span class="attribute">right</span>屬性調整--&gt;</span><br><span class="line"><span class="attribute">position</span>: relative; </span><br><span class="line">&lt;!--固定定位，不隨頁面滾動而改變位置，可用<span class="attribute">top</span>、<span class="attribute">bottom</span>、<span class="attribute">left</span>、<span class="attribute">right</span>屬性調整--&gt;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line">&lt;!--絕對定位，可用<span class="attribute">top</span>、<span class="attribute">bottom</span>、<span class="attribute">left</span>、<span class="attribute">right</span>屬性調整--&gt;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line">&lt;!--黏性定位，可用<span class="attribute">top</span>、<span class="attribute">bottom</span>、<span class="attribute">left</span>、<span class="attribute">right</span>屬性調整，注意支援問題--&gt;</span><br><span class="line"><span class="attribute">position</span>: sticky;</span><br></pre></td></tr></table></figure></li><li><code>z-index</code>屬性<ul><li>當元素被定位<code>position</code> 時，可以跟其他元素重疊，<code>z-index</code>指定元素的堆疊順序</li><li>HTML預設為寫在最下面的元素，顯示會在最上層</li></ul></li></ul><h3 id="CSS溢出屬性"><a href="#CSS溢出屬性" class="headerlink" title="CSS溢出屬性"></a>CSS溢出屬性</h3><ul><li><code>overflow</code>僅適用在有指定高度<code>width</code>，可以控制元素內容太大時要怎麼處理，可單獨指定<code>overflow-x</code>水平和<code>overflow-y</code>垂直，具有以下四個值<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">visible- 預設，</span><br><span class="line">hidden- 溢出隱藏</span><br><span class="line">scroll- 溢出隱藏，但有滾動條</span><br><span class="line">auto- 類似scroll，但僅在必要時添加滾動條</span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS佈局-浮動"><a href="#CSS佈局-浮動" class="headerlink" title="CSS佈局 浮動"></a>CSS佈局 浮動</h3><p><code>float</code>為定位元素該如何浮動，屬性有以下四個值，可在同一容器狀況下，使用繞文排圖上、或製作導覽列使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">none</span>- 預設，元素不浮動</span><br><span class="line"><span class="attribute">left</span>- 元素浮動到容器的左側</span><br><span class="line"><span class="attribute">right</span>- 元素浮動到容器的右側</span><br><span class="line">inherit- 元素繼承其父元素的數值</span><br></pre></td></tr></table></figure><p><code>clear</code>指定<code>float</code>浮動元素旁邊的元素應該發生什麼，可以有以下值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">none</span>- 預設，元素容器不會被往下推</span><br><span class="line"><span class="attribute">left</span>- 元素容器被推到左浮動元素下方</span><br><span class="line"><span class="attribute">right</span>- 元素容器被推到右浮動元素下方</span><br><span class="line">both- 元素容器被推到左右浮動元素的下方</span><br><span class="line">inherit- 元素從其父元素繼承值</span><br></pre></td></tr></table></figure><ul><li>如果使用浮動元素<code>float</code>，導致排版時對齊困難，可在預排版的元素和浮動元素<code>float</code>外在另用一個div包起，以下舉例。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>並可合併使用 <code>box-sizing: border-box;</code> 取消padding、margin對排版的影響</li></ul><h3 id="CSS各種對齊"><a href="#CSS各種對齊" class="headerlink" title="CSS各種對齊"></a>CSS各種對齊</h3><ul><li>將塊元素水平居中需設置<code>width</code>後，再加<code>margin: auto;</code></li><li>將文本水平居中元素內，使用<code>text-align: center;</code></li><li>對齊元素使用 <code>position: absolute;</code> 再加上下左右: 0;</li><li><code>padding</code>、<code>line-height</code>也是兩個可達成對齊的元素</li></ul><h3 id="CSS組合器"><a href="#CSS組合器" class="headerlink" title="CSS組合器"></a>CSS組合器</h3><p>有四種不同的組合</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">後代選擇器（空格）指定單一特定元素</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span></span><br><span class="line">子選擇器 (&gt;) 指定父元素內多個同樣的元素</span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span></span><br><span class="line">相鄰兄弟選擇器 (+) 必須有相同的父元素</span><br><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span></span><br><span class="line">通用兄弟選擇器 (~) 指定元素下一個兄弟所有元素</span><br><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span></span><br></pre></td></tr></table></figure><h3 id="CSS偽類"><a href="#CSS偽類" class="headerlink" title="CSS偽類"></a>CSS偽類</h3><p>定義元素的特別狀態</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> 未點擊時的樣子</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>  點擊後顯示的樣子</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> 滑鼠停留在元素上的樣子</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> 點擊不放時的樣子</span><br></pre></td></tr></table></figure><ul><li><code>:hover</code>結合<code>display: none;</code>可以讓滑鼠移到指定元素時顯示隱藏的元素</li><li><code>:first-child</code>指定另一個元素的第一個子元素做樣式<blockquote><p>文章參考 <a href="https://www.w3schools.com/css/css_float_clear.asp">W3C</a></p></blockquote></li></ul><h4 id="CSS不透明度"><a href="#CSS不透明度" class="headerlink" title="CSS不透明度"></a>CSS不透明度</h4><ul><li><code>opacity</code>範圍0.0~1.0，值越低，越透明</li><li>通常搭配使用<code>:hover</code>，當滑鼠懸停時，強調圖片</li><li>注意，選擇元素的子原素全部繼承相同的透明度</li></ul><h4 id="CSS圓角"><a href="#CSS圓角" class="headerlink" title="CSS圓角"></a>CSS圓角</h4><ul><li><code>border-radius</code>更改圓角<ul><li>四個值 (左上、右上、右下、左下)</li><li>三個值 (左上、右上+左下、右下)</li><li>兩個值 (左上+右下、右上+左下)</li></ul></li></ul><h4 id="CSS顏色"><a href="#CSS顏色" class="headerlink" title="CSS顏色"></a>CSS顏色</h4><ul><li><code>transparent</code>顏色透明度0 &#x3D; rgba(0,0,0,0)</li><li><code>currentcolor</code>變數，保存當前元素的顏色值，可延伸套用在子元素 (需先在元素指定一個顏色)</li><li><code>inherit</code>繼承父元素的值，適用任何CSS、HTML中</li><li>漸層顏色有三種類型<ul><li>線性漸層，至少兩個色標<code>linear-gradient(direction, color-stop1, color-stop2, ...);</code> <ul><li>預設為上到下<ul><li><code>background-image: linear-gradient(red, yellow);</code></li></ul></li><li>由左至右<ul><li><code> background-image: linear-gradient(red, yellow);</code></li></ul></li><li>對角線<ul><li><code>background-image: linear-gradient(to bottom right, red, yellow);</code></li></ul></li><li>使用透明度<ul><li><code>background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));</code></li></ul></li><li>重複性階梯<ul><li><code>background-image: repeating-linear-gradient(red, yellow 10%, green 20%);</code></li></ul></li></ul></li><li>徑向漸層，至少兩個色標<code>background-image: radial-gradient(shape size at position, start-color, ..., last-color);</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;CSS介紹&quot;&gt;&lt;a href=&quot;#CSS介紹&quot; class=&quot;headerlink&quot; title=&quot;CSS介紹&quot;&gt;&lt;/a&gt;CSS介紹&lt;/h3&gt;&lt;p&gt;樣式定義通常保存在外部的.css文件中，呈現的樣式如下 :&lt;br&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20220910/20151122MhoydxlMvw.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/20220910/20151122MhoydxlMvw.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selector 選擇器、Declaration 宣告、Properties 屬性、Value 值，多個屬性以&lt;code&gt;;&lt;/code&gt;分號分開。&lt;/li&gt;
&lt;li&gt;屬性值和單位之間不能加空白 錯誤示範&lt;code&gt;margin-left: 20 px;&lt;/code&gt; 正確示範&lt;code&gt;margin-left: 20px;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="css" scheme="https://22aliang.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>html基礎筆記</title>
    <link href="https://22aliang.github.io/2024/05/13/HTML%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    <id>https://22aliang.github.io/2024/05/13/HTML%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/</id>
    <published>2024-05-13T11:15:10.045Z</published>
    <updated>2024-05-13T11:24:08.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><blockquote><p><a href="https://code.visualstudio.com/">官網</a> ｜ <a href="https://github.com/microsoft/vscode">github</a> ｜ <a href="https://marketplace.visualstudio.com/search?target=VSCode&category=Keymaps&sortBy=Relevance">擴充元件</a></p></blockquote><p>Visual Studio Code（簡稱 VS Code）是一個使用 Monaco Editor 作為其底層的免費原始碼程式碼編輯器，會選擇作為開發用軟體，有以下幾個優點</p><ul><li>程式碼重構</li><li>內建命令列工具</li><li>內建Git版本控制系統</li><li>支援Emmt</li><li>豐富的擴充元件等…</li></ul><span id="more"></span><blockquote><p>官方安裝流程<a href="https://docs.microsoft.com/zh-tw/learn/modules/develop-web-apps-with-vs-code/2-installation-and-tour">官方文件</a></p></blockquote><hr><h3 id="快捷鍵"><a href="#快捷鍵" class="headerlink" title="快捷鍵"></a>快捷鍵</h3><p>列幾個特別、好用的快捷鍵<br><code>Ctrl + D</code> 快速選取下一個同名變數<br><code>Ctrl + H</code> 取代<br><code>Ctrl + P </code> 選取檔案<br><code>Ctrl+ Shift+ L</code> 一次選取檔案內所有相同文字<br><code>Ctrl + Shift + K</code> 整行刪除<br><code>Ctrl + Alt + ↑/↓</code> 垂直選取<br><code>Alt + 左鍵 </code>多重選取<br><code>Alt + ↑/↓ </code>程式碼整行搬動<br><code>F2</code> 重新命名變數名稱</p><blockquote><p>詳細<a href="https://github.com/Microsoft/vscode-tips-and-tricks">官方文件</a></p></blockquote><hr><h3 id="擴充元件-Extensions"><a href="#擴充元件-Extensions" class="headerlink" title="擴充元件 Extensions"></a>擴充元件 Extensions</h3><ul><li><p><strong>Chinese (Traditional)</strong> 中文化</p></li><li><p><strong>Live Server</strong> 啟動本機端伺服器，每次存檔後，會自動更新瀏覽器畫面</p></li><li><p><strong>Code Spell Checker</strong> 幫你抓錯字呀</p></li><li><p><strong>GitLins</strong> Git版本控制系統工具 <a href="https://docs.microsoft.com/zh-tw/shows/vs-code-livestreams/10-things-about-gitlens">官方影片</a></p></li><li><p><strong>Material Icon Theme</strong> 美美的icon</p></li><li><p><strong>indent-rainbow</strong> 縮排給你一道彩虹</p></li><li><p><strong>prettier</strong> 排版程式碼</p></li><li><p><strong>ESLint</strong> 檢查JavaScript程式碼是否符合規則</p></li></ul><blockquote><p>prettier、ESLint不相容，同時啟用會有問題，卡斯伯部落格解 <a href="https://www.casper.tw/development/2021/04/11/vscode-eslint-prettier/">這樣做</a></p></blockquote><hr><h3 id="Emmt"><a href="#Emmt" class="headerlink" title="Emmt"></a>Emmt</h3><blockquote><p>學習可以增加開發速度，以下列一些基本的應用<a href="https://docs.emmet.io/cheat-sheet/">官方文件</a></p></blockquote><p><strong>子元素 Child : <code>&gt;</code><strong>｜</strong>舉例</strong> <code>div&gt;ul&gt;li</code><strong>+tab</strong> ，會變成 ↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>同一層 Sibling : <code>+</code><strong>｜</strong>舉例</strong> <code>div+p+bq</code><strong>+tab</strong> ，會變成 ↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;blockquote&gt;&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure><p><strong>重複 Multiplication : <code>*</code><strong>｜</strong>舉例</strong> <code>ul&gt;li*5</code><strong>+tab</strong> ，會變成 ↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>群組 Grouping : <code>()</code><strong>｜</strong>舉例</strong> <code>(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</code><strong>+tab</strong> ，會變成 ↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">        &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">        &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">        &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">    &lt;/dl&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><p><strong>Class : <code>.</code></strong> 、<strong>ID : <code>#</code><strong>｜</strong>舉例</strong> <code>div#header+div.page+div#footer.class1.class2.class3</code><strong>+tab</strong> ，會變成 ↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;header&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;page&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;footer&quot; class=&quot;class1 class2 class3&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>Class加變數 Item numbering : <code>$</code><strong>｜</strong>舉例</strong> <code>ul&gt;li.item$*5</code><strong>+tab</strong> ，會變成 ↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li class=&quot;item1&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item2&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item3&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item4&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;item5&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>標籤內文字 Text : <code>&#123;&#125;</code><strong>｜</strong>舉例</strong> <code>a&#123;Click me&#125;</code><strong>+tab</strong> ，會變成 ↓</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&quot;&gt;Click me&lt;/a&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="推薦Google-Chrome插件"><a href="#推薦Google-Chrome插件" class="headerlink" title="推薦Google Chrome插件"></a>推薦Google Chrome插件</h3><ul><li><p><strong>Dark Reader</strong> 網頁啟用黑夜模式 愛護你的眼睛</p></li><li><p><strong>JSON Formatter</strong> 網頁開json不再眼花</p></li><li><p><strong>Wappalyzer - Technology profiler</strong>可以看網頁使用什麼樣的語言、技術</p></li><li><p><strong>Wappalyzer - Technology profiler</strong> 漂亮的截圖整個頁面</p></li></ul><hr><h3 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h3><ul><li>前端開發你們都用空白鍵還是TAB ? <a href="https://jason-memo.dev/posts/prefer-tab-over-space-for-a11y/">延伸閱讀</a></li><li>程式語言有沒有支援 ? <a href="https://caniuse.com/">CAN I USE ___ ? </a></li><li>我不懂，但我就怕被罵，到底該怎麼發問 ? <a href="https://israynotarray.com/learnexp/20200112/1752686187/">讓RAY教你</a></li></ul><h2 id="HyperText-Markup-Language-超文本標記語言"><a href="#HyperText-Markup-Language-超文本標記語言" class="headerlink" title="HyperText Markup Language 超文本標記語言"></a>HyperText Markup Language 超文本標記語言</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p><a href="https://developer.mozilla.org/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Getting_started">MDN</a> ｜<a href="https://html.spec.whatwg.org/multipage/indices.html#element-content-categories">官方文件</a>｜<a href="https://www.w3schools.com/html/html_intro.asp">W3C</a><br>　以一個人來做比喻，描述網頁中三大巨頭的關係就會像是: HTML為網頁中的骨架，CSS為網頁中的外皮、JavaScript為網頁的動作。<br>　html看起來很簡單，要用div打完一個文件網頁也可以運作。但html標籤(Tag)寫得好、用的好，不僅能幫助瀏覽器(Web Browser)、網路(Network)、網頁(Web site)了解你在寫什麼，也可以增加維護(Management)的方便性 !</p></blockquote><hr><h3 id="什麼是HTML"><a href="#什麼是HTML" class="headerlink" title="什麼是HTML ?"></a>什麼是HTML ?</h3><ul><li>超文本標記語言 (非程式語言)</li><li>告訴瀏覽器如何顯示內容</li><li>尖括號(angle brackets)包圍HTML元素(tag) ex: <code>&lt;html&gt;</code></li><li>組成如圖<img src="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started/grumpy-cat-small.png"><br><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started/grumpy-cat-small.png">圖源</a> ｜內容(content) 、 元素(element)、標籤(Tag)</li><li>HTML元素不分英文大小寫，建議使用小寫英文方便維護、乾淨、易寫</li><li>避免太長的代碼行、空白以space兩格為主流</li><li>由<a href="https://www.daconote.com/html-nested/">巢狀HTML元素(Nesting elements)</a>組成</li><li>為<a href="https://ithelp.ithome.com.tw/articles/10202689">DOM樹</a> 結構</li><li>分為塊狀元素(block elements)、行內元素(inline elements)</li><li>特殊字元，要使用必須以&amp;(ampersand)開頭，並以分號 ; (semi-colon)結尾｜<a href="https://www.w3schools.com/html/html_entities.asp">符號</a>｜<a href="https://www.w3schools.com/html/html_emojis.asp">Emojis</a>｜</li></ul><h3 id="什麼是HTML的屬性-attribute"><a href="#什麼是HTML的屬性-attribute" class="headerlink" title="什麼是HTML的屬性(attribute) ?"></a>什麼是HTML的屬性(attribute) ?</h3><ul><li>任何HTML元素都可以有元素</li><li>屬性提供元素附加訊息</li><li>在開始標籤中指定</li><li>以名稱&#x2F;值的寫法，例<code>class=&quot;food&quot;</code></li><li>HTML的屬性使用雙引號<code>class=&quot; &quot;</code>、單引號都可以<code>class=&#39; &#39;</code>、建議使用雙引號方便維護</li><li><code>class</code>屬性可共用、可併用、不能數字開頭</li><li><code>id</code>屬性不可共用、不可併用、不能數字開頭、只能使用一次</li><li><code>title</code> 定義有關元素額外信息</li></ul><hr><h3 id="HTML-語義元素-Semantic-Elements"><a href="#HTML-語義元素-Semantic-Elements" class="headerlink" title="HTML 語義元素(Semantic Elements)"></a>HTML 語義元素(Semantic Elements)</h3><p>HTML5出現之後，改變以往用<code>&lt;div&gt;</code>來做寫整份文件有所不同，正確使用這些帶有語意的標籤，可以快速抓到網頁架構和每個區塊的位置、達成<code>SEO優化</code>，讓瀏覽器、搜尋引擎更好閱讀文件，爬蟲更好爬到你的文章。<br><img src="https://ithelp.ithome.com.tw/upload/images/20220907/20151122N8LPTNUOkU.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20220907/20151122N8LPTNUOkU.jpg"><br>上圖 ↑ 是方便整理邏輯，自己做的架構圖(很粗略)，語意化標籤內可使用的元素只是舉例，有其他錯誤歡迎糾正</p><h4 id="lt-main-gt-｜重點區塊"><a href="#lt-main-gt-｜重點區塊" class="headerlink" title="&lt;main&gt;｜重點區塊"></a><code>&lt;main&gt;</code>｜重點區塊</h4><ul><li>網頁的主要內容，一頁HTML只能出現一次</li><li>注意不要規劃到整份HTML都是重點</li></ul><h4 id="lt-nav-gt-｜導覽列"><a href="#lt-nav-gt-｜導覽列" class="headerlink" title="&lt;nav&gt;｜導覽列"></a><code>&lt;nav&gt;</code>｜導覽列</h4><ul><li>包含的內容通常都是連結到其他頁面、或重點區塊<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首頁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about.html&quot;</span>&gt;</span>關於我們<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/contact.html&quot;</span>&gt;</span>聯繫我們<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="lt-header-gt-｜標題"><a href="#lt-header-gt-｜標題" class="headerlink" title="&lt;header&gt;｜標題"></a><code>&lt;header&gt;</code>｜標題</h4><ul><li>為<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#flow_content">Flow content</a></li><li>可視為標題區塊，可在網頁多次出現</li><li>不能放在<code>&lt;footer&gt;</code>、<code>&lt;address&gt;</code>或另一個<code>&lt;header&gt;</code>裡面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>什麼是原子習慣 ? <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>細微改變帶來巨大成就的實證法則<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者： 詹姆斯‧克利爾<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="lt-aside-gt-｜側邊欄"><a href="#lt-aside-gt-｜側邊欄" class="headerlink" title="&lt;aside&gt;｜側邊欄"></a><code>&lt;aside&gt;</code>｜側邊欄</h4><ul><li>用在放與網頁主要內容無關的東西，像推薦文章、廣告等…<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>鐵人賽好難<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>亞馬遜賣家教學<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你相信這東西在亞馬遜只要賣1美元嗎<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="lt-section-gt-｜定義文檔中的一個部分"><a href="#lt-section-gt-｜定義文檔中的一個部分" class="headerlink" title="&lt;section&gt;｜定義文檔中的一個部分"></a><code>&lt;section&gt;</code>｜定義文檔中的一個部分</h4><ul><li>使用主題分組，通常帶有標題</li><li>標籤作用單純為排版需求，應改用<code>div</code></li><li>標籤作用為分類文章區塊，推薦改用<code>&lt;article&gt;</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>標題1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>標題1的介紹<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>標題2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>標題2的介紹<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="lt-article-gt-｜指定獨立的、自包含的內容"><a href="#lt-article-gt-｜指定獨立的、自包含的內容" class="headerlink" title="&lt;article&gt;｜指定獨立的、自包含的內容"></a><code>&lt;article&gt;</code>｜指定獨立的、自包含的內容</h4><ul><li>常用在報紙文章、用戶評論、產品資訊、部落格文章<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文章1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文章1的內文<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文章2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文章2的內文<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文章3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文章3的內文<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;section&gt;</code>可以包<code>&lt;article&gt;</code>、<code>&lt;article&gt;</code>也可以包<code>&lt;section&gt;</code>，使用時機可以參考 <a href="https://html.spec.whatwg.org/multipage/sections.html#outline">官方文件最底下有解釋</a> ｜ <a href="https://stackoverflow.com/questions/7549561/section-vs-article-html5">stack overflow討論</a></li><li>另外<code>&lt;h1&gt;</code>可以在各<code>&lt;article&gt;</code>、<code>&lt;article&gt;</code>區塊中出現，不用限制一份文件只能出現一次。</li></ul><h4 id="lt-figure-gt-、-lt-figcaption-gt-｜獨立的插圖、圖表、照片等、及它的標題"><a href="#lt-figure-gt-、-lt-figcaption-gt-｜獨立的插圖、圖表、照片等、及它的標題" class="headerlink" title="&lt;figure&gt;、&lt;figcaption&gt;｜獨立的插圖、圖表、照片等、及它的標題"></a><code>&lt;figure&gt;</code>、<code>&lt;figcaption&gt;</code>｜獨立的插圖、圖表、照片等、及它的標題</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;pic_frog.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;呱吉&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>呱吉很可愛<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="lt-footer-gt-｜定義文檔或部分的頁腳"><a href="#lt-footer-gt-｜定義文檔或部分的頁腳" class="headerlink" title="&lt;footer&gt;｜定義文檔或部分的頁腳"></a><code>&lt;footer&gt;</code>｜定義文檔或部分的頁腳</h4><ul><li>常用在作者、版權、聯繫、網站地圖、相關文件等…<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者艸良<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:lisa5566407@gmail.com&quot;</span>&gt;</span>聯絡我 :lisa5566407@gmail.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="lt-details-gt-｜定義用戶可以打開關閉其他詳細信息"><a href="#lt-details-gt-｜定義用戶可以打開關閉其他詳細信息" class="headerlink" title="&lt;details&gt;｜定義用戶可以打開關閉其他詳細信息"></a><code>&lt;details&gt;</code>｜定義用戶可以打開關閉其他詳細信息</h4><ul><li><code>&lt;summary&gt;</code>定義<code>&lt;details&gt;</code>元素的標頭</li></ul><blockquote><p>延伸閱讀 :<br><code>&lt;head&gt;</code>跟<code>&lt;header&gt;</code>差在哪 ?  <a href="https://stackoverflow.com/search?q=%5Bhtml%5D+head+header&s=17d11844-6240-49ae-b7f3-a4332dd8c9f3&s=4e55ee54-8067-48df-b93d-6d0e92ceb7e2">stack overflow討論</a> ｜ <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/header">MDN header</a> ｜ <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/head">MDN head</a> ｜ <a href="https://html.spec.whatwg.org/multipage/sections.html#outline">官方文件</a><br><a href="http://diveintohtml5.info/semantics.html">MARK PILGRIM｜詳細解釋HTML5的文件</a></p></blockquote><hr><h3 id="額外收入-meta-tag"><a href="#額外收入-meta-tag" class="headerlink" title="額外收入 meta tag"></a>額外收入 meta tag</h3><p><code>&lt;meta&gt;</code>是給瀏覽器、搜尋引擎看的，作用在<code>SEO優化</code>用，寫在<code>＜head＞</code>裡面，以下整理了一些<code>&lt;meta&gt;</code>作為範例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- FOR Goole的&lt;meta&gt;參考 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;關鍵詞&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;作者&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網頁描述，不超過150字符&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- RWD用 隨著設備的不同而變化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span> /&gt;</span></span><br><span class="line">width=device-width——自動符合不同螢幕預設最佳解析度</span><br><span class="line">initial-scale=1——螢幕畫面的初始縮放比例為 100%</span><br><span class="line">maximum-scale=1——設定畫面的最大縮放比例</span><br><span class="line">minimum-scale=1——設定畫面的最小縮放比例</span><br><span class="line">user-scalable=no——不允許使用者改變縮放比例</span><br><span class="line"><span class="comment">&lt;!-- 搜尋引擎索引方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span> /&gt;</span></span><br><span class="line">all：文件將被檢索，且頁面上的連結可以被查詢</span><br><span class="line">none：文件將不被檢索，且頁面上的連結不可以被查詢</span><br><span class="line">index：文件將被檢索</span><br><span class="line">follow：頁面上的連結可以被查詢</span><br><span class="line">noindex：文件將不被檢索</span><br><span class="line">nofollow：頁面上的連結不可以被查詢。</span><br></pre></td></tr></table></figure><p>更多關於<code>&lt;meta&gt;</code>標籤的寫法可以參考 <a href="https://moz.com/blog/meta-data-templates-123">這裡</a></p><blockquote><p><a href="https://www.youtube.com/watch?v=AlLwsrTOAgU">學習影片</a></p></blockquote><h3 id="基礎"><a href="#基礎" class="headerlink" title="基礎"></a><strong>基礎</strong></h3><h4 id="lt-DOCTYPE-html-gt-｜聲明此文檔HTML5文檔"><a href="#lt-DOCTYPE-html-gt-｜聲明此文檔HTML5文檔" class="headerlink" title="&lt;!DOCTYPE html&gt;｜聲明此文檔HTML5文檔"></a><code>&lt;!DOCTYPE html&gt;</code>｜聲明此文檔HTML5文檔</h4><ul><li>不分大小寫，一個文件出現一次，寫在頁面最頂部</li></ul><h4 id="lt-html-gt-｜根元素"><a href="#lt-html-gt-｜根元素" class="headerlink" title="&lt;html&gt;｜根元素"></a><code>&lt;html&gt;</code>｜根元素</h4><ul><li><code>lang</code><strong>語言屬性</strong>｜聲明網頁的語言，幫助搜索引擎和瀏覽器更好搜尋到你的網頁</li></ul><h4 id="lt-head-gt-｜"><a href="#lt-head-gt-｜" class="headerlink" title="&lt;head&gt;｜"></a><code>&lt;head&gt;</code>｜</h4><ul><li>父元素只能是 <code>&lt;html&gt;</code> ，用來放 <code>&lt;title&gt;</code>、<code>&lt;style&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>和<code>&lt;base&gt;</code>等元數據的容器</li><li>一個網頁只能出現一個</li><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>為避免亂碼，必放 <a href="https://www.w3schools.com/html/html_charset.asp">UTF-8介紹</a></li></ul><h4 id="lt-title-gt-｜定義瀏覽器頁籤、添加到我的最愛、搜尋引擎等標題"><a href="#lt-title-gt-｜定義瀏覽器頁籤、添加到我的最愛、搜尋引擎等標題" class="headerlink" title="&lt;title&gt;｜定義瀏覽器頁籤、添加到我的最愛、搜尋引擎等標題"></a><code>&lt;title&gt;</code>｜定義瀏覽器頁籤、添加到我的最愛、搜尋引擎等標題</h4><ul><li><code>對SEO重要</code>，必須的屬性</li><li>更換顯示在頁籤的icon，在<code>&lt;title&gt;</code>寫上<ul><li><code>&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;/images/favicon.ico&quot;&gt;</code></li></ul></li></ul><hr><h3 id="行內、塊級元素"><a href="#行內、塊級元素" class="headerlink" title="行內、塊級元素"></a><strong>行內、塊級元素</strong></h3><ul><li>塊級元素(Block-level Elements)<ul><li>塊狀元素 : 預設有邊距、左右稱滿、跳行新開始<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下為塊狀元素 --&gt;</span></span><br><span class="line">/大區塊/ <span class="tag">&lt;<span class="name">header</span>&gt;</span> <span class="tag">&lt;<span class="name">nav</span>&gt;</span> <span class="tag">&lt;<span class="name">article</span>&gt;</span> <span class="tag">&lt;<span class="name">section</span>&gt;</span> <span class="tag">&lt;<span class="name">main</span>&gt;</span> <span class="tag">&lt;<span class="name">aside</span>&gt;</span> <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">/小區塊/ <span class="tag">&lt;<span class="name">address</span>&gt;</span> <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span> <span class="tag">&lt;<span class="name">video</span>&gt;</span> <span class="tag">&lt;<span class="name">figure</span>&gt;</span> <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">/列表、表格/<span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="tag">&lt;<span class="name">ol</span>&gt;</span> <span class="tag">&lt;<span class="name">table</span>&gt;</span> <span class="tag">&lt;<span class="name">dd</span>&gt;</span> <span class="tag">&lt;<span class="name">dl</span>&gt;</span> <span class="tag">&lt;<span class="name">dt</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span>&gt;</span> <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span> </span><br><span class="line">/文本用/ <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>-<span class="tag">&lt;<span class="name">h6</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span> <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">/圖形/ <span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line">/其他/<span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>行內元素(Inline Elements)<ul><li>行內元素 : 能和其他元素同行、只佔內容寬度</li><li><code>行內元素</code>裡面不能有<code>塊狀元素</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下為行內元素 --&gt;</span></span><br><span class="line">/可點擊/ <span class="tag">&lt;<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span>&gt;</span> <span class="tag">&lt;<span class="name">map</span>&gt;</span> <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">/輸入/ <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">/圖片用/ <span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line">/定義文本內容中的特殊字句用/ <span class="tag">&lt;<span class="name">abbr</span>&gt;</span> <span class="tag">&lt;<span class="name">cite</span>&gt;</span> <span class="tag">&lt;<span class="name">dfn</span>&gt;</span> <span class="tag">&lt;<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">var</span>&gt;</span></span><br><span class="line">/文本樣式/ <span class="tag">&lt;<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">bdo</span>&gt;</span> <span class="tag">&lt;<span class="name">code</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">kbd</span>&gt;</span> <span class="tag">&lt;<span class="name">q</span>&gt;</span> <span class="tag">&lt;<span class="name">samp</span>&gt;</span> <span class="tag">&lt;<span class="name">small</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">sub</span>&gt;</span> <span class="tag">&lt;<span class="name">sup</span>&gt;</span> <span class="tag">&lt;<span class="name">time</span>&gt;</span></span><br><span class="line">/空元素/<span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">/執行計算顯示/ <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">/引入/ <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">/HTML不支援的傢伙們/ <span class="tag">&lt;<span class="name">acronym</span>&gt;</span> <span class="tag">&lt;<span class="name">big</span>&gt;</span> <span class="tag">&lt;<span class="name">object</span>&gt;</span> <span class="tag">&lt;<span class="name">tt</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="連結"><a href="#連結" class="headerlink" title="連結"></a><strong>連結</strong></h3><h4 id="lt-a-gt-｜定義一個超連結"><a href="#lt-a-gt-｜定義一個超連結" class="headerlink" title="&lt;a&gt;｜定義一個超連結"></a><code>&lt;a&gt;</code>｜定義一個超連結</h4><ul><li><code>href</code><strong>屬性</strong>｜指定連結到指定的URL，常在<code>&lt;a&gt;</code>、<code>&lt;link&gt;</code>等元素上使用<ul><li>網頁載入<code>href</code>時，不會停止繼續渲染<ul><li>未點擊過的連結｜下劃線、藍色</li><li>點擊過的連結｜下劃線、紫色</li><li>持續點擊｜下劃線、紅色</li></ul></li><li><code>target</code><strong>屬性</strong>｜打開連結的位置<ul><li><code>target=&quot;_self&quot;</code>｜預設，點擊後顯示在目前的視窗</li><li><code>target=&quot;_blank&quot;</code>｜點擊後開啟新視窗</li><li><code>target=&quot;_parent&quot;</code>｜點擊後開啟在目前的視窗</li><li><code>target=&quot;_top&quot;</code>｜點擊後頂端開啟視窗</li></ul></li><li><code>title</code><strong>屬性</strong>｜滑鼠移到元素上顯示的文本</li></ul></li><li><code>href</code><strong>屬性</strong>｜在屬性內部寫上以下屬性，可以做到特殊效果<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;(連結的URL)&quot;</span> <span class="attr">download</span>=<span class="string">&quot;(檔名)&quot;</span>&gt;</span>下載圖片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;lisa5566407@gmail.com&quot;</span>&gt;</span>寄信到我的信箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:(電話號碼)&quot;</span>&gt;</span>撥打電話<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://line.me/ti/p/@你的LINE ID&quot;</span>&gt;</span>加入LINE好友<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用<code>ID</code>建立快速跳轉長頁面章節的書籤<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先使用ID創建書籤</span><br><span class="line">`<span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;C4&quot;</span>&gt;</span>章節4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>`</span><br><span class="line">可在導覽列寫一個按鈕</span><br><span class="line">`<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#C4&quot;</span>&gt;</span>跳到章節4<span class="tag">&lt;/<span class="name">a</span>&gt;</span>`</span><br><span class="line">或寫在另外一個頁面</span><br><span class="line">`<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;html_demo.html#C4&quot;</span>&gt;</span>跳到章節4<span class="tag">&lt;/<span class="name">a</span>&gt;</span>`</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a><strong>圖片</strong></h3><h4 id="lt-img-gt-｜在-HTML-頁面中加入圖像"><a href="#lt-img-gt-｜在-HTML-頁面中加入圖像" class="headerlink" title="&lt;img&gt;｜在 HTML 頁面中加入圖像"></a><code>&lt;img&gt;</code>｜在 HTML 頁面中加入圖像</h4><ul><li>每張圖片都指定<code>alt</code>、<code>width</code>、<code>height</code>、取名使用小寫英文，減少錯誤空間。</li></ul><ol><li><code>src</code> <strong>屬性</strong>(Source File)｜指定 URL，常在<code>&lt;img&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;iframe&gt;</code>等元素上使用<ul><li>網頁載入<code>src</code>時，會暫停瀏覽器渲染，直到該資源載入完畢。</li><li>相對(Absolute)路徑 : 指向外部圖像連結 ( 注意圖片失效、版權 )</li><li>絕對(Relative)路徑 : 指向本機或託管平台的連結 <code>推薦</code><ul><li>同層目錄中的 img檔 <code>src=&quot;img.png&quot;</code></li><li>同層目錄中 pic資料夾的 img檔 <code>src=&quot;./pic/img.png&quot;</code></li><li>上一層目錄中的 pic資料夾的 img檔 <code>src=&quot;../pic/img.png&quot;</code></li></ul></li></ul></li><li><code>alt</code> <strong>屬性</strong> (Alternative Text)｜無法顯示圖片時顯示的文字，無障礙網頁加分</li><li>最少應包含<code>width</code>屬性，指定圖像的寬度，<code>max-width: 100%</code> 為響應式圖片寫法，會在必要時縮小</li></ol><ul><li><strong>圖片的疑難雜症</strong>｜<a href="https://www.shutterstock.com/zh-Hant/blog/resize-images-for-web">參考shutterstock</a>｜<a href="https://www.casper.tw/design/2018/10/28/image-format/">卡斯伯應用參考</a><ul><li>jpg：破壞性的檔案壓縮方式，降低檔案尺寸、但也會導致品質降低</li><li>png：壓縮比較低的圖片格式，檔案較大、品質較好、背景可設定透明</li><li>svg：向量的圖片格式，放大不會失真，以字標示產生，檔案較小</li><li>滿版圖片 2400px x 1600px</li><li>內容圖片 最寬1500px、最長1000px</li><li>一張圖片的大小最好不要超過500KB</li></ul></li><li>CSS<strong>屬性</strong><code>background-image: url(&#39;img_girl.jpg&#39;);</code>可以把圖片寫在HTML元素裡面<ul><li>圖片無滿版，預設水平、垂直重複延伸</li><li><code>background-repeat: no-repeat;</code>取消圖片重複</li><li>圖片滿版請使用<code>background-attachment: fixed;</code>和<code>background-size: cover;</code></li></ul></li></ul><hr><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a><strong>文本</strong></h3><h4 id="lt-h1-gt-96-96-｜顯示標題或副標題"><a href="#lt-h1-gt-96-96-｜顯示標題或副標題" class="headerlink" title="&lt;h1&gt;~&#96;&#96;｜顯示標題或副標題"></a><code>&lt;h1&gt;</code>~&#96;<h6>&#96;｜顯示標題或副標題</h4><ul><li>應以少於三個層級為目標</li><li>注意層級順序</li><li>預設有一些邊距，下圖↓ 為<code>&lt;h1&gt;</code>在google開發者工具中，顯示的預設屬性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    &lt;!--<span class="number">2em</span> = <span class="number">32</span> px --&gt;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">margin-block-start</span>: <span class="number">0.67em</span>;</span><br><span class="line">    <span class="attribute">margin-block-end</span>: <span class="number">0.67em</span>;</span><br><span class="line">    <span class="attribute">margin-inline-start</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin-inline-end</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="lt-p-gt-｜-Paragraph-定義一個段落"><a href="#lt-p-gt-｜-Paragraph-定義一個段落" class="headerlink" title="&lt;p&gt;｜(Paragraph) 定義一個段落"></a><code>&lt;p&gt;</code>｜(Paragraph) 定義一個段落</h3><ul><li>對文本中某一段落文字有特別樣是需求，請使用<code>&lt;span&gt;</code>、勿用<code>&lt;div&gt;</code></li><li>段落會從新行開始，預設有一些邊距，下圖↓ 為<code>&lt;p&gt;</code>在google開發者工具中顯示</li><li>不管<code>&lt;p&gt;</code>標籤裡的文字內容多亂，HTML看到都是整齊一行的<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-block-start</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-block-end</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-inline-start</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin-inline-end</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>整理一下 ↓ ( 另外em是相對單位，會繼承（父的屬性值）&#x2F; 倍數，可<a href="https://ithelp.ithome.com.tw/articles/10240641">參考</a> )</li></ul><p>標籤 | 瀏覽器預設 | 實際<br>————- | ————-<br>html | 1em | 16px<br>p | 1em | 16px<br>h1 | 2em | 32px<br>h2 | 1.5em | 24px<br>h3 | 1.17em | 18.72px<br>h4 | 1.33em | 21.28px</p><h4 id="lt-hr-gt-｜空元素-Empty-Elements-、顯示為水平線"><a href="#lt-hr-gt-｜空元素-Empty-Elements-、顯示為水平線" class="headerlink" title="&lt;hr&gt;｜空元素(Empty Elements)、顯示為水平線"></a><code>&lt;hr&gt;</code>｜空元素(Empty Elements)、顯示為水平線</h4><ul><li>語意為 HTML 頁面中的主題中斷、分隔內容</li></ul><h4 id="lt-br-gt-｜空元素-Empty-Elements-、換行"><a href="#lt-br-gt-｜空元素-Empty-Elements-、換行" class="headerlink" title="&lt;br&gt;｜空元素(Empty Elements)、換行"></a><code>&lt;br&gt;</code>｜空元素(Empty Elements)、換行</h4><ul><li>會打斷文章內容，若內容相同，應使用<code>&lt;span&gt;</code>換行</li></ul><h4 id="lt-pre-gt-｜定義了預格式化的文本"><a href="#lt-pre-gt-｜定義了預格式化的文本" class="headerlink" title="&lt;pre&gt;｜定義了預格式化的文本"></a><code>&lt;pre&gt;</code>｜定義了預格式化的文本</h4><ul><li>使用<a href="https://medium.com/unalai/%E8%AA%8D%E8%AD%98-html-pre-tag-3be6d5f32e54">參考</a></li></ul><h4 id="lt-span-gt-｜段落中，改變一小段"><a href="#lt-span-gt-｜段落中，改變一小段" class="headerlink" title="&lt;span&gt;｜段落中，改變一小段"></a><code>&lt;span&gt;</code>｜段落中，改變一小段</h4><ul><li>預設為<code>行內元素</code>，無語意</li></ul><h4 id="lt-div-gt-｜多用在改變樣式"><a href="#lt-div-gt-｜多用在改變樣式" class="headerlink" title="&lt;div&gt;｜多用在改變樣式"></a><code>&lt;div&gt;</code>｜多用在改變樣式</h4><ul><li>預設為<code>區塊元素</code>，無語意</li></ul><h4 id="HTML-文本元素-Text-Formatting-、引用-Quotation-、引用元素-Citation-Elements"><a href="#HTML-文本元素-Text-Formatting-、引用-Quotation-、引用元素-Citation-Elements" class="headerlink" title="HTML 文本元素(Text Formatting)、引用(Quotation)、引用元素(Citation Elements)"></a>HTML 文本元素(Text Formatting)、引用(Quotation)、引用元素(Citation Elements)</h4><p>看到實際顯示的樣子比較準確，所以有用CodePen整理了一下<a href="https://codepen.io/momoninainai/pen/KKRNRXN">整理在這裡</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>沒什麼意義的粗體，應改用css設定or<span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">如果是重要文字應取代b，定義<span class="tag">&lt;<span class="name">strong</span>&gt;</span>重要的文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>沒什麼意義的斜體<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">屏幕閱讀器會用重音強調發音，定義<span class="tag">&lt;<span class="name">em</span>&gt;</span>強調的文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">定義<span class="tag">&lt;<span class="name">mark</span>&gt;</span>應標記或突出顯示的文本<span class="tag">&lt;/<span class="name">mark</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>定義了較小的文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">定義已從<span class="tag">&lt;<span class="name">del</span>&gt;</span>文檔中刪除的文本<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">定義<span class="tag">&lt;<span class="name">ins</span>&gt;</span>已插入文檔的文本<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line">定義<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下標<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>文本</span><br><span class="line">定義<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上標文本<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">定義了從另一個來源引用的部分</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;http://www.worldwildlife.org/who/index.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>定義了一個<span class="tag">&lt;<span class="name">q</span>&gt;</span>簡短的引用<span class="tag">&lt;/<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">定義縮寫或首字母縮略詞、可以為搜尋引擎、瀏覽器提供有用的信息</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;台北車站&quot;</span>&gt;</span>北車<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span>的火字下集合<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>以斜體顯示，定義文檔或文章的作者/所有者的聯繫信息<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;cite&gt;定義了創意作品的標題，不能用在人名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">cite</span>&gt;</span>我現在在聽的歌<span class="tag">&lt;/<span class="name">cite</span>&gt;</span>街仔路雨落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bdo&gt;文字左右鏡像--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>This text will be written from right to left<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="內聯框架"><a href="#內聯框架" class="headerlink" title="內聯框架"></a>內聯框架</h3><h4 id="iframe｜在目前的HTML嵌入另一個文檔"><a href="#iframe｜在目前的HTML嵌入另一個文檔" class="headerlink" title="iframe｜在目前的HTML嵌入另一個文檔"></a><code>iframe</code>｜在目前的HTML嵌入另一個文檔</h4><ul><li>應包含在<code>&lt;title&gt;</code>中</li><li>預設有邊框，可使用<code>border:none;</code>刪除</li></ul><hr><h4 id="lt-註解內容-gt-｜註解標籤"><a href="#lt-註解內容-gt-｜註解標籤" class="headerlink" title="&lt;!-- 註解內容 --&gt;｜註解標籤"></a><code>&lt;!-- 註解內容 --&gt;</code>｜註解標籤</h4><ul><li>瀏覽器不會顯示、不會讀取</li><li>可以隱藏多行、用於HTTML代碼中間</li><li><code>src</code>定義要嵌入的頁面的 URL</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h3><p>為了有實際效果可以參考，用<a href="https://codepen.io/momoninainai/pen/yLjVRqR?editors=1100">codepen</a>練習了一下</p><h4 id="lt-table-gt-表格｜由行row-直-跟列column-橫-組成"><a href="#lt-table-gt-表格｜由行row-直-跟列column-橫-組成" class="headerlink" title="&lt;table&gt;表格｜由行row(直)跟列column(橫)組成"></a><code>&lt;table&gt;</code>表格｜由行row(直)跟列column(橫)組成</h4><ul><li><code>&lt;td&gt;</code> 表格內容標籤<ul><li>預設padding為0，border-spacing為2px</li><li>可以包含HTML元素、圖片、列表、其他表格等…</li></ul></li><li><code>&lt;caption&gt;</code>表格標題標籤 (應在<code>&lt;table&gt;</code>之後)</li><li><code>&lt;tr&gt;</code> 行row(直)標籤   </li><li><code>&lt;th&gt;</code> 行row(直)內標頭標籤<ul><li>預設: 粗體置中、預設為橫式</li><li>若為直式則在每一個tr加一個th</li><li>合併列(橫) <code>&lt;th colspan=&quot;幾欄&quot;&gt;表格內容&lt;/th&gt;</code></li><li>合併行(直) <code>&lt;th rowspan=&quot;幾欄&quot;&gt;表格內容&lt;/th&gt;</code></li></ul></li></ul><h4 id="表格CSS樣式"><a href="#表格CSS樣式" class="headerlink" title="表格CSS樣式"></a><strong>表格CSS樣式</strong></h4><ul><li><code>border</code>屬性｜添加表格邊框</li><li><code>border-collapse: collapse;</code> 更改表格預設的雙線框，改為實心</li><li><code>border-radius: 10px;</code> 儲存格邊框變圓角</li><li><code>border-style</code> 更改邊框樣式<ul><li>dotted 虛線</li><li>dashed 底線</li><li>solid  實心    </li><li>none   定義無邊界</li><li>hidden 定義隱藏邊框</li></ul></li><li><code>border-color</code> 更改邊框顏色</li><li><code>border-bottom</code> 屬性添加到所有 tr元素以獲得水平分隔符</li><li><code>:nth-child(even)</code>橫的 斑馬紋<br>  -可寫成直的、也可直、橫交叉寫</li><li>使用<code>:hover</code>讓滑鼠滑過時強調選擇器</li></ul><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h3><p>為了有實際效果可以參考，用<a href="https://codepen.io/momoninainai/pen/zYjNxxZ?editors=1100">codepen</a>練習了一下</p><h4 id="HTML-無序列的列表"><a href="#HTML-無序列的列表" class="headerlink" title="HTML 無序列的列表"></a><strong>HTML 無序列的列表</strong></h4><ul><li>以<code>&lt;ul&gt;</code>標籤開頭<br>  －　每個列表項都以 <code>&lt;li&gt;</code>標記開頭。</li><li><code>&lt;ul&gt;</code>還可以有<code>&lt;ul&gt;</code></li><li><code>&lt;li&gt;</code>可以包圖像or連結</li><li><code> list-style-type</code>屬性<ul><li>disc 預設屬性</li><li>circle 圓點</li><li>square 正方形</li><li>none 取消圖形</li></ul></li><li><code>li &#123;float: left;&#125;</code>　可作為nav的寫法</li></ul><h4 id="HTML-有序的列表"><a href="#HTML-有序的列表" class="headerlink" title="HTML 有序的列表"></a><strong>HTML 有序的列表</strong></h4><ul><li>以<code>&lt;ol&gt;</code>標籤開頭<br>  －　每個列表項都以<code>&lt;li&gt;</code>標記開頭。<ul><li><code> &lt;ol&gt;</code>還可以有<code>&lt;ol&gt;</code></li><li><code>&lt;li&gt;</code>可以包圖像or連結</li><li><code>&lt;ol type=&quot;1&quot;&gt;</code> 更改有序數字的樣式<ul><li>type&#x3D;”1” </li><li>type&#x3D;”A” </li><li>type&#x3D;”a” </li><li>type&#x3D;”I” </li><li>type&#x3D;”i”</li></ul></li><li><code>&lt;ol start=&quot;50&quot;&gt;</code>控制序列從幾開始往下排列、</li></ul></li></ul><h4 id="HTML-描述列表"><a href="#HTML-描述列表" class="headerlink" title="HTML 描述列表"></a><strong>HTML 描述列表</strong></h4><ul><li><code>&lt;dl&gt;</code>標籤定義描述列表<ul><li>標籤<code>&lt;dt&gt;</code>定義術語（名稱），<code>&lt;dd&gt;</code>標籤描述每個術語</li></ul></li></ul><hr><h3 id="表單"><a href="#表單" class="headerlink" title="表單"></a>表單</h3><h4 id="lt-form-gt-｜收集用戶輸入發送到服務器進行處理-詳細"><a href="#lt-form-gt-｜收集用戶輸入發送到服務器進行處理-詳細" class="headerlink" title="&lt;form&gt;｜收集用戶輸入發送到服務器進行處理 詳細"></a><code>&lt;form&gt;</code>｜收集用戶輸入發送到服務器進行處理 <a href="https://www.w3schools.com/html/html_form_input_types.asp">詳細</a></h4><ul><li>在<code>from</code>中寫上<code>action</code>使用指定提交表單時要使用的HTTP方法<ul><li>預設<code>HTTP</code>方法為<code>GET</code></li><li>如果標單數據包含敏感信息、個人信息，請使用<code>POST</code></li></ul></li><li><code>&lt;label&gt;</code>定義許多表單元素的標籤<ul><li>同一個表單中<code>&lt;label&gt;</code>的<code>for</code>屬性應該和<code>&lt;input&gt;</code>的<code>id</code>屬性一樣，才能綁定</li></ul></li><li><code>&lt;fieldset&gt;</code>為表單內容作群組(一個框框起來)<ul><li><code>&lt;legend&gt;</code>為群組的標題</li></ul></li><li><code>&lt;input&gt;</code> 搭配<code>type</code>可以用多種方式呈現<ul><li><code>&lt;input type=&quot;text&quot;&gt;</code> 可以輸入文字(預設可輸入20字符)</li><li><code>&lt;input type=&quot;radio&quot;&gt;</code> 圓點單選按鈕 (選擇多個選項之一)</li><li><code>&lt;input type=&quot;radio&quot;&gt;</code> 勾勾選擇框 (選擇多個選項中零個或多個)</li><li><code>&lt;input type=&quot;submit&quot;&gt;</code> 提交表單按鈕<ul><li>指定表單數據用URL發送<code>method=&quot;get&quot;</code>，提交表單預設的<code>HTTP</code>方法是<code>GET</code></li><li><code>target</code>指定提交表單後視窗的反應</li></ul></li><li><code>&lt;input type=&quot;button&quot;&gt;</code> 可點擊的按鈕</li><li><code>&lt;input list=&quot;名稱&quot;&gt;</code> + <code>&lt;datalist id=&quot;名稱&quot;&gt;</code> 可以做出下拉列表</li></ul></li><li><code>&lt;select&gt;</code>指定一個下拉式選項<ul><li>搭配<code>option</code>使用增加選項</li><li>搭配<code>size</code>可以指定看見的選項數量</li><li><code>autocomplete</code>用戶輸入完自動完成值</li><li><code>novalidate</code>提交表單時，不會被驗證</li><li><code>multiple</code>允許用戶選擇多個值</li></ul></li><li><code>&lt;textarea&gt;</code>定義一個可以輸入很多字的框框<ul><li><code>rows</code>屬性指定文本區域可見的行數</li><li><code>cols</code>屬性指定文本區域可見的寬度</li></ul></li><li><code>&lt;output&gt;</code>表示計算的結果<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;選項&quot;</span> <span class="attr">name</span>=<span class="string">&quot;選項&quot;</span> <span class="attr">value</span>=<span class="string">&quot;選項&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;選項&quot;</span>&gt;</span>顯示給用戶看的的選項文字<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;VS-Code&quot;&gt;&lt;a href=&quot;#VS-Code&quot; class=&quot;headerlink&quot; title=&quot;VS Code&quot;&gt;&lt;/a&gt;VS Code&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;官網&lt;/a&gt; ｜ &lt;a href=&quot;https://github.com/microsoft/vscode&quot;&gt;github&lt;/a&gt; ｜ &lt;a href=&quot;https://marketplace.visualstudio.com/search?target=VSCode&amp;category=Keymaps&amp;sortBy=Relevance&quot;&gt;擴充元件&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Visual Studio Code（簡稱 VS Code）是一個使用 Monaco Editor 作為其底層的免費原始碼程式碼編輯器，會選擇作為開發用軟體，有以下幾個優點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程式碼重構&lt;/li&gt;
&lt;li&gt;內建命令列工具&lt;/li&gt;
&lt;li&gt;內建Git版本控制系統&lt;/li&gt;
&lt;li&gt;支援Emmt&lt;/li&gt;
&lt;li&gt;豐富的擴充元件等…&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="html" scheme="https://22aliang.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 基礎筆記</title>
    <link href="https://22aliang.github.io/2023/03/20/MySQL%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    <id>https://22aliang.github.io/2023/03/20/MySQL%20%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/</id>
    <published>2023-03-20T03:57:53.019Z</published>
    <updated>2024-05-13T12:22:49.342Z</updated>
    
    <content type="html"><![CDATA[<p>** 電子表格雖然可以進行排序和過濾，但資料庫具有廣泛的查詢功能，可以檢索、匹配、多個表個交叉引用紀錄，資料越龐大，差別越明顯。 </p><p>常見 |資料庫管理系統 ( Database Management System，所寫 DBMS )，有名的資料庫有 : Miceosoft SQL Sever、MongoDB；MySQL、PostgreSQL等…</p><span id="more"></span><p>資料庫再概念上分成 2 種 關聯式資料庫 Relational Database、非關聯式資料庫NoSQL Database </p><h3 id="資料庫的通用定義"><a href="#資料庫的通用定義" class="headerlink" title="資料庫的通用定義"></a>資料庫的通用定義</h3><p>資料庫正式的定義有很多種，比較通用的定義為 「資料庫」是一個儲存資料的電子文件檔案櫃，</p><p>是一個</p><ul><li>儲存結構化 Strectured</li><li>整合的 Intedgrted</li><li>相關聯 Interrelated</li><li>共享 Shared</li><li>可控制 Controlled</li></ul><blockquote><p>資料庫的結構是由資料模型 Data Model 來決定，它是一個高階模型，也是描述資料庫的結構。</p></blockquote><ul><li>存儲並提供彼此相關數據點訪問的資料庫，下圖是一個 ER Diagram 實體關係圖，主要由三個元素組成 : 實體 Entity ( 系統中存在的對象 )、屬性 Attribute ( 實體的特性或描述 )、關係 ( 前者之間的聯繫握互動 ) Relationship</li><li>ER Diagram 線上編輯 | <a href="https://lucid.app/lucidchart/5d478675-b1c6-41a4-b237-c0d07872901f/edit?beaconFlowId=FBFC34DF61E1D91D&page=0_0&invitationId=inv_e91ce7d7-ca0c-4be0-9b2b-93f2e36866a8#">連結</a></li><li>多對多的關係通常會拉成一對多</li><li>都是用 table 來表達，有較高的數據一致姓，使用 ACID 屬性來確保完整性</li><li>成本高，企業級的 License 價格驚人</li><li>讀寫慢，系統邏輯複雜 ( MySQL uses B-Tree B+Tree ,and HASH indexes，且有個能有死鎖 Deadlock 的問題</li><li>擴展困難，通常都是垂直擴展 ( 在主機擴展硬體設備 )</li><li>為了確保 交易 Transaction 是正確可靠的，必須具備 4 個特性</li></ul><ol><li>Atomicity ( 原子性）<ul><li>Atomicity (原子性）- 在資料庫的每一筆交易中只有兩種可能發生，第一種是全部完全(commit)，第二種是全部不完成(rollback)，不會因為某個環節出錯，而終止在那個環節，在出錯之後會恢復至交易之前的狀態，如同還沒執行此筆交易。</li></ul></li><li>Consistency ( 一致性）<ul><li>在交易中會產生資料或者驗證狀態，然而當錯誤發生，所有已更改的資料或狀態將會恢復至交易之前。</li><li>難改變資料架構</li></ul></li><li>Isolation ( 隔離性）<ul><li>資料庫允許多筆交易同時進行，交易進行時未完成的交易資料並不會被其他交易使用，直到此筆交易完成</li></ul></li><li>Durability ( 持續性）<ul><li>交易完成後對資料的修改是永久性的，資料不會因為系統重啟或錯誤而改變</li></ul></li></ol><h3 id="Non-Relational-Database-or-NoSQL-Database"><a href="#Non-Relational-Database-or-NoSQL-Database" class="headerlink" title="Non-Relational Database ( or NoSQL Database )"></a>Non-Relational Database ( or NoSQL Database )</h3><ul><li>都是用 JSON 來儲存，彈性比較好</li><li>可擴展性 : 透過硬體的分散式叢集來向外擴展，雲端伺服器供應商通常將這些操作處理成全授管服務，水平擴展 ( 再去用另外一個雲端設備來處理 )</li><li>快速讀寫 : 主要例子有 Redis 只在 RAM 操作，增刪查改都是O(1)的時間複雜度，每秒可以處理超過 10萬次讀寫操作</li><li>低廉的成本，通常是開源軟體</li><li>缺點不支持 SQL</li><li>支持特性不夠豐富，不像關聯式資料庫有各種附加功能</li></ul><h3 id="增刪查改-CRUD"><a href="#增刪查改-CRUD" class="headerlink" title="增刪查改 CRUD"></a>增刪查改 CRUD</h3><ul><li>增刪查改 ( 英文 CRUD ) 為 增加 Create、刪除 Delete、查詢 Read、改正 Update 的縮寫</li><li>在製作 Restful API 時，也會再次使用，但網站地 API 接口使用HTTP協定傳送通訊，所以名稱不同 ex : 查 &#x3D; GET、增 &#x3D; POST</li></ul><h2 id="關聯式資料庫邏輯結構"><a href="#關聯式資料庫邏輯結構" class="headerlink" title="關聯式資料庫邏輯結構"></a>關聯式資料庫邏輯結構</h2><h3 id="Keys-關係鍵"><a href="#Keys-關係鍵" class="headerlink" title="Keys 關係鍵"></a>Keys 關係鍵</h3><ul><li>關聯式資料庫重要的組成部分，在 DBMS 中，主要的 Keys 有 :</li></ul><ol><li>主鍵 primaty key ( 簡稱PK )<ul><li>唯一的表示每一筆資料，一筆資料只能有一個主鍵，而且不能是空 Null 的，它也可以是連接到其他表格的PK。</li></ul></li><li>外鍵 Foreign Key ( 簡稱FK )<ul><li>指向其他表格主鍵的欄位，確保兩張表格的關聯性，只能對應到 PK ( 避免有其他數值導致錯誤 )</li></ul></li><li>自然鍵 Natural key <ul><li>真實生活中唯一確定一個事物的標誌，來當作主鍵 primary key 可被稱為 natural key ， ex : 身分證字號</li></ul></li><li>代理鍵 Sirrogate key<ul><li>資料表格中，所有欄位都不適合當主鍵時，就會製作一個無意義的欄位來當作主鍵</li></ul></li><li>複合主鍵 comopsite key<ul><li>一筆資料只能有一個主鍵，( 但可以由兩個以上的行組成PK )</li></ul></li></ol><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ul><li>全名為 Structured Query Language 是一個結構化查詢程式語言，用於對關聯式資料庫管理系統 ( DBEMS , or RDBMS 下達指令。</li><li>不同資料庫系統之不具有完全的跨平台性，每個 DBMS 所接受的 SQL 有些微的差異</li><li>分號當句子的結束，逗號是還沒結束</li></ul><h3 id="Codeing-Style"><a href="#Codeing-Style" class="headerlink" title="Codeing Style"></a>Codeing Style</h3><p>有一些約定俗成的習慣，像是：</p><ol><li>關鍵字(保留字)都要用大寫</li><li>資料表名稱的第一個字母會用大寫</li><li>資料表的名稱使用單數</li><li>其餘的欄位名稱全部使用小寫</li><li>其餘的欄位名稱全部使用小寫</li></ol><ul><li>儲存格內的資料，是有區分大小寫的  ( 雖然在windows 還是可以查詢的到，但為了避免錯誤，還是分大小寫比較嚴謹 )</li><li>敘述語句內的空白，要用「半型空白」或是換行來區別因為 SQL 的語句是用 “;” 來區分的</li><li>如果你要加入字串、日期，要記得加入 “” (單引號)；數值的話是不需要的</li></ul><h3 id="SQL-Data-Types-資料類型"><a href="#SQL-Data-Types-資料類型" class="headerlink" title="SQL Data Types 資料類型"></a>SQL <code>Data Types 資料類型</code></h3><p>最常見的4種Data Types</p><ul><li>每一個直欄稱為 <strong>欄位Field 橫列叫做 紀錄 Record</strong></li></ul><ol><li>INT 整數<ul><li>用 4 byte 也就是 32 bits 儲存</li></ul></li><li>DECIMAL (p,s) 帶有小數點的數</li><li>VARCHAR(n) 一個欄位最多可以填多少</li><li>DATETIME 儲存時間</li></ol><h3 id="SQL-基本語法"><a href="#SQL-基本語法" class="headerlink" title="SQL 基本語法"></a>SQL 基本語法</h3><ul><li><code>UPDATE</code><ul><li>更新數據庫中的數據</li></ul></li><li><code>DELETE</code><ul><li>從數據庫中刪除數據</li></ul></li><li><code>INSERT INTO</code><ul><li>將新數據插入數據庫</li></ul></li><li><code>CREATE DATABASE</code><ul><li>創建一個新的數據庫</li></ul></li><li><code>CREATE TABLE</code><ul><li>創建一個新表</li></ul></li><li><code>DROP TABLE</code><ul><li>刪除一個表</li></ul></li><li><code>CREATE INDEX</code><ul><li>創建一個索引（搜索鍵）</li></ul></li><li><code>DROP INDEX</code><ul><li>刪除索引</li></ul></li></ul><blockquote><p>雖然大小寫都可以，但為了辨別，關鍵字通常為大寫</p></blockquote><ul><li>創建表格 CREATE<ul><li><code>CREAT TABLE table_name ()</code></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM department d</span><br><span class="line">JOIN employees e </span><br><span class="line">ON d.headID = e.employeeID;</span><br></pre></td></tr></table></figure><ul><li>刪除表格 DROP<ul><li><code>DROP TABLE table_name;</code></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>創建表格</span><br><span class="line">CREAT <span class="keyword">TABLE</span> employes (</span><br><span class="line">employeeID <span class="type">INT</span> RPIMARY KEY AUTO_INCREMENT,<span class="operator">/</span><span class="operator">/</span>AUTO_INCREMENT<span class="operator">*</span><span class="operator">*</span>會自動增加PK的值<span class="operator">*</span><span class="operator">*</span></span><br><span class="line">employeeName Lisa(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="operator">/</span><span class="operator">/</span>名字最長不能超過<span class="number">25</span>個字，且值不能為空</span><br><span class="line">age <span class="type">INT</span>,</span><br><span class="line">salary <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1500</span>,<span class="operator">/</span><span class="operator">/</span>預設薪水為<span class="number">1500</span></span><br><span class="line">supervisor <span class="type">INT</span>,</span><br><span class="line">department <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>讀取表格</span><br><span class="line"><span class="keyword">DESCRIBE</span> employes;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>刪除表格</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> employees;</span><br></pre></td></tr></table></figure><ul><li>新增指定欄位資料 INSERT INTO . VALUES<ul><li><code>INSERT INTO employess table_name (clounmn)</code></li><li><code>VALUES (clounmn_value)</code></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employess (employessID, employessName, age, salary, supervisor) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">100</span>, &quot;Lisa&quot;, <span class="number">25</span>, <span class="number">3500</span>, <span class="keyword">NULL</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>全部欄位都新增資料 INSERT INTO . VALUES</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employess </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">100</span>, &quot;Lisa&quot;, <span class="number">25</span>, <span class="number">3500</span>, <span class="keyword">NULL</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>查詢表格所有資料 SELECT * FROM<ul><li><code>SELECT * FROM table_name;</code></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>指定查詢數量 SELECT  TOP</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line">LIMIT <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>查詢表格指定資料 SELECT . FROM . ORDER BY . WHERE , COUNT ,<ul><li><code>SELECT clounmn1, clounmn2, …   FROME table_name;</code></li><li><code>ORDER BY (AES\DESC), clounmn, clounmn2 ,…</code> 是次序關鍵字，用於對查詢結果按升序或降序進行排序 ( 默認是升序 ) 也可以多選</li><li><code>WHERE clounmn</code> 可用來過濾紀錄 ( 接在 FROM 後面 )<br>  可以使用以下運算符 : &#x3D;、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、&lt;&gt;、IN、BETWEEN、!&#x3D; 等等</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employeeID, employeeName, age</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> salary <span class="operator">&gt;=</span> <span class="number">2000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age DESE;</span><br></pre></td></tr></table></figure><ul><li>查詢表格指定資料，並排除重複選項</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Country <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><ul><li>查詢表格指定資料，並列出不同選項的總數</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> Country) <span class="keyword">FROM</span> Customers;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><ul><li>查詢含有指定文字的資料</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 開頭是 C</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> product</span><br><span class="line"><span class="keyword">WHERE</span> productName <span class="keyword">Like</span><span class="string">&#x27;c%&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 只要有 C</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> product</span><br><span class="line"><span class="keyword">WHERE</span> productName <span class="keyword">Like</span><span class="string">&#x27;%c%&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查詢含有指定欄位組合的資料</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> product</span><br><span class="line"><span class="keyword">WHERE</span> productName <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> CategoryID, ProductName;</span><br></pre></td></tr></table></figure><ul><li>查詢資料重複只留一筆</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> supplierID, companyName, country</span><br><span class="line"><span class="keyword">FROM</span> suppliers ;</span><br></pre></td></tr></table></figure><ul><li>WHERE AND、OR、NOT、IS、BETWEEN 、IN</li><li>盡量用 () 讓語意更清楚</li><li>AND : 全部條件都是 true</li><li>OR : 只要有一個條件是 true</li><li>IS : 指定欄位查詢指定的值</li><li>IN : 列舉包含的資料</li><li>BETWEEN : 之間</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span> <span class="keyword">AND</span> City<span class="operator">=</span><span class="string">&#x27;Berlin&#x27;</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在 Customers 表格中，Country 欄位等於 Germany 和 City 欄位等於 Berlin (兩個都要)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在 northwind 中只會有一個符合的</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span> <span class="keyword">AND</span> City<span class="operator">=</span><span class="string">&#x27;Berlin&#x27;</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在 Customers 表格中，Country 欄位等於 Germany 或 City 欄位等於 Berlin (一個即可)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在 northwind 中只會有兩個符合的</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在 Customers 表格中，Country 不是 Germany 的欄位</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span> <span class="keyword">AND</span> (City<span class="operator">=</span><span class="string">&#x27;Berlin&#x27;</span> <span class="keyword">OR</span> City<span class="operator">=</span><span class="string">&#x27;München&#x27;</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在 Customers 表格中，Country 欄位等於 Germany ( 一定要 )</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>或 City 欄位等於 Berlin 或 München ( 兩個擇一個就好 )</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span> <span class="keyword">AND</span> <span class="keyword">NOT</span> Country<span class="operator">=</span><span class="string">&#x27;USA&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>在 Customers 表格中，Country 欄位不是Germany、USA ( 兩個都不是 )</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_names</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>不是 跟 是</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> productname, unitprice</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> unitprice <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">AND</span> <span class="number">20</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 有人說不學沒關係</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> companyname, country</span><br><span class="line"><span class="keyword">FROM</span> suppliers</span><br><span class="line"><span class="keyword">WHERE</span> country <span class="keyword">IN</span> (<span class="string">&#x27;Japan&#x27;</span>, <span class="string">&#x27;Italy&#x27;</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 也可以寫兩次 <span class="keyword">OR</span> 串接 </span><br></pre></td></tr></table></figure><ul><li>MIN() 、 MAX() 最大值和最小值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(Price) <span class="keyword">AS</span> SmallestPrice</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">AS</span> 後面是幫查詢的表格取名字</span><br></pre></td></tr></table></figure><ul><li>COUNT() 返回指定條件的行數、AVG()返回數字列的平均值、SUM()返回數字列的總和<ul><li>COUNT(*) | 會把 NULL 算進去</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(ProductID)</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><ul><li>AVG()返回指定欄位的平均數 | NULL會被忽略</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(UnitPrice)</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><ul><li>SUM() 返回指定欄位的總數</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(Quantity)</span><br><span class="line"><span class="keyword">FROM</span> OrderDetails;</span><br></pre></td></tr></table></figure><ul><li>每一個組group up 列小記、group by 旁邊的欄位是主要欄位，若指定欄位值變動，with rollup 會往上捲動算出指定欄位總值。</li><li>新增有 NULL 值的行就有總值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> orderId, pouductId, <span class="built_in">sum</span>(quantity)</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">order</span> details`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> orderId, productId <span class="keyword">with</span> <span class="keyword">rollup</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> orderId, productId</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> productId, productName,unitPrice,unitsUnStock, </span><br><span class="line">unitPrice <span class="operator">*</span> unitsStock <span class="keyword">AS</span> amount <span class="operator">/</span><span class="operator">/</span>直接賦予欄位新的名稱</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> unitPrice <span class="operator">*</span> unitInStock <span class="operator">&gt;=</span> <span class="number">300</span>;</span><br></pre></td></tr></table></figure><ul><li>修改資料 UPDATE<ul><li><code>UPDATE 表格名稱</code><br>  <code>SET 要更新的表格名稱 = 要更新的表格資料, 要更新的表格名稱 = 要更新的表格資料,   WHERE 表格名稱 = 更新的資料在哪裡、什麼的資料</code></li><li>WHERE 設定條件可以很複雜</li><li>如果省略 WHERE 表中所有紀錄都會被更新</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees </span><br><span class="line"><span class="keyword">SET</span> employeeID <span class="operator">=</span> <span class="number">107</span></span><br><span class="line"><span class="keyword">WHERE</span> employeeID <span class="operator">=</span> <span class="number">108</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> ContactName<span class="operator">=</span><span class="string">&#x27;Juan&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Mexico&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 在 Customers 表格裡，先篩選 Country 欄位中</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>資料是 Mexico 的，更新 ContactName 欄位資料成為 Juan</span><br></pre></td></tr></table></figure><ul><li>刪除資料 DELETE FROM<ul><li><code>DELETE FROM table_name WHERE clounmn;</code></li><li>如果省略 WHERE 表中所有表格資料都會被刪除，但表格依然存在，要刪除整個表格要使用 DROP</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employeeID <span class="operator">=</span> <span class="number">107</span>;</span><br></pre></td></tr></table></figure><ul><li>表格合併 JOIN<ul><li>JOIN 用於 2 個或多個表之間相關的 <code>clounmn</code> 的組合</li><li><code>SELECT clounmn1, clounmn2, ...   FROM table1   JOIN table2 ON table1.clounmnName = table2.clounmnName;</code></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> department <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">JOIN</span> employees <span class="keyword">AS</span> e </span><br><span class="line"><span class="keyword">ON</span> d.headID <span class="operator">=</span> e.employeeID;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> L.A, B, C <span class="operator">/</span><span class="operator">/</span>名稱重複需要講一下 </span><br><span class="line"><span class="keyword">FROM</span> department <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">JOIN</span> employees <span class="keyword">AS</span> e </span><br><span class="line"><span class="keyword">ON</span> d.headID <span class="operator">=</span> e.employeeID</span><br></pre></td></tr></table></figure><p>having 彙整統計後再用的，大於 30 的 ( 不常用 )</p><h3 id="Cartesian-Product-笛卡爾乘積"><a href="#Cartesian-Product-笛卡爾乘積" class="headerlink" title="Cartesian Product 笛卡爾乘積"></a>Cartesian Product <strong>笛卡爾乘積</strong></h3><p>是從離散數學來的，舉例若</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> department d</span><br><span class="line"><span class="keyword">JOIN</span> employees e;</span><br><span class="line"><span class="comment">-- ON d.headID = e.employeeID; //少了這段</span></span><br></pre></td></tr></table></figure><p>表格會無限重複</p><p>JOIN 2 個表格時，若不指定結合條件 <code>JOIN ON</code> 而是只寫 <code>JOIN</code> 合併結果為 2 個資料表間的笛卡兒乘積，也就是 2 個表所有可能組合 </p><h3 id="什麼是-NULL-Value-值"><a href="#什麼是-NULL-Value-值" class="headerlink" title="什麼是 NULL Value 值 ?"></a>什麼是 NULL Value 值 ?</h3><ul><li>NULL 為創建表格初期留空的資料，未來有可能會在新增資料，若資料為 0 或 “”都不應該使用NULL</li><li>測試 NULL 值</li></ul><h3 id="什麼是XAMPP"><a href="#什麼是XAMPP" class="headerlink" title="什麼是XAMPP ?"></a>什麼是XAMPP ?</h3><p>架設伺服器環境，是一個架站懶人包</p><ul><li>X &#x3D; 跨平台</li><li>A &#x3D; Apache：開放原始碼的網站瀏覽伺服器軟體<ul><li>開啟才能在 locallhost 連到</li></ul></li><li>M &#x3D; MySQL：資料庫軟體</li><li>P &#x3D; PHP：後端程式語言，將 Request 處理成 output，而 output 通常是 html，可以閱覽 <a href="http://www.w3school.com.cn/php/">w3school：PHP</a> 和 <a href="http://www.runoob.com/php/php-tutorial.html">菜鳥教程：PHP</a></li><li>P &#x3D; Perl：程式語言，可以閱覽 <a href="http://www.runoob.com/perl/perl-tutorial.html">菜鳥教程：Perl</a></li></ul><p>優點 </p><ol><li>簡便易用</li><li>可以在無線情況下進行開發和測試</li><li>跨平台</li></ol><p>缺點  </p><ol><li>安全風險 ( 要更新軟體版本號 ) </li><li>生產環境限制，XAMPP 主要是用於開發和測試，不建議在生產環境中使用，上線後應該使用專業的Web伺服器軟體 例如 Apache 或 Nginx 等</li><li>效能限制</li></ol><p>port 預設是 80</p><h3 id="什麼是-localhost"><a href="#什麼是-localhost" class="headerlink" title="什麼是 localhost ?"></a>什麼是 localhost ?</h3><p>瀏覽器會將該 URL 解析為本地主機的 IP 地址 127.0.0.1，然後向該地址發送請求 localhost 是一個指向本地主機 IP 地址的別名，它可以讓您快速訪問本地主機上運行的服務器。</p><p>跟網址的概念是一樣，跟 <strong><a href="https://zh.wikipedia.org/zh-tw/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F">TCP&#x2F;IP協定套組</a> |</strong> <a href="https://hulitw.medium.com/learning-tcp-ip-http-via-sending-letter-5d3299203660">Huil</a> ****是一樣的</p><h3 id="預存程序-x2F-預儲程序-Stored-Procedure"><a href="#預存程序-x2F-預儲程序-Stored-Procedure" class="headerlink" title="預存程序 &#x2F; 預儲程序 Stored Procedure"></a>預存程序 &#x2F; 預儲程序 Stored Procedure</h3><p>預存程序是一個在資料庫管理系統中存儲的程式，用於執行一系列的資料庫操作，可以提高資料庫操作的效率和可靠性。 </p><p>預存程序通常用於執行一些複雜的資料庫操作，例如：</p><ol><li>數據處理：對數據進行轉換、計算、過濾和合併等操作。</li><li>數據驗證：對數據進行驗證和錯誤處理，以確保數據的完整性和準確性。</li><li>安全控制：對資料庫操作進行權限控制和安全檢查，以確保系統的安全性。</li><li>數據輸出：將數據格式化為指定的輸出格式，例如 XML、JSON、CSV 等。</li></ol><p>需要注意以下事項：</p><ol><li>預存程序需要在資料庫中進行存儲，因此會佔用一定的資料庫空間。</li><li>預存程序的編寫和維護需要一定的開發技能，包括 SQL 語法、流程控制語句和變數等。</li><li>預存程序可以提高資料庫操作的效率，但對於一些簡單的操作，可能會增加代碼的複雜度和維護成本。</li></ol><h3 id="多階式架構-SQL-Multilevel-Hierarchy"><a href="#多階式架構-SQL-Multilevel-Hierarchy" class="headerlink" title="多階式架構 SQL Multilevel Hierarchy"></a>多階式架構 SQL Multilevel Hierarchy</h3><p>舉例 : 便當社 &gt; 訂購表(快取) &gt; 各班班代 &gt; 值日生負責登記(延後更新) </p><ul><li>每個節點都有識別碼 ID ，根節點 ID 為0 ，每個子節點的 ID 都是其父節點的 ID 加上一個編號</li><li>通常用於組織複雜的資料，例如組織圖、家譜、科學分類、產品目錄等，多階式架構可以更好地組織和管理資料，提高資料檢索的效率和準確性</li></ul><p> 實現方法 </p><ol><li>使用傳統的關聯式資料庫系統，通過使用外部關聯（External Relationships）來實現層次化結構</li><li>使用專門的層次化資料庫系統，例如 IBM 的 IMS（Information Management System）系統、Oracle 的 Oracle Hierarchical Storage Manager 等</li></ol><h3 id="SELECT-從數據庫中提取數據-x2F-查詢資料"><a href="#SELECT-從數據庫中提取數據-x2F-查詢資料" class="headerlink" title="SELECT 從數據庫中提取數據 &#x2F; 查詢資料"></a>SELECT 從數據庫中提取數據 &#x2F; 查詢資料</h3><p>從數據庫中選擇述劇，返回的數據儲存在一個結果表中，稱為結果集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br></pre></td></tr></table></figure><p>一個伺服器可以管多個資料庫</p><h3 id="創建資料庫流程"><a href="#創建資料庫流程" class="headerlink" title="創建資料庫流程"></a>創建資料庫流程</h3><ol><li>MySQL command Line Client <code>creat database 名稱;</code></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database myDatabase;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec) <span class="operator">*</span><span class="operator">*</span><span class="operator">/</span><span class="operator">/</span>回報製作新資料庫成功<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><ol><li>my sql 下載時我有改 port 4406 或著 在 sql command line 輸入</li></ol><p><code>show global variables like &#39;port&#39;;</code>  查詢port號 | 也可以修改port號</p><ol><li>進到資料庫後創建 employees 表格，employeeID是primary key (PK)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line">    employeeID int PRIMARY key</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在測試刪除資料表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE employees;</span><br></pre></td></tr></table></figure><h3 id="SQL-injection-維基"><a href="#SQL-injection-維基" class="headerlink" title="SQL injection | 維基"></a>SQL injection | <a href="https://zh.wikipedia.org/zh-tw/SQL%E6%B3%A8%E5%85%A5">維基</a></h3><p>避免方法 </p><ul><li>使用 參數化查詢 Parameterized Query 設計資料查詢</li><li>使用其他更安全的方式連接SQL資料庫 ex : LINQ</li></ul><p>舉例 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strSQL <span class="operator">=</span> &quot;SELECT * FROM users WHERE (name = &#x27;&quot; <span class="operator">+</span> userName <span class="operator">+</span> &quot;&#x27;) </span><br><span class="line">and (pw = &#x27;&quot;<span class="operator">+</span> passWord <span class="operator">+</span>&quot;&#x27;);&quot;</span><br></pre></td></tr></table></figure><p>惡意填入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userName <span class="operator">=</span> &quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;;</span><br><span class="line">passWord <span class="operator">=</span> &quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;;</span><br></pre></td></tr></table></figure><p>將導致原本的SQL字串被填為</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strSQL <span class="operator">=</span> &quot;SELECT * FROM users WHERE (name = &#x27;1&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;) </span><br><span class="line">and (pw = &#x27;1&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;);&quot;</span><br></pre></td></tr></table></figure><p>也就是實際上執行的SQL命令會變成下面這樣的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL <span class="operator">=</span> &quot;SELECT * FROM users;&quot;</span><br></pre></td></tr></table></figure><p>達到無帳號密碼，亦可登入網站。所以SQL注入被俗稱為駭客的填空遊戲</p><h3 id="資料庫正規化"><a href="#資料庫正規化" class="headerlink" title="資料庫正規化"></a>資料庫正規化</h3><ul><li>降低資料重複，減少錯誤資料變動</li></ul><h3 id="額外知識點"><a href="#額外知識點" class="headerlink" title="額外知識點"></a>額外知識點</h3><p>單一SQL對資料表進行異動若一次超過 5000 筆，資料庫會啟動保護機制，將鎖定的等級進行提升，會變成 table lock </p><p>為了減少系統負擔（記憶體變少），但另一方面增加了系統blocking</p><h3 id="系統環境變數"><a href="#系統環境變數" class="headerlink" title="系統環境變數"></a>系統環境變數</h3><h3 id="命令提示字元呼叫-MySQL-commit"><a href="#命令提示字元呼叫-MySQL-commit" class="headerlink" title="命令提示字元呼叫 MySQL commit"></a>命令提示字元呼叫 MySQL commit</h3><p>mac 預設密碼 root、windows 沒有密碼，直接 Enter 就好</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:\xampp\mysql\bin\mysql -uroot -p</span><br></pre></td></tr></table></figure><p>因為當初再安裝 XAMPP 時，它有自動將 my sql 的環境變數，建置在系統底下，因此不管用任何地方的命令提示字元，都可以打開</p><p>&#x3D;&#x3D;&#x3D;解除鎖定&#x3D;&#x3D;&#x3D;</p><p>start transaction </p><p>commit ; </p><p>start transaction </p><p>rolllback ;</p><p>一律不算數</p><p>undo </p><p>all or nothing </p><p>ACID 交易系統</p><p>rollback 會把資料返回原本沒有出現的樣子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use northwind;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">update</span> products <span class="keyword">set</span> unitsInStock <span class="operator">=</span> <span class="number">100</span> <span class="keyword">where</span> productId <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> productId, unitsInStock <span class="keyword">from</span> products limit <span class="number">3</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">select</span> productId, unitsInStock <span class="keyword">from</span> products limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>沒有rollback的話會把更新的資料給更新過去，在一個start transaction就在下rollback就不會再回去了，沒有rollback在下start 就是巢套惹</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">update</span> products <span class="keyword">set</span> unitsInStock <span class="operator">=</span> <span class="number">100</span> <span class="keyword">where</span> productId <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> productId, unitsInStock <span class="keyword">from</span> products limit <span class="number">3</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> productId, unitsInStock <span class="keyword">from</span> products limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>提款 + 存款 才解除鎖定</p><p>交易鎖定 all nothing</p><p>commit 才是真正完成，rollback 算是一個段落結束</p><p>鎖資料 &gt; 卡住的</p><h3 id="情境演練"><a href="#情境演練" class="headerlink" title="情境演練 :"></a>情境演練 :</h3><p>甲方</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">use northwind;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> productId, unitsInStock </span><br><span class="line">  <span class="keyword">from</span> products </span><br><span class="line">  <span class="keyword">where</span> productId <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">update</span> products </span><br><span class="line">  <span class="keyword">set</span> unitsInStock <span class="operator">=</span> unitsInStock <span class="operator">-</span> <span class="number">1</span> </span><br><span class="line">  <span class="keyword">where</span> productId <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>乙方</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">C:\xampp\mysql\bin\mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line"><span class="operator">/</span>applications<span class="operator">/</span>MAMP<span class="operator">/</span>library<span class="operator">/</span>bin<span class="operator">/</span>mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">use northwind;</span><br><span class="line"><span class="keyword">set</span> session transaction isolation level read uncommitted;</span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">select</span> productId, unitsInStock </span><br><span class="line">  <span class="keyword">from</span> products </span><br><span class="line">  <span class="keyword">where</span> productId <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- pause and view status</span></span><br><span class="line"><span class="keyword">select</span> productId, unitsInStock </span><br><span class="line">  <span class="keyword">from</span> products </span><br><span class="line">  <span class="keyword">where</span> productId <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>預設 Read uncommitted 可以讀取，</p><p>同時進行的話，乙方再要修改表格時，會進行等待，若甲方執行 commit ，乙方視窗會馬上跳執行指令。</p><h3 id="SQL-的鎖-LOCK"><a href="#SQL-的鎖-LOCK" class="headerlink" title="SQL 的鎖 LOCK"></a>SQL 的鎖 LOCK</h3><p>多個命令對同一資源同時進行操作時，為了確保資料正確性,必須使用lock來避免<a href="https://en.wikipedia.org/wiki/Race_condition">Racing Condition</a></p><h3 id="SQL-的-LOCK-有分兩個維度"><a href="#SQL-的-LOCK-有分兩個維度" class="headerlink" title="SQL 的 LOCK 有分兩個維度"></a>SQL 的 LOCK 有分兩個維度</h3><p>下表表示鎖範圍等級由上到下越來越大.</p><ul><li>Row (•RID)</li><li>Key (•KEY)</li><li>Page (•PAG)</li><li>Extent (• EXT)</li><li>Heap or B-tree (• HoBT)</li><li>Table (• TAB)</li><li>File (• FIL)</li><li>Application (• APP)</li><li>MetaData (• MDT)</li><li>Allocation Unit (• AU)</li><li>Database (•DB)</li></ul><p><strong>Lock類型</strong></p><ul><li>Shared Locks (s)</li><li>Update Locks (U)</li><li>Exclusive Locks (X)</li><li>Intent Locks (I)</li><li>Schema Locks (Sch)</li><li>Bulk Update Locks (BU)</li><li>Key-range</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> https:<span class="operator">/</span><span class="operator">/</span>nodejs.org</span><br><span class="line"><span class="number">2.</span> <span class="keyword">right</span> click: ticket <span class="operator">|</span> <span class="keyword">Open</span> <span class="keyword">in</span> Integrated Terminal</span><br><span class="line"><span class="number">3.</span> npm install</span><br><span class="line"><span class="number">4.</span> edit app.js, change password</span><br><span class="line"><span class="number">5.</span> ecit app.js, <span class="keyword">add</span> this line: port: <span class="number">8889</span>,</span><br><span class="line"><span class="number">6.</span> run setup_db.txt <span class="keyword">to</span> <span class="keyword">prepare</span> ticketdb</span><br><span class="line"><span class="number">7.</span> node bin\www</span><br><span class="line"><span class="number">8.</span> http:<span class="operator">/</span><span class="operator">/</span>localhost:<span class="number">3000</span><span class="operator">/</span>ticket<span class="operator">/</span>buy</span><br></pre></td></tr></table></figure><h3 id="建立資料庫-字元集亂碼狀況題"><a href="#建立資料庫-字元集亂碼狀況題" class="headerlink" title="建立資料庫 | 字元集亂碼狀況題"></a>建立資料庫 | 字元集亂碼狀況題</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database lab15db;</span><br><span class="line">use lab15db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key, data <span class="type">varchar</span>(<span class="number">20</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 (data) <span class="keyword">values</span> (<span class="string">&#x27;data A&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 (data) <span class="keyword">values</span> (<span class="string">&#x27;資料 B&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;char%&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> names big5;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;char%&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 (data) <span class="keyword">values</span> (<span class="string">&#x27;資料 C&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"> </span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">drop</span> database lab15db;</span><br></pre></td></tr></table></figure><h3 id="終端機查詢指令"><a href="#終端機查詢指令" class="headerlink" title="終端機查詢指令"></a>終端機查詢指令</h3><p>select version() 查詢版本<br>show variables like ‘char%’<br>show variables like ‘max%’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist; <span class="operator">/</span><span class="operator">/</span>看目前連線人數 只有網管</span><br><span class="line">status; <span class="operator">/</span><span class="operator">/</span>大家可以看狀況</span><br><span class="line">kill <span class="number">101</span> <span class="operator">/</span><span class="operator">/</span>把人踢掉，會無法在下指令</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="operator">+</span> <span class="number">1</span>; <span class="operator">/</span><span class="operator">/</span>在下就會跑回來連線 並且有新資料</span><br></pre></td></tr></table></figure><h3 id="建立資料庫-字元集亂碼狀況題-1"><a href="#建立資料庫-字元集亂碼狀況題-1" class="headerlink" title="建立資料庫 | 字元集亂碼狀況題"></a>建立資料庫 | 字元集亂碼狀況題</h3><p>建資料庫自己把 uf8 給建立上去，utf8字元集 中文字 3bytes 英文字 1bytes</p><p>set global max_connections &#x3D; 10; 最大連線數  ( 它是全域變數 ) 最低不能超過10</p><p>通常會保留一個位置給網管，</p><p>set processlist ; 秀出目前連線清單</p><hr><p>show variables like ‘char%’</p><p>set names big5; &#x2F;&#x2F; 因為命令提示字元比較舊 所以只在這個提示字元使用big5，如果要全域資料庫都使用 要加 global 才可以</p><hr><p>client 指令連線離開、進入資料庫 connection、resultes 交給用戶端</p><p>字元集要轉 connection (mysql接收的資料) 設定值 result (調資料室哪一種)<br>如果全部 utf8 就不用轉碼，如果遇到純英文、舊系統就會有影響</p><p>create database lab15db;</p><p>use lab15db;</p><p>ctrate table t1 ( id int auto uncrement primary key, data varch(20)); </p><p>&#x2F;&#x2F; id 會自動編號 data可以寫入20字元的欄位</p><p>insert into t1(data) values (’data A’); &#x2F;&#x2F;插入資料</p><p>selsect * from t1;  &#x2F;&#x2F;查詢是某正確</p><p>insert into t1(data) values (’嘗試用中文字’); &#x2F;&#x2F;插入資料</p><p>selsect * from t1;  &#x2F;&#x2F;中文字是 ??? </p><p>use mysql;</p><p>先離開database </p><p>drpp database lab15db;</p><h3 id="創建資料庫時，使用較舊的指令可能會出現的問題"><a href="#創建資料庫時，使用較舊的指令可能會出現的問題" class="headerlink" title="創建資料庫時，使用較舊的指令可能會出現的問題"></a>創建資料庫時，使用較舊的指令可能會出現的問題</h3><p>show variables like ‘char%’ &#x2F;&#x2F;查詢字元集設定</p><p>set names big5; &#x2F;&#x2F;一口氣設定3個選項 </p><p>show variables like ‘char%’ &#x2F;&#x2F;查詢字元集設定</p><p>有些舊系統只支援舊字碼 ( IDE 只懂 Big5 編碼 )</p><p>Big5 編碼中文是 2bytes 英文是 1bytes</p><p>資料ABC | ansi 7byte | 中文2bytes<br>資料ABC | utf8 9byte | 中文3bytes<br>資料ABC | utf8 BOM 12byte | 具有BOM的utf8，前面有 3 個BOM控制碼的bytes</p><p>許光蓋現象 : 在資訊傳輸的過程中，因編碼方式的不同，造成訊息的失真或錯誤<br>可以使用一些通訊協定或編碼技術，例如加入誤碼檢測、糾錯碼等機制，來提高訊息的傳輸穩定性和可靠性。</p><p>如果是使用PHP admin 從頭到尾都支援 utf8 就沒問題</p><p>最好就直接設定 utf8，如果遇到較舊只能使用ansi </p><p>window有支援 utf8 、mac 終端機不支援 utf8</p><p>字元集一但輸出就不能重打，因此</p><h3 id="創建資料庫注意事項"><a href="#創建資料庫注意事項" class="headerlink" title="創建資料庫注意事項"></a>創建資料庫注意事項</h3><ul><li>要指定 utf8 編碼 character set utf8; &#x2F;&#x2F;在英文的介面上，但在伺服器裡面的資料表要支援中文，</li></ul><h3 id="舊資料結構-big5-方便"><a href="#舊資料結構-big5-方便" class="headerlink" title="舊資料結構 big5 方便"></a>舊資料結構 big5 方便</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0123456789012</span> </span><br><span class="line"></span><br><span class="line">洋基隊     NYY</span><br><span class="line">釀酒入隊   MIL</span><br></pre></td></tr></table></figure><p>以上程式碼在 big5 是很整齊的 :</p><p>line1:s.substring(10,3) ⇒ NYY (從10取3)</p><p>line1:s.substring(10,3) ⇒ MILL (從10取3)</p><p>utf8 &amp; C# :</p><p>line1:s.substring(13,3) ⇒ NYY ( 空格算中文字，從13行開始取3位才能取出NYY)</p><p>line1:s.substring(15,3) ⇒ NYY</p><p>但這個資料設計有個問題，資料結構跟資料分開，以後新建資料會不知道規則</p><p>drop database lab15db;</p><p>把資料結構用陣列寫入，就不用跟舊資料一樣用數的</p><h3 id="新資料結構-適用-utf8"><a href="#新資料結構-適用-utf8" class="headerlink" title="新資料結構 適用 utf8"></a>新資料結構 適用 utf8</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s <span class="operator">=</span> `</span><br><span class="line">[</span><br><span class="line">&#123;”name” : “洋基隊”,&quot;id&quot;:&quot;NYY&quot;&#125;,</span><br><span class="line">&#123;”name” : “釀酒入隊”,&quot;id&quot;:&quot;MIL&quot;&#125;</span><br><span class="line">]`</span><br></pre></td></tr></table></figure><ul><li>JS 7個符號組成 JSON</li></ul><p>上面是物件，可以解碼成陣列</p><p>var dataList &#x3D; JSON.parse(s); &#x2F;&#x2F;把物件轉成字串、文字資料，就可以去轉了</p><p>dataList[1].id ⇒ “MIL”</p><p>定義一個資料結構的時候，字串內涵很多物件</p><p>違反第一正規化，怕資料重複跟空洞化</p><ul><li>每一筆資料都分的很開，用 join 來串接</li><li>用 JSON 把資料串在同一個欄位裡面 &#x2F;&#x2F;用陣列來切資料出來</li></ul><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases; <span class="operator">/</span><span class="operator">/</span>顯示資料庫清單</span><br><span class="line">use northwind;</span><br><span class="line"><span class="keyword">show</span> tables; <span class="operator">/</span><span class="operator">/</span>查看北風這個資料庫的所有表格</span><br><span class="line"><span class="keyword">show</span> columns form shippers; <span class="operator">/</span><span class="operator">/</span>特定資料表的資料結構</span><br><span class="line"><span class="keyword">desc</span> shippers; <span class="operator">/</span><span class="operator">/</span>discription 跟上面一個一樣</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> names ; 調整字元集</span><br><span class="line"><span class="keyword">show</span> processlist;</span><br><span class="line">status;</span><br><span class="line">klii 編號;<span class="operator">/</span><span class="operator">/</span>可以砍掉資源爆炸的 client </span><br></pre></td></tr></table></figure><h3 id="建立資料庫"><a href="#建立資料庫" class="headerlink" title="建立資料庫"></a>建立資料庫</h3><ul><li>不要有空格、不要有保留字</li><li>可以用 中括號 []</li><li>寫法CREATE DATABASE [IF NOT EXISTS] db_name<br>  DEFAULT chracter SET charset_name;</li><li>會自動把資料變成小寫，因為在 lunix 會分大小寫，所以是好意</li></ul><p>會跳出目前 database 存放的資料夾</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;datadir&#x27;</span>; </span><br><span class="line"><span class="keyword">create</span> database LAB15: <span class="operator">/</span><span class="operator">/</span>就算取大寫，mysql也會轉成小寫</span><br></pre></td></tr></table></figure><p>如果直接在 C:\xampp\mysql\data 新增資料夾，也會跳在 mysql 的資料酷清單裡面</p><p>創建資料庫指令 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> Database labdb;</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="type">character</span> <span class="keyword">SET</span> utf8; <span class="operator">/</span><span class="operator">/</span>這段一定要寫</span><br></pre></td></tr></table></figure><aside>💡 網頁設計的字元是 utf-8，但在SQL是 utf8 ，SQL會無法辨識utf-8</aside><h3 id="建立資料表"><a href="#建立資料表" class="headerlink" title="建立資料表"></a>建立資料表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> catrgories</span><br><span class="line">(</span><br><span class="line">CategoryID <span class="type">int</span>(<span class="number">11</span>) defaule <span class="number">0.</span></span><br><span class="line">CategorName <span class="type">varchar</span>(<span class="number">15</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables; <span class="operator">/</span><span class="operator">/</span> 檢查是否有建立成功</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 (id,data)<span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;123456789&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 (id,data)<span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;12345678902135&#x27;</span>); <span class="operator">/</span><span class="operator">/</span>超過的資料會被掠過</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 (id,data)<span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;一二三四五六七八九十&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure><h3 id="資料型別"><a href="#資料型別" class="headerlink" title="資料型別"></a>資料型別</h3><ul><li>整數  INT ( 正負21億多字元)</li><li>字串  varchar (可變動長度的文字欄位，裡面放utf8 或 big5 是沿用資料庫的字元集)<ul><li>如果要 modify 縮短欄位，可能會裁掉一點資料 ( 危險 )</li></ul></li><li>auto_increment 預設從 1 號開始編碼，會自動往下增加值，必須是一個 key 欄位 ，編號可以自己編</li><li>primary key 跟上面是同一個配套</li></ul><p>練習</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2 (</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key, <span class="operator">/</span><span class="operator">/</span>PK 唯一性</span><br><span class="line">  data <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 (id, data) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 (id, data) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;200&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 (id, data) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;100&#x27;</span>); <span class="operator">/</span><span class="operator">/</span>這會因為PK重複而跳error</span><br><span class="line"></span><br><span class="line"><span class="comment">----</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3 (</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key, <span class="operator">/</span><span class="operator">/</span>PK 唯一性</span><br><span class="line">  data <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 (data) <span class="keyword">values</span> (<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 (data) <span class="keyword">values</span> (<span class="string">&#x27;200&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 (data) <span class="keyword">values</span> (<span class="string">&#x27;100&#x27;</span>); <span class="operator">/</span><span class="operator">/</span>不用給 id 的值，因為它會自動跳號</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t3;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 (id, data) <span class="keyword">values</span> (<span class="number">5</span>,<span class="string">&#x27;104&#x27;</span>);<span class="operator">/</span><span class="operator">/</span>id 可以自己填入並跳號</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 (data) <span class="keyword">values</span> (<span class="string">&#x27;200&#x27;</span>); <span class="operator">/</span><span class="operator">/</span> 但之後再<span class="keyword">insert</span>的值就會照你插隊的編碼往後排</span><br></pre></td></tr></table></figure><p>可以看創建 t3 表格的標準寫法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> t3;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t4 (</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key, <span class="operator">/</span><span class="operator">/</span>PK 唯一性</span><br><span class="line">  data <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">data2 <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 (data) <span class="keyword">values</span> (<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t4; <span class="operator">/</span><span class="operator">/</span>data2的預設值就會是 ABC</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 (data) <span class="keyword">values</span> (<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t4;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 (data, data2) <span class="keyword">values</span> (<span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;XYZ&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>語法問題 : insert into 欄位清單 跟 值 的量要一樣</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> idTemp <span class="type">int</span> auto_increment <span class="keyword">primary</span> key;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1; <span class="operator">/</span><span class="operator">/</span>欄位值自動帶入 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> ...</span><br><span class="line"><span class="keyword">delete</span> form t1 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> </span><br></pre></td></tr></table></figure><ul><li>資料庫正確性，每一筆紀錄都要有辦法跟另外一筆資料做區隔</li><li>識別型欄位，inentify，一定要有PK，否則後患無窮</li></ul><p>desc table_name 查詢欄位限制 </p><p>錯把資料內容當結構</p><p>功能需求、資料動線</p><ul><li>Entity 對MySQL資料庫來說是資料表 Table，但對其他程式來說是一個節點、其他中性的定義</li><li>Instance 是一個</li><li>Attribute : Instance 是描述資訊</li></ul><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/faea416c-c8d5-45ed-bfaf-1d1c92d62c55/Untitled.png" alt="Untitled"></p><ul><li>一對一 | 員工 對 員工</li></ul><p>資料表先有功能、額外還有效能、安全性</p><ul><li>用 PK 效率也比較快 ( 直接指定，不用篩選 )</li></ul><p>對既有的表格增加限制</p><p>比較少這樣寫，通常都是創建表格會寫</p><h3 id="ForeignKey-FK-外鍵"><a href="#ForeignKey-FK-外鍵" class="headerlink" title="ForeignKey FK 外鍵"></a>ForeignKey FK 外鍵</h3><p>要設定 FK 之前要有 PK 在，常見外鍵的情況有</p><ul><li>多對一關係 : 比如一個訂單有多筆明細，就會把 FK 的限制下在明細的表格上，沒有這筆訂單就不可能有那筆訂單的明細，不可能憑空生出一個明細。</li><li>一對一關係 : 比如使用者帳密，一個使用者只會有一組帳密，所以會在帳密的表格下外鍵限制，對照用戶主表格的主鍵。</li><li>多對多關係 : 一個論壇網站上，每個主題都會有多個回覆，每個回覆可以回應多個主題，在這種情況下，需要建立一個中介表格，紀錄主題和回覆之間的關係，中介表格需要參照主題表格回覆，和回覆表格的主鍵。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">use northwind; <span class="operator">/</span><span class="operator">/</span>使用北風資料庫</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> labC</span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> customers; <span class="operator">/</span><span class="operator">/</span>用customers複製表的內容，創建一個表格叫做labC</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> labO</span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders;  <span class="operator">/</span><span class="operator">/</span>用customers複製表的內容，創建一個表格叫做labO</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> labO (orderId, customerId) <span class="keyword">values</span> (<span class="number">16001</span>, <span class="string">&#x27;12345&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> labO <span class="keyword">where</span> orderId <span class="operator">=</span> <span class="number">16001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> labO <span class="keyword">where</span> orderId <span class="operator">=</span> <span class="number">16001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> labC </span><br><span class="line">  <span class="keyword">add</span> <span class="keyword">constraint</span> pk_customer  <span class="operator">/</span><span class="operator">/</span>命名 pk 的名字</span><br><span class="line">    <span class="keyword">primary</span> key (customerId); <span class="operator">/</span><span class="operator">/</span>在 labC 表格下 PK 值</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> labO</span><br><span class="line">  <span class="keyword">add</span> <span class="keyword">constraint</span> pk_order <span class="operator">/</span><span class="operator">/</span> 命名 pk 的名字</span><br><span class="line">    <span class="keyword">primary</span> key (orderId); <span class="operator">/</span><span class="operator">/</span>在 labO 表格下 PK 值</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> labO <span class="operator">/</span><span class="operator">/</span>選擇要下 FK 限制的表格</span><br><span class="line">  <span class="keyword">add</span> <span class="keyword">constraint</span> FK_LabO_LabC <span class="operator">/</span><span class="operator">/</span>命名這段 FK 的名字( 最好有兩個表的關聯 ) </span><br><span class="line">    <span class="keyword">foreign</span> key (customerId) <span class="keyword">references</span> labC (customerId); <span class="operator">/</span><span class="operator">/</span> 對照 labC 的表</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> labO (orderId, customerId) <span class="keyword">values</span> (<span class="number">16001</span>, <span class="string">&#x27;12345&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> labO <span class="keyword">where</span> orderId <span class="operator">=</span> <span class="number">16001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> labO <span class="operator">/</span><span class="operator">/</span>選擇表格</span><br><span class="line">  <span class="keyword">drop</span> <span class="keyword">constraint</span> FK_LabO_LabC; <span class="operator">/</span><span class="operator">/</span>刪掉欄位的規範 FK</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> labO </span><br><span class="line">  <span class="keyword">add</span> <span class="keyword">constraint</span> FK_LabO_LabC</span><br><span class="line">    <span class="keyword">foreign</span> key (customerId) <span class="keyword">references</span> labC (customerId)</span><br><span class="line">      <span class="keyword">on</span> <span class="keyword">delete</span> cascade <span class="keyword">on</span> <span class="keyword">update</span> cascade; <span class="operator">/</span><span class="operator">/</span> 增加這段會限制 labO 的 customerId 欄位</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>必須對照 labC 有的資料才能修改或刪除，如果 labC 沒有這個資料 則會跳error</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>ERROR <span class="number">1452</span> (<span class="number">23000</span>): Cannot <span class="keyword">add</span> <span class="keyword">or</span> <span class="keyword">update</span> a child <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>舉例 : labO 是訂單表格，如果要新增一筆沒有在 labC 表格中的客戶，則訂單無法成立</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>需要先在客戶訂單先新增客戶，才能在訂單新增有這個客戶的訂單</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> customerID, companyName <span class="keyword">from</span> labC <span class="keyword">where</span> customerId <span class="keyword">like</span> <span class="string">&#x27;A%&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> orderId, customerId <span class="keyword">from</span> labO <span class="keyword">where</span> customerId <span class="operator">=</span> <span class="string">&#x27;ALFKI&#x27;</span>;</span><br><span class="line"><span class="keyword">update</span> labC <span class="keyword">set</span> customerId <span class="operator">=</span> <span class="string">&#x27;AAAAA&#x27;</span> <span class="keyword">where</span> customerId <span class="operator">=</span> <span class="string">&#x27;ALFKI&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> orderId, customerId <span class="keyword">from</span> labO <span class="keyword">where</span> customerId <span class="operator">=</span> <span class="string">&#x27;AAAAA&#x27;</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> labC <span class="keyword">where</span> customerId <span class="operator">=</span> <span class="string">&#x27;AAAAA&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> orderId, customerId <span class="keyword">from</span> labO <span class="keyword">where</span> customerId <span class="operator">=</span> <span class="string">&#x27;AAAAA&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果拿到一個陌生的表格，不知道 FK 的關係，也是一樣要從</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>在 KEY 欄位可確認 FK限制是對照哪個一個表格用 </span><br><span class="line"><span class="keyword">desc</span> labO;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>去查詢看到 key 欄位有 PRI(主鍵)、UNI(唯一)、MUL(外鍵)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>PRI自帶兩個好處 uniqlo、<span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>同一個列可以有多個鍵 優先順序是PRI、UNI、MUL</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>一個表只能有一個 PRI，可以有多個UNI、MUL</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field          <span class="operator">|</span> Type          <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> OrderID        <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CustomerID     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">5</span>)    <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> EmployeeID     <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> OrderDate      <span class="operator">|</span> datetime      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> RequiredDate   <span class="operator">|</span> datetime      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ShippedDate    <span class="operator">|</span> datetime      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ShipVia        <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Freight        <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">19</span>,<span class="number">4</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ShipName       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">40</span>)   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ShipAddress    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">60</span>)   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ShipCity       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>)   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ShipRegion     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>)   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ShipPostalCode <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>)   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ShipCountry    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">15</span>)   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+---------------+------+-----+---------+-------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>會看到資料庫的限制</span><br><span class="line"><span class="operator">|</span> labO  <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `labo` (</span><br><span class="line">  `OrderID` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `CustomerID` <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `EmployeeID` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `OrderDate` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `RequiredDate` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ShippedDate` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ShipVia` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Freight` <span class="type">decimal</span>(<span class="number">19</span>,<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ShipName` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ShipAddress` <span class="type">varchar</span>(<span class="number">60</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ShipCity` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ShipRegion` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ShipPostalCode` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ShipCountry` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`OrderID`),</span><br><span class="line">  KEY `FK_LabO_LabC` (`CustomerID`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_LabO_LabC` <span class="keyword">FOREIGN</span> KEY (`CustomerID`) <span class="keyword">REFERENCES</span> `labc` (`CustomerID`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_general_ci <span class="operator">|</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多對多-FK-關係理解"><a href="#多對多-FK-關係理解" class="headerlink" title="多對多 FK 關係理解"></a>多對多 FK 關係理解</h3><p>假設有兩個表格 students 跟 curses，一個學生可以選擇多個課程，同一個課程也可能被多個學生選擇，這就是多對多的關係。</p><h3 id="情境題"><a href="#情境題" class="headerlink" title="情境題"></a>情境題</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> courses (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>因為雙方表格的PK都會重複多個出現在對照表格的PK，所以建立多對多關係，我們需要一個中間表格，記錄學生和課程對應關係，在這表格建立兩個外鍵，分別指向兩個表個得主鍵。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> enrollments ( <span class="operator">/</span><span class="operator">/</span>創造中間表格</span><br><span class="line">enrollment_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,  <span class="operator">/</span><span class="operator">/</span>並設定主鍵pk</span><br><span class="line">student_id <span class="type">INT</span>, <span class="operator">/</span><span class="operator">/</span>先把兩個要對照的表個的id創一個欄位</span><br><span class="line">  course_id <span class="type">INT</span>,</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (student_id) <span class="keyword">REFERENCES</span> students(id),</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY (course_id) <span class="keyword">REFERENCES</span> courses(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>其他資料表可以設定規則名稱 check( 運算式 ) 但 mysql 不檢查 ( 會檢查 PK、FK )</li></ul><p>FK 會連鎖刪除資料</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t6 (id <span class="type">int</span> <span class="keyword">primary</span> key, data <span class="type">int</span>);</span><br></pre></td></tr></table></figure><h3 id="臨時性資料表"><a href="#臨時性資料表" class="headerlink" title="臨時性資料表"></a>臨時性資料表</h3><p>建立一個只有這個連線知道，一個臨時的表，直到這個連線結束，這個表也會一起消失</p><p>他可以應用在</p><ul><li>執行大型操作，快速查詢和分析</li><li>對大量數據進行排序、分組計算，可以簡化SQL語句，提高效率</li><li>對數據進行加工、批量，都可以提高效率、安全、方便。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> temporary <span class="keyword">table</span> t16 ( id <span class="type">int</span> <span class="keyword">primary</span> key, data <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t16 (id, data) <span class="keyword">values</span> ( <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t16;</span><br></pre></td></tr></table></figure><p>另外一個訪客會無法建立同一個臨時資料表</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li>哪些資料會查詢比較多</li></ul><h3 id="實體關係圖-Entity-Relation"><a href="#實體關係圖-Entity-Relation" class="headerlink" title="實體關係圖 Entity-Relation"></a>實體關係圖 Entity-Relation</h3><h3 id="資料庫結構檢查-First-Normal-Form"><a href="#資料庫結構檢查-First-Normal-Form" class="headerlink" title="資料庫結構檢查 First Normal Form"></a>資料庫結構檢查 First Normal Form</h3><p>具備第一正規化、第二正規化等… 都是標準流程，這只是一個概念</p><p>第一正規化</p><p>知道這些規則就好，要理解這些規則背後的用意是什麼 ? </p><p>老師補充 但大師說的是不能有重複欄位</p><ul><li>要有PK</li><li>不能有重複的欄位9</li><li>欄位名稱 空格 運算式 ( JS ) 在作運算</li><li>這個規則資料庫大多不及格</li></ul><p>第二正規化</p><ul><li>和主鍵不相依的欄位，應該移去另外一個資料表</li><li>欄位符合這個 table 的主旨</li></ul><p>第三正規化</p><ul><li>一個表有兩個額外主題的小團體應該獨立出去</li></ul><h2 id="Security-for-SQL"><a href="#Security-for-SQL" class="headerlink" title="Security for SQL"></a>Security for SQL</h2><p>針對安全性設計有幾個可以注意的點</p><ul><li>使用高強度密碼  ( 長度至少 12 字元，包含大小寫、數字、符號 )</li><li>最小化權限，使用 MySQL 的 <code>GRANT</code> 和 <code>REVOKE</code> 指令來授權使用者的權限。</li><li>定期備份資料</li><li>使用 SSL&#x2F;TLS</li><li>防止 SQL 注入攻擊</li><li>監控資料庫活動</li><li>使用最新版本的 MySQL</li></ul><h3 id="SQL-安全性"><a href="#SQL-安全性" class="headerlink" title="SQL 安全性"></a>SQL 安全性</h3><ul><li>權限設定 : 以一整個伺服器、一個資料表作設定<ul><li>mmsql 可以給整個資料庫，只保護幾個表</li><li>mysql 只能一個個設定</li></ul></li></ul><h2 id="全域權限查詢"><a href="#全域權限查詢" class="headerlink" title="全域權限查詢"></a>全域權限查詢</h2><p>打開SQL伺服器後，登入SQL </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">use mysql; <span class="operator">/</span><span class="operator">/</span>查看全域設定，查詢全域語法、帳密</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+---------------------+------+-----+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field                  <span class="operator">|</span> Type                <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>  <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+---------------------+------+-----+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> Host                   <span class="operator">|</span> <span class="type">char</span>(<span class="number">60</span>)            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">User</span>                   <span class="operator">|</span> <span class="type">char</span>(<span class="number">80</span>)            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Password               <span class="operator">|</span> longtext            <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Select_priv            <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Insert_priv            <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Update_priv            <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Delete_priv            <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_priv            <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Drop_priv              <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Reload_priv            <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Shutdown_priv          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Process_priv           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> File_priv              <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Grant_priv             <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> References_priv        <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Index_priv             <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alter_priv             <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Show_db_priv           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Super_priv             <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_tmp_table_priv  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Lock_tables_priv       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Execute_priv           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Repl_slave_priv        <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Repl_client_priv       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_view_priv       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Show_view_priv         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_routine_priv    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alter_routine_priv     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_user_priv       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Event_priv             <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Trigger_priv           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_tablespace_priv <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Delete_history_priv    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ssl_type               <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">9</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ssl_cipher             <span class="operator">|</span> longtext            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x509_issuer            <span class="operator">|</span> longtext            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x509_subject           <span class="operator">|</span> longtext            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_questions          <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>        <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_updates            <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>        <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_connections        <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>        <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_user_connections   <span class="operator">|</span> <span class="type">bigint</span>(<span class="number">21</span>)          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>        <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> plugin                 <span class="operator">|</span> longtext            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> authentication_string  <span class="operator">|</span> longtext            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password_expired       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> is_role                <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1</span>)          <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> default_role           <span class="operator">|</span> longtext            <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_statement_time     <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">12</span>,<span class="number">6</span>)       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0.000000</span> <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+---------------------+------+-----+----------+-------+</span></span><br></pre></td></tr></table></figure><p>user 資料表查詢，有prub</p><p>host 連線後從哪裡連線過來，有很多連線有很多身分 ( 一般人不用做到這麼細緻 )</p><p>root 帳號 從 Localhost 近來，權限通常都是用列舉型態，哪個帳號在哪個資料庫可以下句子，以資料庫為單位作權限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>, host, password <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">User</span> <span class="operator">|</span> Host      <span class="operator">|</span> Password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> root <span class="operator">|</span> localhost <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root <span class="operator">|</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root <span class="operator">|</span> ::<span class="number">1</span>       <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> pma  <span class="operator">|</span> localhost <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+----------+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 可以看到那些 <span class="keyword">user</span> 可以看到從那些地方連線過來的</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 在使用 </span><br><span class="line"><span class="keyword">select</span> host, db, <span class="keyword">user</span>, select_priv, insert_priv, update_priv <span class="keyword">from</span> db;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> host      <span class="operator">|</span> db         <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> select_priv <span class="operator">|</span> insert_priv <span class="operator">|</span> update_priv <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> test       <span class="operator">|</span>      <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> test\_<span class="operator">%</span>    <span class="operator">|</span>      <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> localhost <span class="operator">|</span> phpmyadmin <span class="operator">|</span> pma  <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>可以看到個別使用者 全域的權限，個別可以使用的語法有什麼，通常工作時不會使用 root 帳號</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">user</span> 那欄是空的 <span class="operator">=</span> test 或 test 開頭的資料庫，所有人都可以使用</span><br></pre></td></tr></table></figure><p>root 可以對全域中所有資料庫下指令</p><h3 id="理解-MySQL-中，資料庫的結構"><a href="#理解-MySQL-中，資料庫的結構" class="headerlink" title="理解 MySQL 中，資料庫的結構"></a>理解 MySQL 中，資料庫的結構</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> db;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field                 <span class="operator">|</span> Type          <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Host                  <span class="operator">|</span> <span class="type">char</span>(<span class="number">60</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Db                    <span class="operator">|</span> <span class="type">char</span>(<span class="number">64</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">User</span>                  <span class="operator">|</span> <span class="type">char</span>(<span class="number">80</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span>         <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Select_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Insert_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Update_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Delete_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Drop_priv             <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Grant_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> References_priv       <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Index_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alter_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_tmp_table_priv <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Lock_tables_priv      <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_view_priv      <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Show_view_priv        <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_routine_priv   <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alter_routine_priv    <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Execute_priv          <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Event_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Trigger_priv          <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Delete_history_priv   <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> enum 是列舉格式，表示在哪個欄位中只能使用 N 或 Y，也是權限的意思</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Default</span> 是預設值的意思</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> Extra 其他屬性 </span><br></pre></td></tr></table></figure><aside>💡 會詳細列出可以做甚麼 Type 從哪部連過來的使用者，在哪個資料庫哪一個資料表，有什麼權限 ( 集合項 ) 通常只有 select、insert、update、references 這四個</aside><h2 id="新增使用者-CREATE-USER-…-BY-…"><a href="#新增使用者-CREATE-USER-…-BY-…" class="headerlink" title="新增使用者 CREATE USER … BY …"></a>新增使用者 CREATE USER … BY …</h2><ul><li>新增使用者能不能沒有密碼，要看 SQL_MODEL 的設定</li><li>使用者名稱會分辨英文大小寫 ，推薦全部小寫<ul><li>大部分系統都不會分辨，為避免錯誤，須注意規範為小寫</li></ul></li><li>可以分辨使用者從哪裡 Host 連線近來</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">新增使用者方法<span class="number">2</span> : 建立使用者，在受理權限 ( 推薦 )</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>預設權限會是 N</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> jeter identified <span class="keyword">by</span> <span class="string">&#x27;Pa$$w0rd&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">User</span>  <span class="operator">|</span> Host      <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> root  <span class="operator">|</span> localhost <span class="operator">|</span> Y        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> carl  <span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> N        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root  <span class="operator">|</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">|</span> Y        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root  <span class="operator">|</span> ::<span class="number">1</span>       <span class="operator">|</span> Y        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> pma   <span class="operator">|</span> localhost <span class="operator">|</span> N        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Carl  <span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> N        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> jeter <span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> N        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+----------+</span></span><br><span class="line"></span><br><span class="line">新增使用者方法<span class="number">1</span> : 受理連線權</span><br><span class="line"><span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> carl@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;Pa$$w0rd&#x27;</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">grant</span>連線、受理權限給、<span class="operator">*</span>.<span class="operator">*</span>全部使用 給 carl 這個管理員 </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> @<span class="string">&#x27;% ( 不是很常用 ) 不限定從哪裡連線來</span></span><br><span class="line"><span class="string">+-------+-----------+-------------+-------------------------------------------+</span></span><br><span class="line"><span class="string">| User  | Host      | Select_priv | Password                                  |</span></span><br><span class="line"><span class="string">+-------+-----------+-------------+-------------------------------------------+</span></span><br><span class="line"><span class="string">| root  | localhost | Y           |                                           |</span></span><br><span class="line"><span class="string">| carl  | %         | N           | 　　　　　　　　　　　　　　　　　　　　　　 |</span></span><br><span class="line"><span class="string">| root  | 127.0.0.1 | Y           |                                           |</span></span><br><span class="line"><span class="string">| root  | ::1       | Y           |                                           |</span></span><br><span class="line"><span class="string">| pma   | localhost | N           |                                           |</span></span><br><span class="line"><span class="string">| Carl  | %         | N           |                                           |</span></span><br><span class="line"><span class="string">| jeter | %         | N           |                                           |</span></span><br><span class="line"><span class="string">+-------+-----------+-------------+-------------------------------------------+</span></span><br><span class="line"><span class="string">//password是雜湊</span></span><br></pre></td></tr></table></figure><h2 id="授予權限-GRANT-…-ON-…-TO-…"><a href="#授予權限-GRANT-…-ON-…-TO-…" class="headerlink" title="授予權限 GRANT … ON … TO …"></a>授予權限 GRANT … ON … TO …</h2><ul><li>可以寫在一起，也可以寫 3 行授予權限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">授予全部權限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> northwind.<span class="operator">*</span> <span class="keyword">to</span> carl;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>gront 什麼權限 <span class="keyword">on</span> 在哪個資料庫 <span class="keyword">to</span> 什麼人</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> host      <span class="operator">|</span> db         <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> select_priv <span class="operator">|</span> insert_priv <span class="operator">|</span> update_priv <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> test       <span class="operator">|</span>      <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> test\_<span class="operator">%</span>    <span class="operator">|</span>      <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> localhost <span class="operator">|</span> phpmyadmin <span class="operator">|</span> pma  <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> northwind  <span class="operator">|</span> carl <span class="operator">|</span> Y           <span class="operator">|</span> N           <span class="operator">|</span> N           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> norhtwind 現階段跟未來的指令都可以使用 </span><br><span class="line"></span><br><span class="line">授予特定資料庫、特定資料表</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">update</span> <span class="keyword">on</span> northwind.customers <span class="keyword">to</span> carl;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> host      <span class="operator">|</span> db         <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> select_priv <span class="operator">|</span> insert_priv <span class="operator">|</span> update_priv <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> test       <span class="operator">|</span>      <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> test\_<span class="operator">%</span>    <span class="operator">|</span>      <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> localhost <span class="operator">|</span> phpmyadmin <span class="operator">|</span> pma  <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span> Y           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span> northwind  <span class="operator">|</span> carl <span class="operator">|</span> Y           <span class="operator">|</span> N           <span class="operator">|</span> N           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+------------+------+-------------+-------------+-------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">insert</span> <span class="keyword">on</span> northwind.customers <span class="keyword">to</span> carl;</span><br><span class="line"><span class="keyword">select</span> host, db, <span class="keyword">user</span>, table_name, table_priv <span class="keyword">from</span> tables_priv;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> host <span class="operator">|</span> db        <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> table_name <span class="operator">|</span> table_priv    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>    <span class="operator">|</span> northwind <span class="operator">|</span> carl <span class="operator">|</span> customers  <span class="operator">|</span> <span class="keyword">Insert</span>,<span class="keyword">Update</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------------+---------------+</span></span><br></pre></td></tr></table></figure><h2 id="收回權限-REVOKE-UPDATA-ON-…-FROM"><a href="#收回權限-REVOKE-UPDATA-ON-…-FROM" class="headerlink" title="收回權限 REVOKE UPDATA ON …. FROM"></a>收回權限 REVOKE UPDATA ON …. FROM</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">update</span> <span class="keyword">on</span> northwind.customers <span class="keyword">from</span> carl;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>收回權限 <span class="keyword">on</span> 在哪裡 <span class="keyword">from</span> 誰</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> host, db, <span class="keyword">user</span>, table_name, table_priv <span class="keyword">from</span> tables_priv;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> host <span class="operator">|</span> db        <span class="operator">|</span> <span class="keyword">user</span> <span class="operator">|</span> table_name <span class="operator">|</span> table_priv <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">%</span>    <span class="operator">|</span> northwind <span class="operator">|</span> carl <span class="operator">|</span> customers  <span class="operator">|</span> <span class="keyword">Insert</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+------+------------+------------+</span></span><br><span class="line"></span><br><span class="line">如果再刪除最後一個權限</span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> northwind.customers <span class="keyword">from</span> carl;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>會變成最後的空字串</span><br></pre></td></tr></table></figure><h2 id="變更密碼-SET-…-FOR-…-x3D"><a href="#變更密碼-SET-…-FOR-…-x3D" class="headerlink" title="變更密碼  SET … FOR … &#x3D;"></a>變更密碼  SET … FOR … &#x3D;</h2><ul><li>盡量不要針對 root 去更改密碼</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> carl <span class="operator">=</span> password(<span class="string">&#x27;456&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="更新-MySQL-資料庫的暫存-FLUSH-PRIVILEGES"><a href="#更新-MySQL-資料庫的暫存-FLUSH-PRIVILEGES" class="headerlink" title="更新 MySQL 資料庫的暫存 FLUSH PRIVILEGES"></a>更新 MySQL 資料庫的暫存 FLUSH PRIVILEGES</h2><ul><li>解決授予權限後，使用者卻還不能使用的狀況</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> carl; <span class="operator">/</span><span class="operator">/</span>創建 carl 在全域沒有權限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="MySQL-中-password-中會顯示雜湊演算法-Hashing-Algorithm"><a href="#MySQL-中-password-中會顯示雜湊演算法-Hashing-Algorithm" class="headerlink" title="MySQL 中 password 中會顯示雜湊演算法 Hashing Algorithm"></a>MySQL 中 password 中會顯示雜湊演算法 Hashing Algorithm</h3><p>會記雜湊後的結果，之後得到固定長度的內容，不是壓縮跟加密，但無法還原，是不可逆的</p><p>常見的雜湊演算法有 MD5、SHA-1、SHA-256等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> password(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> password(<span class="string">&#x27;123&#x27;</span>)                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">*</span><span class="number">23</span>AE809DDACAF96AF0FD78ED04B6A265E05AA257 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br></pre></td></tr></table></figure><h3 id="登入MySQL"><a href="#登入MySQL" class="headerlink" title="登入MySQL"></a>登入MySQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>u使用者名稱 <span class="operator">-</span>p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><h2 id="檢視-View-表"><a href="#檢視-View-表" class="headerlink" title="檢視 View 表"></a>檢視 View 表</h2><p>一個 select 賦予它名稱，透用 view 間接拿到資料表，簡化語法</p><p>可以作資料控管</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>語法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>寫的時候不能用 <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>但建立完 <span class="keyword">view</span> 後 之後 <span class="keyword">select</span> 可以用 <span class="keyword">order</span> <span class="keyword">by</span> 來排序 </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> vBuy <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> SupplierID, ProductID, ProductName, UnitsInStock, ReorderLevel</span><br><span class="line">  <span class="keyword">from</span> products</span><br><span class="line">  <span class="keyword">where</span> UnitsInStock <span class="operator">&lt;</span> ReorderLevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> vBuy <span class="keyword">order</span> <span class="keyword">by</span> SupplierID;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>看完可以刪除</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> vBuy ;</span><br><span class="line"><span class="keyword">DROP</span> vBuy ;</span><br></pre></td></tr></table></figure><h3 id="參考-微軟"><a href="#參考-微軟" class="headerlink" title="參考 | 微軟"></a>參考 | <a href="https://learn.microsoft.com/zh-tw/sql/relational-databases/security/authentication-access/getting-started-with-database-engine-permissions?view=sql-server-ver16">微軟</a></h3><ul><li><a href="https://sqlbolt.com/lesson/select_queries_with_constraints_pt_2">題庫練習</a> | SQLbolt</li></ul><h3 id="SQL-Injection-插入"><a href="#SQL-Injection-插入" class="headerlink" title="SQL Injection 插入"></a>SQL <strong>Injection</strong> 插入</h3><p>select user, host, password from user;</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;** 電子表格雖然可以進行排序和過濾，但資料庫具有廣泛的查詢功能，可以檢索、匹配、多個表個交叉引用紀錄，資料越龐大，差別越明顯。 &lt;/p&gt;
&lt;p&gt;常見 |資料庫管理系統 ( Database Management System，所寫 DBMS )，有名的資料庫有 : Miceosoft SQL Sever、MongoDB；MySQL、PostgreSQL等…&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="mysql, database" scheme="https://22aliang.github.io/tags/mysql-database/"/>
    
  </entry>
  
  <entry>
    <title>Hexo | 試裝 utterances 留言板</title>
    <link href="https://22aliang.github.io/2023/03/15/%E8%A9%A6%E8%A3%9D%20utterances%20%E7%95%99%E8%A8%80%E6%9D%BF/"/>
    <id>https://22aliang.github.io/2023/03/15/%E8%A9%A6%E8%A3%9D%20utterances%20%E7%95%99%E8%A8%80%E6%9D%BF/</id>
    <published>2023-03-14T16:47:28.304Z</published>
    <updated>2024-05-13T12:32:06.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="utterances-有什麼優點"><a href="#utterances-有什麼優點" class="headerlink" title="utterances 有什麼優點 ?"></a>utterances 有什麼優點 ?</h2><ul><li>No tracking, no ads, always free</li><li>Dark theme.</li><li>Lightweight. Vanilla TypeScript</li></ul><span id="more"></span><h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><ol><li><p>在 Github 上檢查你要存放留言 issue 的 repository 是不是 public ，這樣 utterances 才可以放issues</p></li><li><p>同意在你的 Github 上安裝 <a href="https://github.com/apps/utterances">utterances app</a></p><p><img src="https://i.imgur.com/4uwcueA.png" alt="utterances app Repository assess"></p><p>Repository access 的 radio option 選擇 Only select repositories，下拉選單 dropdown menu 選擇你要放 issues 的資料庫 repository，有看到別人的部落格是新建一個專門放置 issues 的 repository。</p></li><li><p><a href="https://utteranc.es/">utteranc</a> 的官網填上 repo <code>owner/repo</code> </p></li><li><p>Blog Post ↔️ Issue Mapping 這裡會決定在 issues 中的標題，我是選 Issue title contains page title 他會顯示文章標題。<br><img src="https://i.imgur.com/BiFpHda.png" alt="Issue title contains page title(上) &amp; pathname(下)"></p></li><li><p>Theme 就是留言板的樣式</p></li><li><p>Enable Utterances 這一串產生script tag，需要把他貼在下面路徑找到的 comments.swig 檔案裡面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">themes\next\layout\_partials\comments.<span class="property">swig</span></span><br><span class="line"><span class="comment">//路徑中的 next 替換成你目前使用的樣式</span></span><br></pre></td></tr></table></figure><p>在 comments.swig 找到下面這句的下方貼上 我們得到的那一串 script tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if page.comments %&#125;</span><br></pre></td></tr></table></figure><p>以下是我<del>到處拼湊</del>的 script tag </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">class</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">     <span class="selector-class">.utterances</span>&#123;<span class="attribute">max-width</span>: <span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="language-css">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://utteranc.es/client.js&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">repo</span>=<span class="string">&quot;owner/repo&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">issue-term</span>=<span class="string">&quot;title&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">label</span>=<span class="string">&quot;💬&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">theme</span>=<span class="string">&quot;github-dark&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">async</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>之後在主題路徑下找到 _config.yml 檔案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes\next\_config.yml</span><br></pre></td></tr></table></figure><p>開啟後在最下面加入以下程式碼</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">utterances:</span><br><span class="line">   enable: true</span><br></pre></td></tr></table></figure></li><li><p>恭喜你 ! 最後執行 <code>hexo clean</code> 、 <code>hexo g</code> 、<code>hexo d</code> 部屬完成，沒意外部落格就會有香香乾淨的留言板囉 !</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;utterances-有什麼優點&quot;&gt;&lt;a href=&quot;#utterances-有什麼優點&quot; class=&quot;headerlink&quot; title=&quot;utterances 有什麼優點 ?&quot;&gt;&lt;/a&gt;utterances 有什麼優點 ?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;No tracking, no ads, always free&lt;/li&gt;
&lt;li&gt;Dark theme.&lt;/li&gt;
&lt;li&gt;Lightweight. Vanilla TypeScript&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Hexo 系列" scheme="https://22aliang.github.io/categories/Hexo-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Hexo" scheme="https://22aliang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>網路運作基礎筆記</title>
    <link href="https://22aliang.github.io/2023/03/13/%E7%B6%B2%E8%B7%AF%E9%81%8B%E4%BD%9C%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    <id>https://22aliang.github.io/2023/03/13/%E7%B6%B2%E8%B7%AF%E9%81%8B%E4%BD%9C%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/</id>
    <published>2023-03-13T04:58:17.062Z</published>
    <updated>2024-05-13T12:47:08.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-是怎麼運作的呢"><a href="#Web-是怎麼運作的呢" class="headerlink" title="Web 是怎麼運作的呢 ?"></a>Web 是怎麼運作的呢 ?</h2><p>  <img src="https://i.imgur.com/eavypn1.jpg" alt="Server-side website programming"></p><p>當你在瀏覽器輸入網址或點選鏈接時，瀏覽器會透過超文本傳輸協定（HTTP）向遠端的網頁伺服器發送請求（HTTP Request），網頁伺服器收到請求後，處理完成並回傳相對應的內容（HTTP Response）。</p><p>全球透過海底電纜通訊，網路以網路協定相連。</p><span id="more"></span><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>domain name servers 轉換IP與URL的服務</p><p>真正的網址 : 四個範圍 0-255  &#x2F; 2的8次方 8bit 256種 0~255</p><h3 id="靜態網頁-Static-sites"><a href="#靜態網頁-Static-sites" class="headerlink" title="靜態網頁 Static sites"></a>靜態網頁 Static sites</h3><p>  <img src="https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview/basic_static_app_server.png" alt="Static sites | 圖源1"></p><p>  靜態網頁主要由 HTML、CSS 以及 JavaScript 構成。當瀏覽器請求這些文件時，伺服器直接返回文件內容。</p><h3 id="動態網頁-Dynamic-sites"><a href="#動態網頁-Dynamic-sites" class="headerlink" title="動態網頁 Dynamic sites"></a>動態網頁 Dynamic sites</h3><p>  <img src="https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview/web_application_with_html_and_steps.png" alt="Dynamic sites | 圖源1 "></p><p>  動態網頁則是在伺服器端處理，動態生成網頁內容。伺服器將數據和模板結合，生成 HTML，再返回給瀏覽器。</p><h3 id="用戶端-Client-side"><a href="#用戶端-Client-side" class="headerlink" title="用戶端 Client side"></a>用戶端 Client side</h3><p>用戶端的技術主要包括 HTML、CSS 和 JavaScript，用來構建用戶界面並處理與用戶的互動。</p><h3 id="伺服器端-Sever-side"><a href="#伺服器端-Sever-side" class="headerlink" title="伺服器端 Sever-side"></a>伺服器端 Sever-side</h3><p>伺服器端的開發使用如 PHP、Python、Java、C# 和 NodeJS 等語言，負責數據處理、用戶驗證、存儲管理等後端任務。</p><h2 id="什麼是-HTTP"><a href="#什麼是-HTTP" class="headerlink" title="什麼是 HTTP ?"></a>什麼是 HTTP ?</h2><p>HTTP 是建立在 TCP&#x2F;IP 協議之上的應用層協議，用於在網路上傳輸超文本數據。HTTPS 則是帶有安全層的 HTTP，使用 SSL&#x2F;TLS 進行加密處理，預設端口為 443。</p><blockquote><p>詳細影片 | Will <a href="https://www.youtube.com/watch?v=Taq5TV1K4XU">保哥｜初學者都該學會的 HTTP 通訊協定基礎</a></p></blockquote><h3 id="基於-Restful-API-的-Http-Request-Method"><a href="#基於-Restful-API-的-Http-Request-Method" class="headerlink" title="基於 Restful API 的 Http Request Method"></a>基於 Restful API 的 Http Request Method</h3><ul><li><p>當你在網路點擊一個連結、提交一個表單、進行一次搜索等…瀏覽器都會發送一個HTTP給伺服器。</p></li><li><p>以下是基於 Restful API 常見的</p></li><li><p><code>GET</code> 拿取資料 (應只用在顯示、讀取用途)</p></li><li><p><code>POST</code> 上傳資料，請求伺服器處理 ( 如提交表單、上傳檔案，可能建立、修改現有資源)</p></li><li><p><code>PUT</code> 覆蓋資料(全部)</p></li><li><p><code>PATCH</code> 更新資料(可部分更新)</p></li><li><p><code>DELETE</code> 刪除資料</p></li><li><p><code>OPTIONS</code> 使伺服器回傳該資源支援的所有HTTP請求方法</p></li></ul><h3 id="基於-Restful-API-的-Status-Code"><a href="#基於-Restful-API-的-Status-Code" class="headerlink" title="基於 Restful API 的 Status Code"></a>基於 Restful API 的 Status Code</h3><ul><li><code>1xx</code> ：信息 Informational 接收到request了 需要繼續處理100 Continue：Server 成功接收、但 Client 還要進行一些處理。</li><li><code>2xx</code>：成功 Successful : 200 0K：請求成功 、201 Created：資源已經被創建，POST、PUT 後可能會收到這樣的回應、204 No Content：成功但沒有回傳的內容（當你發出 Delete 的 request）</li><li><code>3xx</code>：重定向、轉址 (Redirects)301 Moved Permanently : 請求的網址已經搬家囉</li><li><code>4xx</code>：用戶端的錯誤 (Client Errors) 可能格式寫錯或漏寫400 Bad Request：請求格式寫錯、資源太大401 Unauthorized：未取得授權、檢視 API 的授權方式、登入等…、403 Forbidden：使用錯誤的驗證404：找不到資源，通常是路徑錯誤，大多是前端的路徑輸入錯誤、422：請求是正確的，可能不符合操作流程（大多可從後端的回應中找到問題）、429：請求次數過多，後端封鎖。</li><li><code>5xx</code>：伺服器端錯誤 (Server Errors) 伺服器當機、機台燒掉、500 Internal Server Error：伺服器出錯，搶票之類的</li></ul><blockquote><p>詳細 RFC 7231 | <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-6.3.1">https://datatracker.ietf.org/doc/html/rfc7231#section-6.3.1</a></p></blockquote><p><img src="https://i.imgur.com/kZpUL4S.png" alt="chrome devtools"><br>使用 Google Chrome 按 F12 開啟開發者工具，可在 Network 標籤下檢視網頁發出的請求和接收到的響應，有助於優化網頁性能。</p><h2 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h2><p>表現層狀態轉換 Representational State Transger ，是一種全球資訊網軟體架構風格，目的在方便不同軟體&#x2F;程式在網路 ( 例 www ) 互相傳遞</p><p>REST 是基於 HTTP 超文字傳輸協定上確定的一組約束和屬性</p><p>REST 本身不是一套標準，而是設計風格。</p><p>現代 API 製作採用的設計風格就是 REST ，aka . RESTful APIs</p><p>允許使用者端發出統一資源標識符 ( URI ) 存取和操作網路資源。</p><p>通常 Path 是比較一致的</p><p>網頁瀏覽器只能送出 GET、POST 這兩種 Request，其他可以用 Postman 來使用</p><h2 id="Program-Process-Thread-三者關係"><a href="#Program-Process-Thread-三者關係" class="headerlink" title="Program, Process, Thread 三者關係"></a>Program, Process, Thread 三者關係</h2><p><img src="https://i.imgur.com/7tce7Bd.jpg" alt="Program, Process, Thread"></p><p>這三者的關係可以通過以下比喻來理解：程式（Program）是一本劇本，進程（Process）是舞台上的一個表演，線程（Thread）則是表演中的每一個獨立角色。</p><h3 id="Race-Condition-競態條件"><a href="#Race-Condition-競態條件" class="headerlink" title="Race Condition 競態條件"></a>Race Condition 競態條件</h3><p>在電腦科學中，進程 process 是正在執行的程式，執行緒 thread 可以由程序調度員 scheduler 作業系統內的工程，獨立管理輕量級進程。</p><p>一個 process 內可以有多個 threads </p><p>絕大多數時間，CPU都是閒置 ( threads 可能會需要等待 I&#x2F;O )</p><p>因此我們可以寫出內部含有多個 threads 的程式，讓 threads 被多個 CPU 並進執行，提高效率</p><p>這就是很多程式語言都支援的 </p><p>multi-threaded prmgramming</p><p>當兩個以上的 thread 訪問一個共享資源 shared resource 時，會發生 race condition 可能會造成無法預期的狀況或 bug</p><p>分割執行緒</p><p>要避免 Race Condition，可以透過劃分 critical region，程式當中訪問 shared resource 被稱為 Critical Region ，每當要進去 critical region 前先把 shared resource 上鎖，離開後在解鎖。</p><p>Lock 也稱為 mutex ( mutual exclustion lock ) 在進入 Critical Region 前，mutex 會檢查是否可以進入， Mutex 另外一個名字是 binary semaphore</p><h3 id="瀏覽器"><a href="#瀏覽器" class="headerlink" title="瀏覽器"></a>瀏覽器</h3><p>包含兩個主要功能</p><ol><li>排版引擎 layout engine，將HTML轉換成視覺表示</li><li>Javescript引擎</li></ol><h2 id="參考-Reference"><a href="#參考-Reference" class="headerlink" title="參考 Reference"></a>參考 Reference</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Learn/Server-side/First_steps/Introduction">MDN</a><br>圖源 1 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/First_steps/Client-Server_overview">MDN | Client-Server Overview</a></p><h2 id="學習資料"><a href="#學習資料" class="headerlink" title="學習資料"></a>學習資料</h2><p><a href="https://www.youtube.com/watch?v=QuCu4iDpPTU&t=1871s">六角學院｜前後端都該理解的計算機概論</a><br><a href="https://www.youtube.com/watch?v=7_LPdttKXPc">Aaron｜How the Internet Works in 5 Minutes</a><br><a href="https://hulitw.medium.com/learning-tcp-ip-http-via-sending-letter-5d3299203660">Huli｜從傳紙條輕鬆學習基本網路概念</a></p><h2 id="讀書清單"><a href="#讀書清單" class="headerlink" title="讀書清單"></a>讀書清單</h2><p>恐龍書 Operation System Concepts<br><a href="https://www.rfc-editor.org/rfc/rfc2616">RFC 2616</a></p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookies 是伺服器傳送給瀏覽器，並在客戶端下次訪問同一網站時一同發回的一小段文字</p><p>可以幫助網站保留使用者偏好設置 ( 例如 登入帳號、語言、字體大小 … )<br>在 Chrome 內 點選 setting 點 privacy and security 在點 cookies and site data 舊可以看到所有的 Cookie ( 管理 cookie )</p><h3 id="資料型態"><a href="#資料型態" class="headerlink" title="資料型態"></a>資料型態</h3><p>key-value pair </p><p>在express 設定 cookie 方法是</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="property">cookie</span> ( key, value )</span><br><span class="line"></span><br><span class="line"><span class="comment">//示範</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/setCookie&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&quot;yourcookie&quot;</span>,<span class="string">&quot;value&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;已經設置cookie&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/seeCookie&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;看看這cookie&quot;</span> + req.<span class="property">cookies</span>.<span class="property">yourcookie</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//會印在網頁上</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie">MDN 文件</a>，將 Cookie 存入、用 JS 取出 cookie</p><p>附上範例程式碼：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; token, expired &#125; = res.<span class="property">data</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = hexToken=$&#123;token&#125;; expires=$&#123;<span class="keyword">new</span> <span class="title class_">Date</span>(expired)&#125;;;</span><br></pre></td></tr></table></figure><p>Axios 文件，</p><p>設定預設 Cookies Headers：<a href="https://github.com/axios/axios#global-axios-defaults">https://github.com/axios/axios#global-axios-defaults</a></p><p>範例程式碼：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> token = <span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line">.<span class="title function_">split</span>(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">.<span class="title function_">find</span>(<span class="function">(<span class="params">row</span>) =&gt;</span> row.<span class="title function_">startsWith</span>(<span class="string">&#x27;hexToken=&#x27;</span>))</span><br><span class="line">?.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = token;</span><br></pre></td></tr></table></figure><h3 id="CORS-跨來源資源共用"><a href="#CORS-跨來源資源共用" class="headerlink" title="CORS 跨來源資源共用"></a>CORS 跨來源資源共用</h3><p><strong>Cross-Origin Resource Sharing | <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">MDN</a></strong></p><p>跨來源請求 : 同源政策下不允許讀取，缺少 CORS Access Control Allow Origin  的擋頭</p><h1 id="成為看起來很強的後端-閱讀心得筆記"><a href="#成為看起來很強的後端-閱讀心得筆記" class="headerlink" title="成為看起來很強的後端 | 閱讀心得筆記"></a>成為看起來很強的後端 | 閱讀心得筆記</h1><p><a href="https://www.youtube.com/watch?v=HMX4KSDtfpw&list=PLS5AiLcCHgNxd341NwuY9EOpVvY5Z8VOs&index=1">影片網址</a></p><h3 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h3><p>cookies 的問題 : </p><ol><li>使用 cookies 只能儲存 4095 bytes </li><li>cookie 會被客戶端亂搞</li></ol><hr><p>Session 是網路伺服器上的儲存空間，當使用者登入網頁時，伺服器會製作 session id 、相對應資料</p><p>session id 會被當 cookie 送到伺服器，就解決 cookie 的問題惹</p><p>發送 session id 也可以進行簽名</p><h3 id="環境變數-environment-varailbe"><a href="#環境變數-environment-varailbe" class="headerlink" title="環境變數 environment varailbe"></a>環境變數 environment varailbe</h3><p>直接在程式碼內儲存秘密會被告吧</p><p>通常會把秘密存在環境變數內部，環境變數 environment varailbe 是動態的值，可以影響電腦上運行的程式。</p><p>在 Node.js 使用 <a href="https://www.npmjs.com/package/dotenv">dotenv</a> 套件，透過 process 物件的 env 屬性獲得環境變數</p><p>如果在雲端部屬伺服器，雲端供應商應該有秘密管理工具 ( AWS Secret Manager )</p><p>Flash 是 session 特別儲存空間 ，可以用 connect-flash 套件</p><h3 id="資安基本觀念"><a href="#資安基本觀念" class="headerlink" title="資安基本觀念"></a>資安基本觀念</h3><p>在我們的數據庫中以純文字的形式存儲密碼</p><ol><li>駭客會可以駭入</li><li>內部員工也可以看到</li></ol><p>因此密碼存到數據庫之前會進行轉換 ( 雜湊 hash )、加密 ( encrypt ) 通常可以解密 (危)</p><p>未加密的密碼 明文 plantext — 加密 encrypt —&gt; 密文 cipher  ( 解密 decrpt ) </p><p>密碼以雜湊值 ( hash values ) 儲存在 數據庫 跟 本地端 </p><p>可以使用 SHA 家族演算法對密碼進行雜湊處理 ( 速度快 )</p><h3 id="密碼加鹽-salt"><a href="#密碼加鹽-salt" class="headerlink" title="密碼加鹽 salt"></a>密碼加鹽 salt</h3><p>雜湊前添加一點鹽 salt 在去做雜湊</p><p>在數據庫中通常會存儲 雜湊值 、 鹽 兩個部分<br>驗證時會將兩個湊在一起</p><p>所以多數忘記密碼時是真的沒辦法恢復密碼</p><h3 id="Bcrypt"><a href="#Bcrypt" class="headerlink" title="Bcrypt"></a>Bcrypt</h3><p>是根據 Blowfish 加密演算法設計的密碼雜湊函式，使用時可以客製化 slat round 數字越大，雜湊運算時間越久</p><h3 id="我們怎麼執行一個瀏覽器"><a href="#我們怎麼執行一個瀏覽器" class="headerlink" title="我們怎麼執行一個瀏覽器"></a>我們怎麼執行一個瀏覽器</h3><p>先從  </p><p>Browser 瀏覽器 &lt;—&gt; WiFi、網路 &lt;—&gt; 路由器Router &lt;—&gt; Proxy Server (快取)&lt;—&gt; DNS 域名解析 (URL轉換成IP)  &lt;—&gt; 跑到特定伺服器 Server</p><p>進到 Server 後 : </p><p>Requset —&gt; Load Blacne 複雜平衡(流量比較大時做分流) —&gt; 分配到不同的伺服器 Server(硬體) WebServer (網頁伺服器) python&#x2F;flack、node&#x2F;experss —&gt;第一種直接接受—&gt;中控台 Reverse Proxy 反向代理 ( 一些憑證、快取可以掛在代理身上 ) —&gt;port 埠號回復Respoues </p><h3 id="TCP-x2F-IP-協議"><a href="#TCP-x2F-IP-協議" class="headerlink" title="TCP&#x2F;IP 協議"></a>TCP&#x2F;IP 協議</h3><p>他會一層層封包過去，在最後解封</p><p>從外到內 ( 應用層Application &#x2F; RTSP(大多走UDP)、HTTP、FTP —&gt;傳輸層Transport &#x2F;TCP( 三次握手 ) 、UDP( 類似語音通話 )—&gt;網路層Inernet IP —&gt;連接層Link (底層怎麼運輸我們不知道、光纖)</p><h2 id="應用層-Application"><a href="#應用層-Application" class="headerlink" title="應用層 Application"></a>應用層 Application</h2><h3 id="HTTP-x2F-HTTPS"><a href="#HTTP-x2F-HTTPS" class="headerlink" title="HTTP&#x2F;HTTPS"></a>HTTP&#x2F;HTTPS</h3><p>常見寫法是 第一個字母大寫，第二個自己用 - 連接</p><p>主要傳遞途徑 短連接resqest 、 reponse </p><p>HTTP 由 Header 和 Body 組成</p><p>Header 裡常見的資訊有 meta information：</p><ul><li>MethodGET、POST、UPDATE、DELETE</li><li>Host欲要連線的 hostname</li><li>Path欲要連線的 host 的 path</li><li>Origin 來源</li><li>User-Agent連線者的瀏覽器名稱</li><li>Content-Type : Body 帶什麼格式，需要怎麼解西</li></ul><p>若為 GET 的 requestBody 裡可能就沒有資料若為 POST 的 request會存放相關資料在 Body 裡</p><p>Body 常見格式</p><p>application &#x2F; JSON</p><p>multipart</p><p>text </p><h3 id="FTP-x2F-SFTP"><a href="#FTP-x2F-SFTP" class="headerlink" title="FTP &#x2F; SFTP"></a>FTP &#x2F; SFTP</h3><h3 id="Telenet-x2F-x2F-ptt-cc"><a href="#Telenet-x2F-x2F-ptt-cc" class="headerlink" title="Telenet : &#x2F;&#x2F; ptt.cc"></a>Telenet : &#x2F;&#x2F; ptt.cc</h3><h3 id="SMTP-x2F-POP3-信件收發Eail"><a href="#SMTP-x2F-POP3-信件收發Eail" class="headerlink" title="SMTP &#x2F; POP3 信件收發Eail"></a>SMTP &#x2F; POP3 信件收發Eail</h3><h3 id="WS-x2F-WSS"><a href="#WS-x2F-WSS" class="headerlink" title="WS &#x2F; WSS"></a>WS &#x2F; WSS</h3><p>低延遲 長連接 會建立一個通道就不會斷掉 ( 遊戲常用)</p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>ssh金鑰匙</p><h3 id="RTSP-x2F-RTMP"><a href="#RTSP-x2F-RTMP" class="headerlink" title="RTSP&#x2F; RTMP"></a>RTSP&#x2F; RTMP</h3><p>串流用，把影片切片段傳輸</p><h2 id="權限-101"><a href="#權限-101" class="headerlink" title="權限 101"></a>權限 101</h2><h3 id="Client-to-Server"><a href="#Client-to-Server" class="headerlink" title="Client to Server"></a>Client to Server</h3><p>Browser &#x2F; APP  like : 會員登入、scope. name. email  —&gt; 第三方登入、APP登入 ( 會丟一個 Token ) </p><h3 id="Server-to-Server"><a href="#Server-to-Server" class="headerlink" title="Server to Server"></a>Server to Server</h3><p>因為在防火牆後，通常會比較簡單，伺服器跟伺服器端做對接</p><p>Authentication 驗證 | 你是學生</p><p>Authorization 授權 |但你不能用教師電梯</p><p>HTTP Status Code</p><p>2xx 成功、200 OK</p><p>404 Not found、401 是驗證沒過、403是授權沒過<br>500 伺服器掛掉、504 超過30秒反應太慢、502 斷掉</p><h3 id="Token-權杖-x2F-令牌"><a href="#Token-權杖-x2F-令牌" class="headerlink" title="Token 權杖&#x2F;令牌"></a>Token 權杖&#x2F;令牌</h3><p>Event-based 一個事件觸發(購買東西銀行端驗證簡訊)  OTP 一次性</p><p>Time-based 有時效性的(忘記密碼) Token</p><p>Static 密碼</p><h3 id="雜湊-Hash-單"><a href="#雜湊-Hash-單" class="headerlink" title="雜湊 Hash 單"></a>雜湊 Hash 單</h3><p>比較像單向的，透過 Hash function 去雜湊變成很難變成原來樣子</p><p>常見方式 msd&#x2F;sha256 、md5(可能會被破解危險)</p><p>但可以找回來，叫做查表 </p><p>常見的表格有 Rrainbow Table</p><p>重複性雜湊 ( 會有時間問題 ) 大概 2~3 次</p><h3 id="編碼-Encdoe-雙"><a href="#編碼-Encdoe-雙" class="headerlink" title="編碼 Encdoe 雙"></a>編碼 Encdoe 雙</h3><p>是屬於雙向的，透過一個Encode 轉變，Decode再轉回來</p><p>base64 壓縮率比較高 ( 大頭貼透過base64轉成文字 A12X9+&#x3D;&#x3D; )(a<del>z、A</del>Z、0~9)</p><p>hex (16進制編碼 a<del>f、0</del>9)</p><h3 id="加密-Enarypt-雙-key"><a href="#加密-Enarypt-雙-key" class="headerlink" title="加密 Enarypt 雙 + key"></a>加密 Enarypt 雙 + key</h3><p>可以上鎖Encrypt、可以在解鎖Decrypt</p><p>有兩種、對稱式加密 AES (同一把鎖) 、 比較安全 :非對稱式加密 SSL ( 加密(公鑰)、解鎖(私鑰))</p><h3 id="API-Key"><a href="#API-Key" class="headerlink" title="API Key"></a>API Key</h3><p>(寫得好要藏好，要藏在Server上)</p><p>Server to Server 驗證</p><p>Custom  → X 當開頭</p><p>Http Header : X-Api-Key : admin </p><p>產生API Key  1.寫死  2.DB   |  有可能 1.DEL 刪除  2.EXP 過期</p><h3 id="Http-Basic-Authentication-登入驗證-但會把-password-暴露在外面"><a href="#Http-Basic-Authentication-登入驗證-但會把-password-暴露在外面" class="headerlink" title="Http Basic Authentication 登入驗證 | 但會把 password 暴露在外面"></a>Http Basic Authentication 登入驗證 | 但會把 password 暴露在外面</h3><p>多用戶管理模式、類似API key 的模式</p><p>Http Header -Authorization : Basic Token( username password(密碼有非法字元傳輸要重新編碼 base64編碼 (username : password ) )  Server 可以跳彈跳視窗讓使用者做challoenge</p><p>簡單的帳號密碼登入要小心 log日誌 看到</p><ol><li>&#x2F;login ? uesername &#x3D; kk &amp;&amp; password &#x3D; 1234</li><li>&#x2F;orders Authonization : Basc ( kk : 1234)</li><li>&#x2F;lohin { username: “kk”, password: “1234” } 放在 body</li></ol><h3 id="JWT-x3D-json-web-token"><a href="#JWT-x3D-json-web-token" class="headerlink" title="JWT &#x3D; json web token"></a>JWT &#x3D; json web token</h3><p>JWT 放在 locastge ( 可以拿到整包token去解析)</p><p>Authorization : Brarer Token &#x2F; 注意</p><p>第一次登入用 body 帶 username password 登入</p><p>server 驗證 db 過把 token 給 client </p><p>可以降低伺服器壓力</p><p>JWT 由 Header ( 他是json，並用 base64編碼 )、Payload ( 隱含資訊也是 base64編碼 )( 絕對不能放機密資訊 )、Signature ( 把 Header、padload 綁起來做雜湊 hash ) secret  ⇒ sigrature 無狀態驗證 可以無限擴張</p><p>Load Balancing</p><ul><li>如果貴司的服務真的用一台 server 無法負荷的話，會用多台 server 同時提供同個服務</li><li>這是為了能將請求的流量分散到多台機器上，而不是吃死一台的資源 ，簡稱 Load Balancing</li><li>沒特別設定的話，預設都是 Round Robin，也就是請求進來是輪流平均分配給每一台提供相同服務的 server，<br>其它的演算法如 Least Connections, IP Hash, Least Response Time …</li></ul><p>設定</p><ul><li>設定的話可以在 HLB(硬體處理) e.g. 我們客戶是用 <em>NetScaler</em>)</li><li>也可以在SLB(軟體處理e.g. HAProxy, Critix, Nginx …etc.)</li></ul><p>Sticky session</p><ul><li>正如前面說的預設是 Round Robin，但如果我就是想曾經處理過某個 client 的請求 backend，在 load balancer 後續遇到同一個 client 的時候都導向同一台 backend 怎麼辦？</li><li>這時用到的技巧就叫 Sticky session 又稱 <em>Session Affinity</em>，它的作用就是識別請求中的某種唯一值(e.g. client ip)，並透過某種方式記錄(e.g. cookie)，知道這個請求應該要導給哪一台機器</li><li>後端如果是用 Spring 可以搭配 Spring Session 方便搭配 Spring Security 管理，而 Spring Session 的 Storage 又可以再搭配 REDIS(內建支援，但要設定)，但這前提是你用的是 JSESSIONID，預設 Spring Session 預設並不支援 JWT</li></ul><p>小結</p><ul><li>如果要達到 Sticky Session<ul><li>先找到你的 Load Balancer 是硬體還軟體，查或問一下怎麼設定</li><li>再找到你提供同個服務的 Backend 看它原本的 Authorization 是走什麼機制，再做對應的處理(如果需要)</li></ul></li></ul><p>JWT 保存方式、Payload不要放特別資訊、Header 可能是 HMAC、SHA256  </p><h3 id="JOSE"><a href="#JOSE" class="headerlink" title="JOSE"></a>JOSE</h3><p>JWA | 登入驗證</p><p>JWK | 使用金鑰</p><p>JWE | 如何進行加密</p><p>JWS | 簽署token</p><h3 id="Cookie-運作方式"><a href="#Cookie-運作方式" class="headerlink" title="Cookie 運作方式"></a>Cookie 運作方式</h3><p>儲存在瀏覽器的小份資料</p><p>也可以用 Cookie 做驗證 ( 不用token )</p><p>Session 會話&#x2F;對話 ( 一段時間的狀態 ) 一個概念</p><p>Browser → &#x2F;login resquest header—&gt; server</p><p>Set cookie ( 瀏覽器會自動儲存、有安全性，壞處是危險跟可能被更改 ) </p><p>Brower —&gt;header&#x2F;login &#x3D; true resquest —&gt;server</p><p>安全性 : session baseed cookie 去加密 &#x2F;login &#x3D; true </p><p>加密多一個步驟 ( 延遲 ) 、長度變長 ( 已經沒人再用惹 )</p><p>純 session data 資料存在伺服器端 ( 大部分都在做這個，用序號來代替資料 )</p><p>Brower —&gt;header Set cookie side &#x3D; C01  —&gt;server—seesion dtat stone</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a21ed5c3-98b9-49a7-b248-82e0f2f57e65/Untitled.png" alt="Untitled"></p><h3 id="Cookie-保護方式"><a href="#Cookie-保護方式" class="headerlink" title="Cookie 保護方式"></a>Cookie 保護方式</h3><ol><li>按照作用域設定</li></ol><p>第一、二方Cookie</p><p>相同網域</p><p>設定 Cookie 不要被濫用</p><p>Domain &#x3D; <a href="http://api.example.com/">api.example</a>.com</p><p>Path &#x3D; &#x2F;login、&#x2F;orders</p><p>Secere</p><ol><li>Persihtent Cookie 有時效性的</li></ol><p>Expires ( 時間 2022&#x2F;11&#x2F;7) 、Max-Age ( 存活長度 1day )</p><p>第三方Cookie</p><p>瀏覽器與伺服器的網域不同、跨網域追蹤 GA.. ( 關掉可防止追蹤、但大型通常都共用 api )</p><p>SameSite三種模式 : Sirtct 只允許第一方Cookie &#x2F; none &#x2F; lax 部分看只看Get ( Server設定)</p><h3 id="Cookie-儲存方式"><a href="#Cookie-儲存方式" class="headerlink" title="Cookie 儲存方式"></a>Cookie 儲存方式</h3><p>禁止開發者對cookite做壞事 : HttpOnly </p><h3 id="安全的-Token-Cookie"><a href="#安全的-Token-Cookie" class="headerlink" title="安全的 Token Cookie"></a>安全的 Token Cookie</h3><p><a href="https://hasura.io/blog/best-practices-of-using-jwt-with-graphql/">https://hasura.io/blog/best-practices-of-using-jwt-with-graphql/</a></p><ol><li><p>JWT 是用 Token 放在autherition benear </p><p> 儲存方式 : locastage 問題 : 可以用 JS 拿到 token 解法 : Http Only cookie</p><p> JWT 2.0 Server 會沒辦法驗證，需要由Client 去做額外的處理，所以變成發兩次，第一次用 In-Memory 把JWT存在記憶體 ( 存取完就消失) refresh-token ( 會有一個使用期限 大概30天)、第二次拿 auth-token ( 跟權限有關的)，缺點是頻繁溝通</p></li></ol><p>Session &#x2F; Cookie 會自動帶 cookie</p><h3 id="要怎麼選擇"><a href="#要怎麼選擇" class="headerlink" title="要怎麼選擇 ?"></a>要怎麼選擇 ?</h3><p>靜態通常可以選 JWT 前後端分離</p><p>Session &#x2F; Cookie SSR </p><h3 id="Oauth-2"><a href="#Oauth-2" class="headerlink" title="Oauth 2"></a>Oauth 2</h3><p>第三方串接</p><ol><li>code 模式 code &#x3D; foo (google…) token ←-&gt; </li><li>token ( 打一次)</li></ol><p>按鈕就像超連結  <a href="https://oateh2.fac./?readict">https://oateh2.fac./?readict</a> &#x3D;xxx &amp;type&#x3D;token(cookie)&amp;secpe &#x3D; email;profile</p><p>用後端去做 ( 不會接觸到Client) | 301 token 用白名單去篩選 轉址過去 redienct </p><p>Token &#x2F; code 在 Clinet 在 記憶體上 merony ( 但容易外流 有點危險 ) </p><h3 id="運算是什麼"><a href="#運算是什麼" class="headerlink" title="運算是什麼 ?"></a>運算是什麼 ?</h3><p>Browser 本地 —&gt; Server 雲裝置</p><p>單一運算 | 垂直擴充</p><p>平行運算 | 很好的擴展、水平擴充，讓很多人一起去算一個東西</p><p>網格運算 |  兩個維度</p><h3 id="Webhook"><a href="#Webhook" class="headerlink" title="Webhook"></a>Webhook</h3><p>金流串接</p><p>使用者行為 Actior —&gt; Server 上的 Action2 ( 第三方金流 Webhook ) 觸發 —&gt;HTTP POST &#x2F;list 我們寫的後端 Server 會開一支 API 給第三方接資料，跟我們自己的 DB 串接</p><p>name、type、palyoad、 </p><p>Github</p><p>CI&#x2F;CD 後端會幫我們部屬網站</p><p>主詞是誰 ? 決定誰 in 誰 out ( 寫反資料會打不進去 ) </p><p>Incoming &#x2F; outaing </p><p>unbooud &#x2F; outbound </p><p>Client —&gt; Server —&gt; Handler</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Web-是怎麼運作的呢&quot;&gt;&lt;a href=&quot;#Web-是怎麼運作的呢&quot; class=&quot;headerlink&quot; title=&quot;Web 是怎麼運作的呢 ?&quot;&gt;&lt;/a&gt;Web 是怎麼運作的呢 ?&lt;/h2&gt;&lt;p&gt;  &lt;img src=&quot;https://i.imgur.com/eavypn1.jpg&quot; alt=&quot;Server-side website programming&quot;&gt;&lt;/p&gt;
&lt;p&gt;當你在瀏覽器輸入網址或點選鏈接時，瀏覽器會透過超文本傳輸協定（HTTP）向遠端的網頁伺服器發送請求（HTTP Request），網頁伺服器收到請求後，處理完成並回傳相對應的內容（HTTP Response）。&lt;/p&gt;
&lt;p&gt;全球透過海底電纜通訊，網路以網路協定相連。&lt;/p&gt;</summary>
    
    
    
    <category term="超新手時期基礎筆記" scheme="https://22aliang.github.io/categories/%E8%B6%85%E6%96%B0%E6%89%8B%E6%99%82%E6%9C%9F%E5%9F%BA%E7%A4%8E%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="cs" scheme="https://22aliang.github.io/tags/cs/"/>
    
  </entry>
  
</feed>
